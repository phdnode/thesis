(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
/* Copyright (c) 2013 Rod Vagg, MIT License */

function AbstractChainedBatch (db) {
  this._db         = db
  this._operations = []
  this._written    = false
}

AbstractChainedBatch.prototype._checkWritten = function () {
  if (this._written)
    throw new Error('write() already called on this batch')
}

AbstractChainedBatch.prototype.put = function (key, value) {
  this._checkWritten()

  var err = this._db._checkKeyValue(key, 'key', this._db._isBuffer)
  if (err) throw err
  err = this._db._checkKeyValue(value, 'value', this._db._isBuffer)
  if (err) throw err

  if (!this._db._isBuffer(key)) key = String(key)
  if (!this._db._isBuffer(value)) value = String(value)

  if (typeof this._put == 'function' )
    this._put(key, value)
  else
    this._operations.push({ type: 'put', key: key, value: value })

  return this
}

AbstractChainedBatch.prototype.del = function (key) {
  this._checkWritten()

  var err = this._db._checkKeyValue(key, 'key', this._db._isBuffer)
  if (err) throw err

  if (!this._db._isBuffer(key)) key = String(key)

  if (typeof this._del == 'function' )
    this._del(key)
  else
    this._operations.push({ type: 'del', key: key })

  return this
}

AbstractChainedBatch.prototype.clear = function () {
  this._checkWritten()

  this._operations = []

  if (typeof this._clear == 'function' )
    this._clear()

  return this
}

AbstractChainedBatch.prototype.write = function (options, callback) {
  this._checkWritten()

  if (typeof options == 'function')
    callback = options
  if (typeof callback != 'function')
    throw new Error('write() requires a callback argument')
  if (typeof options != 'object')
    options = {}

  this._written = true

  if (typeof this._write == 'function' )
    return this._write(callback)

  if (typeof this._db._batch == 'function')
    return this._db._batch(this._operations, options, callback)

  process.nextTick(callback)
}

module.exports = AbstractChainedBatch
}).call(this,require('_process'))

},{"_process":92}],2:[function(require,module,exports){
(function (process){
/* Copyright (c) 2013 Rod Vagg, MIT License */

function AbstractIterator (db) {
  this.db = db
  this._ended = false
  this._nexting = false
}

AbstractIterator.prototype.next = function (callback) {
  var self = this

  if (typeof callback != 'function')
    throw new Error('next() requires a callback argument')

  if (self._ended)
    return callback(new Error('cannot call next() after end()'))
  if (self._nexting)
    return callback(new Error('cannot call next() before previous next() has completed'))

  self._nexting = true
  if (typeof self._next == 'function') {
    return self._next(function () {
      self._nexting = false
      callback.apply(null, arguments)
    })
  }

  process.nextTick(function () {
    self._nexting = false
    callback()
  })
}

AbstractIterator.prototype.end = function (callback) {
  if (typeof callback != 'function')
    throw new Error('end() requires a callback argument')

  if (this._ended)
    return callback(new Error('end() already called on iterator'))

  this._ended = true

  if (typeof this._end == 'function')
    return this._end(callback)

  process.nextTick(callback)
}

module.exports = AbstractIterator

}).call(this,require('_process'))

},{"_process":92}],3:[function(require,module,exports){
(function (Buffer,process){
/* Copyright (c) 2013 Rod Vagg, MIT License */

var xtend                = require('xtend')
  , AbstractIterator     = require('./abstract-iterator')
  , AbstractChainedBatch = require('./abstract-chained-batch')

function AbstractLevelDOWN (location) {
  if (!arguments.length || location === undefined)
    throw new Error('constructor requires at least a location argument')

  if (typeof location != 'string')
    throw new Error('constructor requires a location string argument')

  this.location = location
}

AbstractLevelDOWN.prototype.open = function (options, callback) {
  if (typeof options == 'function')
    callback = options

  if (typeof callback != 'function')
    throw new Error('open() requires a callback argument')

  if (typeof options != 'object')
    options = {}

  if (typeof this._open == 'function')
    return this._open(options, callback)

  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.close = function (callback) {
  if (typeof callback != 'function')
    throw new Error('close() requires a callback argument')

  if (typeof this._close == 'function')
    return this._close(callback)

  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.get = function (key, options, callback) {
  var err

  if (typeof options == 'function')
    callback = options

  if (typeof callback != 'function')
    throw new Error('get() requires a callback argument')

  if (err = this._checkKeyValue(key, 'key', this._isBuffer))
    return callback(err)

  if (!this._isBuffer(key))
    key = String(key)

  if (typeof options != 'object')
    options = {}

  if (typeof this._get == 'function')
    return this._get(key, options, callback)

  process.nextTick(function () { callback(new Error('NotFound')) })
}

AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
  var err

  if (typeof options == 'function')
    callback = options

  if (typeof callback != 'function')
    throw new Error('put() requires a callback argument')

  if (err = this._checkKeyValue(key, 'key', this._isBuffer))
    return callback(err)

  if (err = this._checkKeyValue(value, 'value', this._isBuffer))
    return callback(err)

  if (!this._isBuffer(key))
    key = String(key)

  // coerce value to string in node, don't touch it in browser
  // (indexeddb can store any JS type)
  if (!this._isBuffer(value) && !process.browser)
    value = String(value)

  if (typeof options != 'object')
    options = {}

  if (typeof this._put == 'function')
    return this._put(key, value, options, callback)

  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.del = function (key, options, callback) {
  var err

  if (typeof options == 'function')
    callback = options

  if (typeof callback != 'function')
    throw new Error('del() requires a callback argument')

  if (err = this._checkKeyValue(key, 'key', this._isBuffer))
    return callback(err)

  if (!this._isBuffer(key))
    key = String(key)

  if (typeof options != 'object')
    options = {}

  if (typeof this._del == 'function')
    return this._del(key, options, callback)

  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
  if (!arguments.length)
    return this._chainedBatch()

  if (typeof options == 'function')
    callback = options

  if (typeof callback != 'function')
    throw new Error('batch(array) requires a callback argument')

  if (!Array.isArray(array))
    return callback(new Error('batch(array) requires an array argument'))

  if (typeof options != 'object')
    options = {}

  var i = 0
    , l = array.length
    , e
    , err

  for (; i < l; i++) {
    e = array[i]
    if (typeof e != 'object')
      continue

    if (err = this._checkKeyValue(e.type, 'type', this._isBuffer))
      return callback(err)

    if (err = this._checkKeyValue(e.key, 'key', this._isBuffer))
      return callback(err)

    if (e.type == 'put') {
      if (err = this._checkKeyValue(e.value, 'value', this._isBuffer))
        return callback(err)
    }
  }

  if (typeof this._batch == 'function')
    return this._batch(array, options, callback)

  process.nextTick(callback)
}

//TODO: remove from here, not a necessary primitive
AbstractLevelDOWN.prototype.approximateSize = function (start, end, callback) {
  if (   start == null
      || end == null
      || typeof start == 'function'
      || typeof end == 'function') {
    throw new Error('approximateSize() requires valid `start`, `end` and `callback` arguments')
  }

  if (typeof callback != 'function')
    throw new Error('approximateSize() requires a callback argument')

  if (!this._isBuffer(start))
    start = String(start)

  if (!this._isBuffer(end))
    end = String(end)

  if (typeof this._approximateSize == 'function')
    return this._approximateSize(start, end, callback)

  process.nextTick(function () {
    callback(null, 0)
  })
}

AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
  var self = this

  options = xtend(options)

  ;[ 'start', 'end', 'gt', 'gte', 'lt', 'lte' ].forEach(function (o) {
    if (options[o] && self._isBuffer(options[o]) && options[o].length === 0)
      delete options[o]
  })

  options.reverse = !!options.reverse

  // fix `start` so it takes into account gt, gte, lt, lte as appropriate
  if (options.reverse && options.lt)
    options.start = options.lt
  if (options.reverse && options.lte)
    options.start = options.lte
  if (!options.reverse && options.gt)
    options.start = options.gt
  if (!options.reverse && options.gte)
    options.start = options.gte

  if ((options.reverse && options.lt && !options.lte)
    || (!options.reverse && options.gt && !options.gte))
    options.exclusiveStart = true // start should *not* include matching key

  return options
}

AbstractLevelDOWN.prototype.iterator = function (options) {
  if (typeof options != 'object')
    options = {}

  options = this._setupIteratorOptions(options)

  if (typeof this._iterator == 'function')
    return this._iterator(options)

  return new AbstractIterator(this)
}

AbstractLevelDOWN.prototype._chainedBatch = function () {
  return new AbstractChainedBatch(this)
}

AbstractLevelDOWN.prototype._isBuffer = function (obj) {
  return Buffer.isBuffer(obj)
}

AbstractLevelDOWN.prototype._checkKeyValue = function (obj, type) {

  if (obj === null || obj === undefined)
    return new Error(type + ' cannot be `null` or `undefined`')

  if (this._isBuffer(obj)) {
    if (obj.length === 0)
      return new Error(type + ' cannot be an empty Buffer')
  } else if (String(obj) === '')
    return new Error(type + ' cannot be an empty String')
}

module.exports.AbstractLevelDOWN    = AbstractLevelDOWN
module.exports.AbstractIterator     = AbstractIterator
module.exports.AbstractChainedBatch = AbstractChainedBatch

}).call(this,{"isBuffer":require("../is-buffer/index.js")},require('_process'))

},{"../is-buffer/index.js":63,"./abstract-chained-batch":1,"./abstract-iterator":2,"_process":92,"xtend":4}],4:[function(require,module,exports){
module.exports = extend

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (source.hasOwnProperty(key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],5:[function(require,module,exports){
var Router = require('route-tree'),
    EventEmitter = require('events').EventEmitter,
    debounce = require('debounce');

module.exports = function(routes, getActivities, updateRoute){
    var activityRouter = new EventEmitter(),
        activities = [],
        router = new Router(routes);

    router.basePath = window.location.href.match(/(^[^?#]*)\/.*$/)[1] + '/';

    function addActivity(activity){
        activities.push(activity);

        updateHash();

        activityRouter.emit('add', activity, activities.length - 1);
    }

    function updateActivity(activity, index){
        if(activities.length <= index){
            return addActivity(activity);
        }

        activities[index].values = activity.values;

        updateHash();

        activityRouter.emit('update', activities[index], index);
    }

    function replaceActivity(activity, index){
        if(activities.length <= index){
            return addActivity(activity);
        }

        if(activities[index].name === activity.name){
            return updateActivity(activity, index);
        }

        activities[index] = activity;

        updateHash();

        activityRouter.emit('replace', activity, index);
    }

    function removeActivity(index){
        if(!activities[index]){
            return;
        }

        var activity = activities[index];

        activities.splice(index, 1);

        updateHash();

        activityRouter.emit('remove', activity, index);
    }

    function getPaths(){
        return window.location.hash.split('#').slice(1);
    }

    function buildPath(){
        var path = '';
        if(!activities.length){
            return '#/';
        }
        for(var i = 0; i < activities.length; i++){
            var route = activities[i],
                href = router.get(route.name, route.values);

            if(!href){
                console.error('No route was found named "' + route.name + '"');
                continue;
            }

            path += '#' + href.replace(router.basePath, '');
        }

        return path;
    }

    var updateHash = function(){
        var path = buildPath();

        if(router.basePath + '#' + path !== window.location.href){
            window.location.hash = path;
        }
    };

    var routeCounter = 0;

    function buildRoutes(){
        var paths = getPaths();

        if(paths.length === 0){
            paths.push('/');
        }

        for(var i = 0; i < paths.length; i++){
            var path = router.resolve(router.basePath, paths[i]),
                activity = activities[i];

            if(!activity){
                activity = {
                    id: routeCounter++,
                    name: router.find(path),
                    values: router.values(path)
                };
                addActivity(activity);
            }else{
                var newName = router.find(path),
                    newValues = router.values(path);

                replaceActivity({
                    name: newName,
                    values: newValues
                }, i);
            }

        }

        while(activities.length > i){
            removeActivity(activities.length - 1);
        }
    }

    var updateRoutes = debounce(function(){
        if(activities.length && buildPath() === window.location.hash){
            return;
        }
        buildRoutes();
    },10);

    window.addEventListener('hashchange', updateRoutes);
    window.addEventListener('popstate', updateRoutes);

    activityRouter.router = router,

    activityRouter.add = function(name, values){
        addActivity({
            name: name,
            values: values
        });
    };

    activityRouter.replace = function(name, values, index){
        replaceActivity({
            name: name,
            values: values
        }, index);
    };

    activityRouter.top = function(name, values){
        replaceActivity({
            name: name,
            values: values
        }, activities.length - 1);
    };

    activityRouter.pop = function(){
        removeActivity(activities.length - 1);
    };

    activityRouter.reset = function(name, values){
        while(activities.length > 1){
            removeActivity(activities.length - 1);
        }

        replaceActivity({
            name: name,
            values: values
        }, 0);
    };

    activityRouter.init = updateRoutes;

    return activityRouter;
}
},{"debounce":16,"events":44,"route-tree":102}],6:[function(require,module,exports){
'use strict'

exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

function init () {
  var i
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  var len = code.length

  for (i = 0; i < len; i++) {
    lookup[i] = code[i]
  }

  for (i = 0; i < len; ++i) {
    revLookup[code.charCodeAt(i)] = i
  }
  revLookup['-'.charCodeAt(0)] = 62
  revLookup['_'.charCodeAt(0)] = 63
}

init()

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp & 0xFF0000) >> 16
    arr[L++] = (tmp & 0xFF00) >> 8
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],7:[function(require,module,exports){

},{}],8:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    this.length = 0
    this.parent = undefined
  }

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(array)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
} else {
  // pre-set for values that may exist in the future
  Buffer.prototype.length = undefined
  Buffer.prototype.parent = undefined
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":6,"ieee754":61,"isarray":9}],9:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],10:[function(require,module,exports){
module.exports = function(element){
    var lastClasses = [];

    return function(classes){

        if(!arguments.length){
            return lastClasses.join(' ');
        }

        function cleanClassName(result, className){
            if(typeof className === 'string' && className.match(/\s/)){
                className = className.split(' ');
            }

            if(Array.isArray(className)){
                return result.concat(className.reduce(cleanClassName, []));
            }

            if(className != null && className !== '' && typeof className !== 'boolean'){
                result.push(String(className).trim());
            }

            return result;
        }

        var newClasses = cleanClassName([], classes),
            currentClasses = element.className ? element.className.split(' ') : [];

        lastClasses.map(function(className){
            if(!className){
                return;
            }

            var index = currentClasses.indexOf(className);

            if(~index){
                currentClasses.splice(index, 1);
            }
        });

        currentClasses = currentClasses.concat(newClasses);
        lastClasses = newClasses;

        element.className = currentClasses.join(' ');
    };
};

},{}],11:[function(require,module,exports){
(function (Buffer){
var clone = (function() {
'use strict';

/**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
*/
function clone(parent, circular, depth, prototype) {
  var filter;
  if (typeof circular === 'object') {
    depth = circular.depth;
    prototype = circular.prototype;
    filter = circular.filter;
    circular = circular.circular
  }
  // maintain two arrays for circular references, where corresponding parents
  // and children have the same index
  var allParents = [];
  var allChildren = [];

  var useBuffer = typeof Buffer != 'undefined';

  if (typeof circular == 'undefined')
    circular = true;

  if (typeof depth == 'undefined')
    depth = Infinity;

  // recurse this function so we don't reset allParents and allChildren
  function _clone(parent, depth) {
    // cloning null always returns null
    if (parent === null)
      return null;

    if (depth == 0)
      return parent;

    var child;
    var proto;
    if (typeof parent != 'object') {
      return parent;
    }

    if (clone.__isArray(parent)) {
      child = [];
    } else if (clone.__isRegExp(parent)) {
      child = new RegExp(parent.source, __getRegExpFlags(parent));
      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    } else if (clone.__isDate(parent)) {
      child = new Date(parent.getTime());
    } else if (useBuffer && Buffer.isBuffer(parent)) {
      child = new Buffer(parent.length);
      parent.copy(child);
      return child;
    } else {
      if (typeof prototype == 'undefined') {
        proto = Object.getPrototypeOf(parent);
        child = Object.create(proto);
      }
      else {
        child = Object.create(prototype);
        proto = prototype;
      }
    }

    if (circular) {
      var index = allParents.indexOf(parent);

      if (index != -1) {
        return allChildren[index];
      }
      allParents.push(parent);
      allChildren.push(child);
    }

    for (var i in parent) {
      var attrs;
      if (proto) {
        attrs = Object.getOwnPropertyDescriptor(proto, i);
      }

      if (attrs && attrs.set == null) {
        continue;
      }
      child[i] = _clone(parent[i], depth - 1);
    }

    return child;
  }

  return _clone(parent, depth);
}

/**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */
clone.clonePrototype = function clonePrototype(parent) {
  if (parent === null)
    return null;

  var c = function () {};
  c.prototype = parent;
  return new c();
};

// private utility functions

function __objToStr(o) {
  return Object.prototype.toString.call(o);
};
clone.__objToStr = __objToStr;

function __isDate(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Date]';
};
clone.__isDate = __isDate;

function __isArray(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Array]';
};
clone.__isArray = __isArray;

function __isRegExp(o) {
  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
};
clone.__isRegExp = __isRegExp;

function __getRegExpFlags(re) {
  var flags = '';
  if (re.global) flags += 'g';
  if (re.ignoreCase) flags += 'i';
  if (re.multiline) flags += 'm';
  return flags;
};
clone.__getRegExpFlags = __getRegExpFlags;

return clone;
})();

if (typeof module === 'object' && module.exports) {
  module.exports = clone;
}

}).call(this,require("buffer").Buffer)

},{"buffer":8}],12:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":63}],13:[function(require,module,exports){
var Ajax = require('simple-ajax');

module.exports = function(settings, callback){
    if(typeof settings === 'string'){
        settings = {
            url: settings
        };
    }

    if(typeof settings !== 'object'){
        throw 'settings must be a string or object';
    }

    if(typeof callback !== 'function'){
        throw 'cpjax must be passed a callback as the second parameter';
    }

    var ajax = new Ajax(settings);

    ajax.on('success', function(event, data) {
        callback(null, data, event);
    });
    ajax.on('error', function(event) {
        callback(new Error(event.target.responseText), null, event);
    });

    ajax.send();

    return ajax;
};
},{"simple-ajax":106}],14:[function(require,module,exports){
//Copyright (C) 2012 Kory Nunn

//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

/*

    This code is not formatted for readability, but rather run-speed and to assist compilers.

    However, the code's intention should be transparent.

    *** IE SUPPORT ***

    If you require this library to work in IE7, add the following after declaring crel.

    var testDiv = document.createElement('div'),
        testLabel = document.createElement('label');

    testDiv.setAttribute('class', 'a');
    testDiv['className'] !== 'a' ? crel.attrMap['class'] = 'className':undefined;
    testDiv.setAttribute('name','a');
    testDiv['name'] !== 'a' ? crel.attrMap['name'] = function(element, value){
        element.id = value;
    }:undefined;


    testLabel.setAttribute('for', 'a');
    testLabel['htmlFor'] !== 'a' ? crel.attrMap['for'] = 'htmlFor':undefined;



*/

(function (root, factory) {
    if (typeof exports === 'object') {
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        define(factory);
    } else {
        root.crel = factory();
    }
}(this, function () {
    var fn = 'function',
        obj = 'object',
        nodeType = 'nodeType',
        textContent = 'textContent',
        setAttribute = 'setAttribute',
        attrMapString = 'attrMap',
        isNodeString = 'isNode',
        isElementString = 'isElement',
        d = typeof document === obj ? document : {},
        isType = function(a, type){
            return typeof a === type;
        },
        isNode = typeof Node === fn ? function (object) {
            return object instanceof Node;
        } :
        // in IE <= 8 Node is an object, obviously..
        function(object){
            return object &&
                isType(object, obj) &&
                (nodeType in object) &&
                isType(object.ownerDocument,obj);
        },
        isElement = function (object) {
            return crel[isNodeString](object) && object[nodeType] === 1;
        },
        isArray = function(a){
            return a instanceof Array;
        },
        appendChild = function(element, child) {
          if(!crel[isNodeString](child)){
              child = d.createTextNode(child);
          }
          element.appendChild(child);
        };


    function crel(){
        var args = arguments, //Note: assigned to a variable to assist compilers. Saves about 40 bytes in closure compiler. Has negligable effect on performance.
            element = args[0],
            child,
            settings = args[1],
            childIndex = 2,
            argumentsLength = args.length,
            attributeMap = crel[attrMapString];

        element = crel[isElementString](element) ? element : d.createElement(element);
        // shortcut
        if(argumentsLength === 1){
            return element;
        }

        if(!isType(settings,obj) || crel[isNodeString](settings) || isArray(settings)) {
            --childIndex;
            settings = null;
        }

        // shortcut if there is only one child that is a string
        if((argumentsLength - childIndex) === 1 && isType(args[childIndex], 'string') && element[textContent] !== undefined){
            element[textContent] = args[childIndex];
        }else{
            for(; childIndex < argumentsLength; ++childIndex){
                child = args[childIndex];

                if(child == null){
                    continue;
                }

                if (isArray(child)) {
                  for (var i=0; i < child.length; ++i) {
                    appendChild(element, child[i]);
                  }
                } else {
                  appendChild(element, child);
                }
            }
        }

        for(var key in settings){
            if(!attributeMap[key]){
                element[setAttribute](key, settings[key]);
            }else{
                var attr = attributeMap[key];
                if(typeof attr === fn){
                    attr(element, settings[key]);
                }else{
                    element[setAttribute](attr, settings[key]);
                }
            }
        }

        return element;
    }

    // Used for mapping one kind of attribute to the supported version of that in bad browsers.
    crel[attrMapString] = {};

    crel[isElementString] = isElement;

    crel[isNodeString] = isNode;

    if(typeof Proxy !== 'undefined'){
        return new Proxy(crel, {
            get: function(target, key){
                !(key in crel) && (crel[key] = crel.bind(null, key));
                return crel[key];
            }
        });
    }

    return crel;
}));

},{}],15:[function(require,module,exports){
module.exports = Date.now || now

function now() {
    return new Date().getTime()
}

},{}],16:[function(require,module,exports){

/**
 * Module dependencies.
 */

var now = require('date-now');

/**
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing.
 *
 * @source underscore.js
 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
 * @param {Function} function to wrap
 * @param {Number} timeout in ms (`100`)
 * @param {Boolean} whether to execute at the beginning (`false`)
 * @api public
 */

module.exports = function debounce(func, wait, immediate){
  var timeout, args, context, timestamp, result;
  if (null == wait) wait = 100;

  function later() {
    var last = now() - timestamp;

    if (last < wait && last > 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      }
    }
  };

  return function debounced() {
    context = this;
    args = arguments;
    timestamp = now();
    var callNow = immediate && !timeout;
    if (!timeout) timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
      context = args = null;
    }

    return result;
  };
};

},{"date-now":15}],17:[function(require,module,exports){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

},{"./debug":18}],18:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":87}],19:[function(require,module,exports){
/* jshint node: true */
'use strict';

/**
  # defaultcss

  A very simple module for creating a little bit of defaultcss.  This is
  really useful if you are creating a small JS widget that you want to be
  completely stylable by the application implementer but would also like it
  to look "kind of ok" if someone want to have a quick play.

  ## How it Works

  The provided css text is injected into the HTML document within the document
  `<head>` prior to any other `<link>` or `<style>` tags.  This ensures that
  any definitions that are made within your provided CSS have ample
  opportunity to be overridden by user defined CSS.

  ## Example Usage

  <<< examples/widget.js

  ## Reference

  ### defaultcss

  ```
  defaultcss(label, csstext)
  ```

  Create a new default `style` element and use the provided `label` to
  generate an id for the element "%label%_defaultstyle".  If an existing
  element with that id is found, then do nothing.

  If not, then create the new element and use the provided `csstext` as
  `innerText` for th element.
**/
module.exports = function(label, text) {
  var styleId = label + '_defaultstyle';

  // look for a DOM element with the style id
  var styleEl = document.getElementById(styleId);

  // find the first <link> or <style> tag within the document head
  var firstStyleDef = document.querySelector('link[rel="stylesheet"],style');

  // if we can find a DOM element with that id, then do nothing as a default
  // style has already been applied
  if (styleEl) {
    return styleEl;
  }

  // otherwise, create a style element
  styleEl = document.createElement('style');
  styleEl.innerHTML = text;

  // insert the style element, in order or preference
  // 1. before the first style related element in the page
  if (firstStyleDef) {
    firstStyleDef.parentNode.insertBefore(styleEl, firstStyleDef);
  }
  // 2. to the end of the HEAD
  else if (document.head) {
    document.head.appendChild(styleEl);
  }
  // 3. as the first element in the body
  else if (document.body && document.body.childNodes.length > 0) {
    document.body.insertBefore(styleEl, document.body.childNodes[0]);
  }
  // 4. in the body
  else if (document.body) {
    document.body.appendChild(styleEl);
  }

  return styleEl;
};

},{}],20:[function(require,module,exports){
var util = require('util')
  , AbstractIterator = require('abstract-leveldown').AbstractIterator


function DeferredIterator (options) {
  AbstractIterator.call(this, options)

  this._options = options
  this._iterator = null
  this._operations = []
}

util.inherits(DeferredIterator, AbstractIterator)

DeferredIterator.prototype.setDb = function (db) {
  var it = this._iterator = db.iterator(this._options)
  this._operations.forEach(function (op) {
    it[op.method].apply(it, op.args)
  })
}

DeferredIterator.prototype._operation = function (method, args) {
  if (this._iterator)
    return this._iterator[method].apply(this._iterator, args)
  this._operations.push({ method: method, args: args })
}

'next end'.split(' ').forEach(function (m) {
  DeferredIterator.prototype['_' + m] = function () {
    this._operation(m, arguments)
  }
})

module.exports = DeferredIterator;

},{"abstract-leveldown":25,"util":124}],21:[function(require,module,exports){
(function (Buffer,process){
var util              = require('util')
  , AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN
  , DeferredIterator  = require('./deferred-iterator')

function DeferredLevelDOWN (location) {
  AbstractLevelDOWN.call(this, typeof location == 'string' ? location : '') // optional location, who cares?
  this._db         = undefined
  this._operations = []
  this._iterators  = []
}

util.inherits(DeferredLevelDOWN, AbstractLevelDOWN)

// called by LevelUP when we have a real DB to take its place
DeferredLevelDOWN.prototype.setDb = function (db) {
  this._db = db
  this._operations.forEach(function (op) {
    db[op.method].apply(db, op.args)
  })
  this._iterators.forEach(function (it) {
    it.setDb(db)
  })
}

DeferredLevelDOWN.prototype._open = function (options, callback) {
  return process.nextTick(callback)
}

// queue a new deferred operation
DeferredLevelDOWN.prototype._operation = function (method, args) {
  if (this._db)
    return this._db[method].apply(this._db, args)
  this._operations.push({ method: method, args: args })
}

// deferrables
'put get del batch approximateSize'.split(' ').forEach(function (m) {
  DeferredLevelDOWN.prototype['_' + m] = function () {
    this._operation(m, arguments)
  }
})

DeferredLevelDOWN.prototype._isBuffer = function (obj) {
  return Buffer.isBuffer(obj)
}

DeferredLevelDOWN.prototype._iterator = function (options) {
  if (this._db)
    return this._db.iterator.apply(this._db, arguments)
  var it = new DeferredIterator(options)
  this._iterators.push(it)
  return it
}

module.exports                  = DeferredLevelDOWN
module.exports.DeferredIterator = DeferredIterator

}).call(this,{"isBuffer":require("../is-buffer/index.js")},require('_process'))

},{"../is-buffer/index.js":63,"./deferred-iterator":20,"_process":92,"abstract-leveldown":25,"util":124}],22:[function(require,module,exports){
(function (process){
/* Copyright (c) 2013 Rod Vagg, MIT License */

function AbstractChainedBatch (db) {
  this._db         = db
  this._operations = []
  this._written    = false
}

AbstractChainedBatch.prototype._checkWritten = function () {
  if (this._written)
    throw new Error('write() already called on this batch')
}

AbstractChainedBatch.prototype.put = function (key, value) {
  this._checkWritten()

  var err = this._db._checkKey(key, 'key', this._db._isBuffer)
  if (err)
    throw err

  if (!this._db._isBuffer(key)) key = String(key)
  if (!this._db._isBuffer(value)) value = String(value)

  if (typeof this._put == 'function' )
    this._put(key, value)
  else
    this._operations.push({ type: 'put', key: key, value: value })

  return this
}

AbstractChainedBatch.prototype.del = function (key) {
  this._checkWritten()

  var err = this._db._checkKey(key, 'key', this._db._isBuffer)
  if (err) throw err

  if (!this._db._isBuffer(key)) key = String(key)

  if (typeof this._del == 'function' )
    this._del(key)
  else
    this._operations.push({ type: 'del', key: key })

  return this
}

AbstractChainedBatch.prototype.clear = function () {
  this._checkWritten()

  this._operations = []

  if (typeof this._clear == 'function' )
    this._clear()

  return this
}

AbstractChainedBatch.prototype.write = function (options, callback) {
  this._checkWritten()

  if (typeof options == 'function')
    callback = options
  if (typeof callback != 'function')
    throw new Error('write() requires a callback argument')
  if (typeof options != 'object')
    options = {}

  this._written = true

  if (typeof this._write == 'function' )
    return this._write(callback)

  if (typeof this._db._batch == 'function')
    return this._db._batch(this._operations, options, callback)

  process.nextTick(callback)
}

module.exports = AbstractChainedBatch
}).call(this,require('_process'))

},{"_process":92}],23:[function(require,module,exports){
(function (process){
/* Copyright (c) 2013 Rod Vagg, MIT License */

function AbstractIterator (db) {
  this.db = db
  this._ended = false
  this._nexting = false
}

AbstractIterator.prototype.next = function (callback) {
  var self = this

  if (typeof callback != 'function')
    throw new Error('next() requires a callback argument')

  if (self._ended)
    return callback(new Error('cannot call next() after end()'))
  if (self._nexting)
    return callback(new Error('cannot call next() before previous next() has completed'))

  self._nexting = true
  if (typeof self._next == 'function') {
    return self._next(function () {
      self._nexting = false
      callback.apply(null, arguments)
    })
  }

  process.nextTick(function () {
    self._nexting = false
    callback()
  })
}

AbstractIterator.prototype.end = function (callback) {
  if (typeof callback != 'function')
    throw new Error('end() requires a callback argument')

  if (this._ended)
    return callback(new Error('end() already called on iterator'))

  this._ended = true

  if (typeof this._end == 'function')
    return this._end(callback)

  process.nextTick(callback)
}

module.exports = AbstractIterator

}).call(this,require('_process'))

},{"_process":92}],24:[function(require,module,exports){
(function (Buffer,process){
/* Copyright (c) 2013 Rod Vagg, MIT License */

var xtend                = require('xtend')
  , AbstractIterator     = require('./abstract-iterator')
  , AbstractChainedBatch = require('./abstract-chained-batch')

function AbstractLevelDOWN (location) {
  if (!arguments.length || location === undefined)
    throw new Error('constructor requires at least a location argument')

  if (typeof location != 'string')
    throw new Error('constructor requires a location string argument')

  this.location = location
  this.status = 'new'
}

AbstractLevelDOWN.prototype.open = function (options, callback) {
  var self      = this
    , oldStatus = this.status

  if (typeof options == 'function')
    callback = options

  if (typeof callback != 'function')
    throw new Error('open() requires a callback argument')

  if (typeof options != 'object')
    options = {}

  options.createIfMissing = options.createIfMissing != false
  options.errorIfExists = !!options.errorIfExists

  if (typeof this._open == 'function') {
    this.status = 'opening'
    this._open(options, function (err) {
      if (err) {
        self.status = oldStatus
        return callback(err)
      }
      self.status = 'open'
      callback()
    })
  } else {
    this.status = 'open'
    process.nextTick(callback)
  }
}

AbstractLevelDOWN.prototype.close = function (callback) {
  var self      = this
    , oldStatus = this.status

  if (typeof callback != 'function')
    throw new Error('close() requires a callback argument')

  if (typeof this._close == 'function') {
    this.status = 'closing'
    this._close(function (err) {
      if (err) {
        self.status = oldStatus
        return callback(err)
      }
      self.status = 'closed'
      callback()
    })
  } else {
    this.status = 'closed'
    process.nextTick(callback)
  }
}

AbstractLevelDOWN.prototype.get = function (key, options, callback) {
  var err

  if (typeof options == 'function')
    callback = options

  if (typeof callback != 'function')
    throw new Error('get() requires a callback argument')

  if (err = this._checkKey(key, 'key', this._isBuffer))
    return callback(err)

  if (!this._isBuffer(key))
    key = String(key)

  if (typeof options != 'object')
    options = {}

  options.asBuffer = options.asBuffer != false

  if (typeof this._get == 'function')
    return this._get(key, options, callback)

  process.nextTick(function () { callback(new Error('NotFound')) })
}

AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
  var err

  if (typeof options == 'function')
    callback = options

  if (typeof callback != 'function')
    throw new Error('put() requires a callback argument')

  if (err = this._checkKey(key, 'key', this._isBuffer))
    return callback(err)

  if (!this._isBuffer(key))
    key = String(key)

  // coerce value to string in node, don't touch it in browser
  // (indexeddb can store any JS type)
  if (value != null && !this._isBuffer(value) && !process.browser)
    value = String(value)

  if (typeof options != 'object')
    options = {}

  if (typeof this._put == 'function')
    return this._put(key, value, options, callback)

  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.del = function (key, options, callback) {
  var err

  if (typeof options == 'function')
    callback = options

  if (typeof callback != 'function')
    throw new Error('del() requires a callback argument')

  if (err = this._checkKey(key, 'key', this._isBuffer))
    return callback(err)

  if (!this._isBuffer(key))
    key = String(key)

  if (typeof options != 'object')
    options = {}

  if (typeof this._del == 'function')
    return this._del(key, options, callback)

  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
  if (!arguments.length)
    return this._chainedBatch()

  if (typeof options == 'function')
    callback = options

  if (typeof array == 'function')
    callback = array

  if (typeof callback != 'function')
    throw new Error('batch(array) requires a callback argument')

  if (!Array.isArray(array))
    return callback(new Error('batch(array) requires an array argument'))

  if (!options || typeof options != 'object')
    options = {}

  var i = 0
    , l = array.length
    , e
    , err

  for (; i < l; i++) {
    e = array[i]
    if (typeof e != 'object')
      continue

    if (err = this._checkKey(e.type, 'type', this._isBuffer))
      return callback(err)

    if (err = this._checkKey(e.key, 'key', this._isBuffer))
      return callback(err)
  }

  if (typeof this._batch == 'function')
    return this._batch(array, options, callback)

  process.nextTick(callback)
}

//TODO: remove from here, not a necessary primitive
AbstractLevelDOWN.prototype.approximateSize = function (start, end, callback) {
  if (   start == null
      || end == null
      || typeof start == 'function'
      || typeof end == 'function') {
    throw new Error('approximateSize() requires valid `start`, `end` and `callback` arguments')
  }

  if (typeof callback != 'function')
    throw new Error('approximateSize() requires a callback argument')

  if (!this._isBuffer(start))
    start = String(start)

  if (!this._isBuffer(end))
    end = String(end)

  if (typeof this._approximateSize == 'function')
    return this._approximateSize(start, end, callback)

  process.nextTick(function () {
    callback(null, 0)
  })
}

AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
  var self = this

  options = xtend(options)

  ;[ 'start', 'end', 'gt', 'gte', 'lt', 'lte' ].forEach(function (o) {
    if (options[o] && self._isBuffer(options[o]) && options[o].length === 0)
      delete options[o]
  })

  options.reverse = !!options.reverse
  options.keys = options.keys != false
  options.values = options.values != false
  options.limit = 'limit' in options ? options.limit : -1
  options.keyAsBuffer = options.keyAsBuffer != false
  options.valueAsBuffer = options.valueAsBuffer != false

  return options
}

AbstractLevelDOWN.prototype.iterator = function (options) {
  if (typeof options != 'object')
    options = {}

  options = this._setupIteratorOptions(options)

  if (typeof this._iterator == 'function')
    return this._iterator(options)

  return new AbstractIterator(this)
}

AbstractLevelDOWN.prototype._chainedBatch = function () {
  return new AbstractChainedBatch(this)
}

AbstractLevelDOWN.prototype._isBuffer = function (obj) {
  return Buffer.isBuffer(obj)
}

AbstractLevelDOWN.prototype._checkKey = function (obj, type) {

  if (obj === null || obj === undefined)
    return new Error(type + ' cannot be `null` or `undefined`')

  if (this._isBuffer(obj)) {
    if (obj.length === 0)
      return new Error(type + ' cannot be an empty Buffer')
  } else if (String(obj) === '')
    return new Error(type + ' cannot be an empty String')
}

module.exports = AbstractLevelDOWN

}).call(this,{"isBuffer":require("../../../is-buffer/index.js")},require('_process'))

},{"../../../is-buffer/index.js":63,"./abstract-chained-batch":22,"./abstract-iterator":23,"_process":92,"xtend":131}],25:[function(require,module,exports){
exports.AbstractLevelDOWN    = require('./abstract-leveldown')
exports.AbstractIterator     = require('./abstract-iterator')
exports.AbstractChainedBatch = require('./abstract-chained-batch')
exports.isLevelDOWN          = require('./is-leveldown')

},{"./abstract-chained-batch":22,"./abstract-iterator":23,"./abstract-leveldown":24,"./is-leveldown":26}],26:[function(require,module,exports){
var AbstractLevelDOWN = require('./abstract-leveldown')

function isLevelDOWN (db) {
  if (!db || typeof db !== 'object')
    return false
  return Object.keys(AbstractLevelDOWN.prototype).filter(function (name) {
    // TODO remove approximateSize check when method is gone
    return name[0] != '_' && name != 'approximateSize'
  }).every(function (name) {
    return typeof db[name] == 'function'
  })
}

module.exports = isLevelDOWN

},{"./abstract-leveldown":24}],27:[function(require,module,exports){
var doc = {
    document: typeof document !== 'undefined' ? document : null,
    setDocument: function(d){
        this.document = d;
    }
};

var arrayProto = [],
    isList = require('./isList'),
    getTargets = require('./getTargets')(doc.document),
    getTarget = require('./getTarget')(doc.document),
    space = ' ';


///[README.md]

function isIn(array, item){
    for(var i = 0; i < array.length; i++) {
        if(item === array[i]){
            return true;
        }
    }
}

/**

    ## .find

    finds elements that match the query within the scope of target

        //fluent
        doc(target).find(query);

        //legacy
        doc.find(target, query);
*/

function find(target, query){
    target = getTargets(target);
    if(query == null){
        return target;
    }

    if(isList(target)){
        var results = [];
        for (var i = 0; i < target.length; i++) {
            var subResults = doc.find(target[i], query);
            for(var j = 0; j < subResults.length; j++) {
                if(!isIn(results, subResults[j])){
                    results.push(subResults[j]);
                }
            }
        }
        return results;
    }

    return target ? target.querySelectorAll(query) : [];
}

/**

    ## .findOne

    finds the first element that matches the query within the scope of target

        //fluent
        doc(target).findOne(query);

        //legacy
        doc.findOne(target, query);
*/

function findOne(target, query){
    target = getTarget(target);
    if(query == null){
        return target;
    }

    if(isList(target)){
        var result;
        for (var i = 0; i < target.length; i++) {
            result = findOne(target[i], query);
            if(result){
                break;
            }
        }
        return result;
    }

    return target ? target.querySelector(query) : null;
}

/**

    ## .closest

    recurses up the DOM from the target node, checking if the current element matches the query

        //fluent
        doc(target).closest(query);

        //legacy
        doc.closest(target, query);
*/

function closest(target, query){
    target = getTarget(target);

    if(isList(target)){
        target = target[0];
    }

    while(
        target &&
        target.ownerDocument &&
        !is(target, query)
    ){
        target = target.parentNode;
    }

    return target === doc.document && target !== query ? null : target;
}

/**

    ## .is

    returns true if the target element matches the query

        //fluent
        doc(target).is(query);

        //legacy
        doc.is(target, query);
*/

function is(target, query){
    target = getTarget(target);

    if(isList(target)){
        target = target[0];
    }

    if(!target.ownerDocument || typeof query !== 'string'){
        return target === query;
    }

    if(target === query){
        return true;
    }

    var parentless = !target.parentNode;

    if(parentless){
        // Give the element a parent so that .querySelectorAll can be used
        document.createDocumentFragment().appendChild(target);
    }

    var result = arrayProto.indexOf.call(find(target.parentNode, query), target) >= 0;

    if(parentless){
        target.parentNode.removeChild(target);
    }

    return result;
}

/**

    ## .addClass

    adds classes to the target (space separated string or array)

        //fluent
        doc(target).addClass(query);

        //legacy
        doc.addClass(target, query);
*/

function addClass(target, classes){
    target = getTargets(target);

    if(isList(target)){
        for (var i = 0; i < target.length; i++) {
            addClass(target[i], classes);
        }
        return this;
    }
    if(!classes){
        return this;
    }

    var classes = Array.isArray(classes) ? classes : classes.split(space),
        currentClasses = target.classList ? null : target.className.split(space);

    for(var i = 0; i < classes.length; i++){
        var classToAdd = classes[i];
        if(!classToAdd || classToAdd === space){
            continue;
        }
        if(target.classList){
            target.classList.add(classToAdd);
        } else if(!currentClasses.indexOf(classToAdd)>=0){
            currentClasses.push(classToAdd);
        }
    }
    if(!target.classList){
        target.className = currentClasses.join(space);
    }
    return this;
}

/**

    ## .removeClass

    removes classes from the target (space separated string or array)

        //fluent
        doc(target).removeClass(query);

        //legacy
        doc.removeClass(target, query);
*/

function removeClass(target, classes){
    target = getTargets(target);

    if(isList(target)){
        for (var i = 0; i < target.length; i++) {
            removeClass(target[i], classes);
        }
        return this;
    }

    if(!classes){
        return this;
    }

    var classes = Array.isArray(classes) ? classes : classes.split(space),
        currentClasses = target.classList ? null : target.className.split(space);

    for(var i = 0; i < classes.length; i++){
        var classToRemove = classes[i];
        if(!classToRemove || classToRemove === space){
            continue;
        }
        if(target.classList){
            target.classList.remove(classToRemove);
            continue;
        }
        var removeIndex = currentClasses.indexOf(classToRemove);
        if(removeIndex >= 0){
            currentClasses.splice(removeIndex, 1);
        }
    }
    if(!target.classList){
        target.className = currentClasses.join(space);
    }
    return this;
}

function addEvent(settings){
    var target = getTarget(settings.target);
    if(target){
        target.addEventListener(settings.event, settings.callback, false);
    }else{
        console.warn('No elements matched the selector, so no events were bound.');
    }
}

/**

    ## .on

    binds a callback to a target when a DOM event is raised.

        //fluent
        doc(target/proxy).on(events, target[optional], callback);

    note: if a target is passed to the .on function, doc's target will be used as the proxy.

        //legacy
        doc.on(events, target, query, proxy[optional]);
*/

function on(events, target, callback, proxy){

    proxy = getTargets(proxy);

    if(!proxy){
        target = getTargets(target);
        // handles multiple targets
        if(isList(target)){
            var multiRemoveCallbacks = [];
            for (var i = 0; i < target.length; i++) {
                multiRemoveCallbacks.push(on(events, target[i], callback, proxy));
            }
            return function(){
                while(multiRemoveCallbacks.length){
                    multiRemoveCallbacks.pop();
                }
            };
        }
    }

    // handles multiple proxies
    // Already handles multiple proxies and targets,
    // because the target loop calls this loop.
    if(isList(proxy)){
        var multiRemoveCallbacks = [];
        for (var i = 0; i < proxy.length; i++) {
            multiRemoveCallbacks.push(on(events, target, callback, proxy[i]));
        }
        return function(){
            while(multiRemoveCallbacks.length){
                multiRemoveCallbacks.pop();
            }
        };
    }

    var removeCallbacks = [];

    if(typeof events === 'string'){
        events = events.split(space);
    }

    for(var i = 0; i < events.length; i++){
        var eventSettings = {};
        if(proxy){
            if(proxy === true){
                proxy = doc.document;
            }
            eventSettings.target = proxy;
            eventSettings.callback = function(event){
                var closestTarget = closest(event.target, target);
                if(closestTarget){
                    callback(event, closestTarget);
                }
            };
        }else{
            eventSettings.target = target;
            eventSettings.callback = callback;
        }

        eventSettings.event = events[i];

        addEvent(eventSettings);

        removeCallbacks.push(eventSettings);
    }

    return function(){
        while(removeCallbacks.length){
            var removeCallback = removeCallbacks.pop();
            getTarget(removeCallback.target).removeEventListener(removeCallback.event, removeCallback.callback);
        }
    }
}

/**

    ## .off

    removes events assigned to a target.

        //fluent
        doc(target/proxy).off(events, target[optional], callback);

    note: if a target is passed to the .on function, doc's target will be used as the proxy.

        //legacy
        doc.off(events, target, callback, proxy);
*/

function off(events, target, callback, proxy){
    if(isList(target)){
        for (var i = 0; i < target.length; i++) {
            off(events, target[i], callback, proxy);
        }
        return this;
    }
    if(proxy instanceof Array){
        for (var i = 0; i < proxy.length; i++) {
            off(events, target, callback, proxy[i]);
        }
        return this;
    }

    if(typeof events === 'string'){
        events = events.split(space);
    }

    if(typeof callback !== 'function'){
        proxy = callback;
        callback = null;
    }

    proxy = proxy ? getTarget(proxy) : doc.document;

    var targets = typeof target === 'string' ? find(target, proxy) : [target];

    for(var targetIndex = 0; targetIndex < targets.length; targetIndex++){
        var currentTarget = targets[targetIndex];

        for(var i = 0; i < events.length; i++){
            currentTarget.removeEventListener(events[i], callback);
        }
    }
    return this;
}

/**

    ## .append

    adds elements to a target

        //fluent
        doc(target).append(children);

        //legacy
        doc.append(target, children);
*/

function append(target, children){
    var target = getTarget(target),
        children = getTarget(children);

    if(isList(target)){
        target = target[0];
    }

    if(isList(children)){
        for (var i = 0; i < children.length; i++) {
            append(target, children[i]);
        }
        return;
    }

    target.appendChild(children);
}

/**

    ## .prepend

    adds elements to the front of a target

        //fluent
        doc(target).prepend(children);

        //legacy
        doc.prepend(target, children);
*/

function prepend(target, children){
    var target = getTarget(target),
        children = getTarget(children);

    if(isList(target)){
        target = target[0];
    }

    if(isList(children)){
        //reversed because otherwise the would get put in in the wrong order.
        for (var i = children.length -1; i; i--) {
            prepend(target, children[i]);
        }
        return;
    }

    target.insertBefore(children, target.firstChild);
}

/**

    ## .isVisible

    checks if an element or any of its parents display properties are set to 'none'

        //fluent
        doc(target).isVisible();

        //legacy
        doc.isVisible(target);
*/

function isVisible(target){
    var target = getTarget(target);
    if(!target){
        return;
    }
    if(isList(target)){
        var i = -1;

        while (target[i++] && isVisible(target[i])) {}
        return target.length >= i;
    }
    while(target.parentNode && target.style.display !== 'none'){
        target = target.parentNode;
    }

    return target === doc.document;
}

/**

    ## .indexOfElement

    returns the index of the element within it's parent element.

        //fluent
        doc(target).indexOfElement();

        //legacy
        doc.indexOfElement(target);

*/

function indexOfElement(target) {
    target = getTargets(target);
    if(!target){
        return;
    }

    if(isList(target)){
        target = target[0];
    }

    var i = -1;

    var parent = target.parentElement;

    if(!parent){
        return i;
    }

    while(parent.children[++i] !== target){}

    return i;
}


/**

    ## .ready

    call a callback when the document is ready.

    returns -1 if there is no parentElement on the target.

        //fluent
        doc().ready(callback);

        //legacy
        doc.ready(callback);
*/

function ready(callback){
    if(doc.document && (doc.document.readyState === 'complete' || doc.document.readyState === 'interactive')){
        callback();
    }else if(window.attachEvent){
        document.attachEvent("onreadystatechange", callback);
        window.attachEvent("onLoad",callback);
    }else if(document.addEventListener){
        document.addEventListener("DOMContentLoaded",callback,false);
    }
}

doc.find = find;
doc.findOne = findOne;
doc.closest = closest;
doc.is = is;
doc.addClass = addClass;
doc.removeClass = removeClass;
doc.off = off;
doc.on = on;
doc.append = append;
doc.prepend = prepend;
doc.isVisible = isVisible;
doc.ready = ready;
doc.indexOfElement = indexOfElement;

module.exports = doc;
},{"./getTarget":29,"./getTargets":30,"./isList":31}],28:[function(require,module,exports){
var doc = require('./doc'),
    isList = require('./isList'),
    getTargets = require('./getTargets')(doc.document),
    flocProto = [];

function Floc(items){
    this.push.apply(this, items);
}
Floc.prototype = flocProto;
flocProto.constructor = Floc;

function floc(target){
    var instance = getTargets(target);

    if(!isList(instance)){
        if(instance){
            instance = [instance];
        }else{
            instance = [];
        }
    }
    return new Floc(instance);
}

var returnsSelf = 'addClass removeClass append prepend'.split(' ');

for(var key in doc){
    if(typeof doc[key] === 'function'){
        floc[key] = doc[key];
        flocProto[key] = (function(key){
            var instance = this;
            // This is also extremely dodgy and fast
            return function(a,b,c,d,e,f){
                var result = doc[key](this, a,b,c,d,e,f);

                if(result !== doc && isList(result)){
                    return floc(result);
                }
                if(returnsSelf.indexOf(key) >=0){
                    return instance;
                }
                return result;
            };
        }(key));
    }
}
flocProto.on = function(events, target, callback){
    var proxy = this;
    if(typeof target === 'function'){
        callback = target;
        target = this;
        proxy = null;
    }
    doc.on(events, target, callback, proxy);
    return this;
};

flocProto.off = function(events, target, callback){
    var reference = this;
    if(typeof target === 'function'){
        callback = target;
        target = this;
        reference = null;
    }
    doc.off(events, target, callback, reference);
    return this;
};

flocProto.ready = function(callback){
    doc.ready(callback);
    return this;
};

flocProto.addClass = function(className){
    doc.addClass(this, className);
    return this;
};

flocProto.removeClass = function(className){
    doc.removeClass(this, className);
    return this;
};

module.exports = floc;
},{"./doc":27,"./getTargets":30,"./isList":31}],29:[function(require,module,exports){
var singleId = /^#\w+$/;

module.exports = function(document){
    return function getTarget(target){
        if(typeof target === 'string'){
            if(singleId.exec(target)){
                return document.getElementById(target.slice(1));
            }
            return document.querySelector(target);
        }

        return target;
    };
};
},{}],30:[function(require,module,exports){

var singleClass = /^\.\w+$/,
    singleId = /^#\w+$/,
    singleTag = /^\w+$/;

module.exports = function(document){
    return function getTargets(target){
        if(typeof target === 'string'){
            if(singleId.exec(target)){
                // If you have more than 1 of the same id in your page,
                // thats your own stupid fault.
                return [document.getElementById(target.slice(1))];
            }
            if(singleTag.exec(target)){
                return document.getElementsByTagName(target);
            }
            if(singleClass.exec(target)){
                return document.getElementsByClassName(target.slice(1));
            }
            return document.querySelectorAll(target);
        }

        return target;
    };
};
},{}],31:[function(require,module,exports){
module.exports = function isList(object){
    return object != null && typeof object === 'object' && 'length' in object && !('nodeType' in object) && object.self != object; // in IE8, window.self is window, but it is not === window, but it is == window......... WTF!?
}
},{}],32:[function(require,module,exports){
(function (global){
var EventEmitter = require('events').EventEmitter;

function toArray(items){
    return Array.prototype.slice.call(items);
}

var deepRegex = /[|.]/i;

function matchDeep(path){
    return (path + '').match(deepRegex);
}

function isWildcardPath(path){
    var stringPath = (path + '');
    return ~stringPath.indexOf('*');
}

function getTargetKey(path){
    var stringPath = (path + '');
    return stringPath.split('|').shift();
}

var eventSystemVersion = 1,
    globalKey = '_entiEventState' + eventSystemVersion
    globalState = global[globalKey] = global[globalKey] || {
        instances: []
    };

var modifiedEnties = globalState.modifiedEnties = globalState.modifiedEnties || new Set(),
    trackedObjects = globalState.trackedObjects = globalState.trackedObjects || new WeakMap();

function leftAndRest(path){
    var stringPath = (path + '');

    // Special case when you want to filter on self (.)
    if(stringPath.slice(0,2) === '.|'){
        return ['.', stringPath.slice(2)];
    }

    var match = matchDeep(stringPath);
    if(match){
        return [stringPath.slice(0, match.index), stringPath.slice(match.index+1)];
    }
    return stringPath;
}

function isWildcardKey(key){
    return key.charAt(0) === '*';
}

function isFeralcardKey(key){
    return key === '**';
}

function addHandler(object, key, handler){
    var trackedKeys = trackedObjects.get(object);

    if(trackedKeys == null){
        trackedKeys = {};
        trackedObjects.set(object, trackedKeys);
    }

    var handlers = trackedKeys[key];

    if(!handlers){
        handlers = new Set();
        trackedKeys[key] = handlers;
    }

    handlers.add(handler);
}

function removeHandler(object, key, handler){
    var trackedKeys = trackedObjects.get(object);

    if(trackedKeys == null){
        return;
    }

    var handlers = trackedKeys[key];

    if(!handlers){
        return;
    }

    handlers.delete(handler);
}

function trackObjects(eventName, tracked, handler, object, key, path){
    if(!object || typeof object !== 'object'){
        return;
    }

    var eventKey = key === '**' ? '*' : key,
        target = object[key],
        targetIsObject = target && typeof target === 'object';

    if(targetIsObject && tracked.has(target)){
        return;
    }

    var handle = function(value, event, emitKey){
        if(eventKey !== '*' && typeof object[eventKey] === 'object' && object[eventKey] !== target){
            if(targetIsObject){
                tracked.delete(target);
            }
            removeHandler(object, eventKey, handle);
            trackObjects(eventName, tracked, handler, object, key, path);
            return;
        }

        if(eventKey === '*'){
            trackKeys(object, key, path);
        }

        if(!tracked.has(object)){
            return;
        }

        if(key !== '**' || !path){
            handler(value, event, emitKey);
        }
    }

    function trackKeys(target, root, rest){
        var keys = Object.keys(target);
        for(var i = 0; i < keys.length; i++){
            if(isFeralcardKey(root)){
                trackObjects(eventName, tracked, handler, target, keys[i], '**' + (rest ? '.' : '') + (rest || ''));
            }else{
                trackObjects(eventName, tracked, handler, target, keys[i], rest);
            }
        }
    }

    addHandler(object, eventKey, handle);

    if(!targetIsObject){
        return;
    }

    // This would obviously be better implemented with a WeakSet,
    // But I'm trying to keep filesize down, and I don't really want another
    // polyfill when WeakMap works well enough for the task.
    tracked.add(target);

    if(!path){
        return;
    }

    var rootAndRest = leftAndRest(path),
        root,
        rest;

    if(!Array.isArray(rootAndRest)){
        root = rootAndRest;
    }else{
        root = rootAndRest[0];
        rest = rootAndRest[1];

        // If the root is '.', watch for events on *
        if(root === '.'){
            root = '*';
        }
    }

    if(targetIsObject && isWildcardKey(root)){
        trackKeys(target, root, rest);
    }

    trackObjects(eventName, tracked, handler, target, root, rest);
}

var trackedEvents = new WeakMap();
function createHandler(enti, trackedObjectPaths, trackedPaths, eventName){
    var oldModel = enti._model;
    return function(event, emitKey){
        trackedPaths.entis.forEach(function(enti){
            if(enti._emittedEvents[eventName] === emitKey){
                return;
            }

            if(enti._model !== oldModel){
                trackedPaths.entis.delete(enti);
                if(trackedPaths.entis.size === 0){
                    delete trackedObjectPaths[eventName];
                    if(!Object.keys(trackedObjectPaths).length){
                        trackedEvents.delete(oldModel);
                    }
                }
                return;
            }

            enti._emittedEvents[eventName] = emitKey;

            var targetKey = getTargetKey(eventName),
                value = isWildcardPath(targetKey) ? undefined : enti.get(targetKey);

            enti.emit(eventName, value, event);
        });
    };
}

function trackPath(enti, eventName){
    var object = enti._model,
        trackedObjectPaths = trackedEvents.get(object);

    if(!trackedObjectPaths){
        trackedObjectPaths = {};
        trackedEvents.set(object, trackedObjectPaths);
    }

    var trackedPaths = trackedObjectPaths[eventName];

    if(!trackedPaths){
        trackedPaths = {
            entis: new Set(),
            trackedObjects: new WeakSet()
        };
        trackedObjectPaths[eventName] = trackedPaths;
    }else if(trackedPaths.entis.has(enti)){
        return;
    }

    trackedPaths.entis.add(enti);

    var handler = createHandler(enti, trackedObjectPaths, trackedPaths, eventName);

    trackObjects(eventName, trackedPaths.trackedObjects, handler, {model:object}, 'model', eventName);
}

function trackPaths(enti){
    if(!enti._events || !enti._model){
        return;
    }

    for(var key in enti._events){
        trackPath(enti, key);
    }
    modifiedEnties.delete(enti);
}

function emitEvent(object, key, value, emitKey){

    modifiedEnties.forEach(trackPaths);

    var trackedKeys = trackedObjects.get(object);

    if(!trackedKeys){
        return;
    }

    var event = {
        value: value,
        key: key,
        object: object
    };

    function emitForKey(handler){
        handler(event, emitKey);
    }

    if(trackedKeys[key]){
        trackedKeys[key].forEach(emitForKey);
    }

    if(trackedKeys['*']){
        trackedKeys['*'].forEach(emitForKey);
    }
}

function emit(events){
    var emitKey = {};
    events.forEach(function(event){
        emitEvent(event[0], event[1], event[2], emitKey);
    });
}

function Enti(model){
    var detached = model === false;

    if(!model || (typeof model !== 'object' && typeof model !== 'function')){
        model = {};
    }

    this._emittedEvents = {};
    if(detached){
        this._model = {};
    }else{
        this.attach(model);
    }

    this.on('newListener', function(){
        modifiedEnties.add(this);
    });
}
Enti.get = function(model, key){
    if(!model || typeof model !== 'object'){
        return;
    }

    key = getTargetKey(key);

    if(key === '.'){
        return model;
    }


    var path = leftAndRest(key);
    if(Array.isArray(path)){
        return Enti.get(model[path[0]], path[1]);
    }

    return model[key];
};
Enti.set = function(model, key, value){
    if(!model || typeof model !== 'object'){
        return;
    }

    key = getTargetKey(key);

    var path = leftAndRest(key);
    if(Array.isArray(path)){
        return Enti.set(model[path[0]], path[1], value);
    }

    var original = model[key];

    if(typeof value !== 'object' && value === original){
        return;
    }

    var keysChanged = !(key in model);

    model[key] = value;

    var events = [[model, key, value]];

    if(keysChanged){
        if(Array.isArray(model)){
            events.push([model, 'length', model.length]);
        }
    }

    emit(events);
};
Enti.push = function(model, key, value){
    if(!model || typeof model !== 'object'){
        return;
    }

    var target;
    if(arguments.length < 3){
        value = key;
        key = '.';
        target = model;
    }else{
        var path = leftAndRest(key);
        if(Array.isArray(path)){
            return Enti.push(model[path[0]], path[1], value);
        }

        target = model[key];
    }

    if(!Array.isArray(target)){
        throw 'The target is not an array.';
    }

    target.push(value);

    var events = [
        [target, target.length-1, value],
        [target, 'length', target.length]
    ];

    emit(events);
};
Enti.insert = function(model, key, value, index){
    if(!model || typeof model !== 'object'){
        return;
    }


    var target;
    if(arguments.length < 4){
        index = value;
        value = key;
        key = '.';
        target = model;
    }else{
        var path = leftAndRest(key);
        if(Array.isArray(path)){
            return Enti.insert(model[path[0]], path[1], value, index);
        }

        target = model[key];
    }

    if(!Array.isArray(target)){
        throw 'The target is not an array.';
    }

    target.splice(index, 0, value);

    var events = [
        [target, index, value],
        [target, 'length', target.length]
    ];

    emit(events);
};
Enti.remove = function(model, key, subKey){
    if(!model || typeof model !== 'object'){
        return;
    }

    var path = leftAndRest(key);
    if(Array.isArray(path)){
        return Enti.remove(model[path[0]], path[1], subKey);
    }

    // Remove a key off of an object at 'key'
    if(subKey != null){
        Enti.remove(model[key], subKey);
        return;
    }

    if(key === '.'){
        throw '. (self) is not a valid key to remove';
    }

    var events = [];

    if(Array.isArray(model)){
        model.splice(key, 1);
        events.push([model, 'length', model.length]);
    }else{
        delete model[key];
        events.push([model, key]);
    }

    emit(events);
};
Enti.move = function(model, key, index){
    if(!model || typeof model !== 'object'){
        return;
    }

    var path = leftAndRest(key);
    if(Array.isArray(path)){
        return Enti.move(model[path[0]], path[1], index);
    }

    if(key === index){
        return;
    }

    if(!Array.isArray(model)){
        throw 'The model is not an array.';
    }

    var item = model[key];

    model.splice(key, 1);

    model.splice(index - (index > key ? 0 : 1), 0, item);

    emit([[model, index, item]]);
};
Enti.update = function(model, key, value){
    if(!model || typeof model !== 'object'){
        return;
    }

    var target,
        isArray = Array.isArray(value);

    if(arguments.length < 3){
        value = key;
        key = '.';
        target = model;
    }else{
        var path = leftAndRest(key);
        if(Array.isArray(path)){
            return Enti.update(model[path[0]], path[1], value);
        }

        target = model[key];

        if(target == null){
            model[key] = isArray ? [] : {};
        }
    }

    if(typeof value !== 'object'){
        throw 'The value is not an object.';
    }

    if(typeof target !== 'object'){
        throw 'The target is not an object.';
    }

    var events = [],
        updatedObjects = new WeakSet();

    function updateTarget(target, value){
        for(var key in value){
            var currentValue = target[key];
            if(currentValue instanceof Object && !updatedObjects.has(currentValue) && !(currentValue instanceof Date)){
                updatedObjects.add(currentValue);
                updateTarget(currentValue, value[key]);
                continue;
            }
            target[key] = value[key];
            events.push([target, key, value[key]]);
        }

        if(Array.isArray(target)){
            events.push([target, 'length', target.length]);
        }
    }

    updateTarget(target, value);

    emit(events);
};
Enti.prototype = Object.create(EventEmitter.prototype);
Enti.prototype._maxListeners = 100;
Enti.prototype.constructor = Enti;
Enti.prototype.attach = function(model){
    if(this._model !== model){
        this.detach();
    }

    modifiedEnties.add(this);
    this._attached = true;
    this._model = model;
    this.emit('attach', model);
};
Enti.prototype.detach = function(){
    modifiedEnties.delete(this);

    this._emittedEvents = {};
    this._model = {};
    this._attached = false;
    this.emit('detach');
};
Enti.prototype.destroy = function(){
    this.detach();
    this._events = null;
    this.emit('destroy');
};
Enti.prototype.get = function(key){
    return Enti.get(this._model, key);
};

Enti.prototype.set = function(key, value){
    return Enti.set(this._model, key, value);
};

Enti.prototype.push = function(key, value){
    return Enti.push.apply(null, [this._model].concat(toArray(arguments)));
};

Enti.prototype.insert = function(key, value, index){
    return Enti.insert.apply(null, [this._model].concat(toArray(arguments)));
};

Enti.prototype.remove = function(key, subKey){
    return Enti.remove.apply(null, [this._model].concat(toArray(arguments)));
};

Enti.prototype.move = function(key, index){
    return Enti.move.apply(null, [this._model].concat(toArray(arguments)));
};

Enti.prototype.update = function(key, index){
    return Enti.update.apply(null, [this._model].concat(toArray(arguments)));
};
Enti.prototype.isAttached = function(){
    return this._attached;
};
Enti.prototype.attachedCount = function(){
    return modifiedEnties.size;
};

Enti.isEnti = function(target){
    return target && !!~globalState.instances.indexOf(target.constructor);
};

Enti.store = function(target, key, value){
    if(arguments.length < 2){
        return Enti.get(target, key);
    }

    Enti.set(target, key, value);
};

globalState.instances.push(Enti);

module.exports = Enti;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"events":44}],33:[function(require,module,exports){
var encode = require("./lib/encode.js"),
    decode = require("./lib/decode.js");

exports.decode = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
};

exports.decodeStrict = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
};

exports.encode = function(data, level){
	return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
};

exports.encodeXML = encode.XML;

exports.encodeHTML4 =
exports.encodeHTML5 =
exports.encodeHTML  = encode.HTML;

exports.decodeXML =
exports.decodeXMLStrict = decode.XML;

exports.decodeHTML4 =
exports.decodeHTML5 =
exports.decodeHTML = decode.HTML;

exports.decodeHTML4Strict =
exports.decodeHTML5Strict =
exports.decodeHTMLStrict = decode.HTMLStrict;

exports.escape = encode.escape;

},{"./lib/decode.js":34,"./lib/encode.js":36}],34:[function(require,module,exports){
var entityMap = require("../maps/entities.json"),
    legacyMap = require("../maps/legacy.json"),
    xmlMap    = require("../maps/xml.json"),
    decodeCodePoint = require("./decode_codepoint.js");

var decodeXMLStrict  = getStrictDecoder(xmlMap),
    decodeHTMLStrict = getStrictDecoder(entityMap);

function getStrictDecoder(map){
	var keys = Object.keys(map).join("|"),
	    replace = getReplacer(map);

	keys += "|#[xX][\\da-fA-F]+|#\\d+";

	var re = new RegExp("&(?:" + keys + ");", "g");

	return function(str){
		return String(str).replace(re, replace);
	};
}

var decodeHTML = (function(){
	var legacy = Object.keys(legacyMap)
		.sort(sorter);

	var keys = Object.keys(entityMap)
		.sort(sorter);

	for(var i = 0, j = 0; i < keys.length; i++){
		if(legacy[j] === keys[i]){
			keys[i] += ";?";
			j++;
		} else {
			keys[i] += ";";
		}
	}

	var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
	    replace = getReplacer(entityMap);

	function replacer(str){
		if(str.substr(-1) !== ";") str += ";";
		return replace(str);
	}

	//TODO consider creating a merged map
	return function(str){
		return String(str).replace(re, replacer);
	};
}());

function sorter(a, b){
	return a < b ? 1 : -1;
}

function getReplacer(map){
	return function replace(str){
		if(str.charAt(1) === "#"){
			if(str.charAt(2) === "X" || str.charAt(2) === "x"){
				return decodeCodePoint(parseInt(str.substr(3), 16));
			}
			return decodeCodePoint(parseInt(str.substr(2), 10));
		}
		return map[str.slice(1, -1)];
	};
}

module.exports = {
	XML: decodeXMLStrict,
	HTML: decodeHTML,
	HTMLStrict: decodeHTMLStrict
};
},{"../maps/entities.json":38,"../maps/legacy.json":39,"../maps/xml.json":40,"./decode_codepoint.js":35}],35:[function(require,module,exports){
var decodeMap = require("../maps/decode.json");

module.exports = decodeCodePoint;

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint){

	if((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF){
		return "\uFFFD";
	}

	if(codePoint in decodeMap){
		codePoint = decodeMap[codePoint];
	}

	var output = "";

	if(codePoint > 0xFFFF){
		codePoint -= 0x10000;
		output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
		codePoint = 0xDC00 | codePoint & 0x3FF;
	}

	output += String.fromCharCode(codePoint);
	return output;
}

},{"../maps/decode.json":37}],36:[function(require,module,exports){
var inverseXML = getInverseObj(require("../maps/xml.json")),
    xmlReplacer = getInverseReplacer(inverseXML);

exports.XML = getInverse(inverseXML, xmlReplacer);

var inverseHTML = getInverseObj(require("../maps/entities.json")),
    htmlReplacer = getInverseReplacer(inverseHTML);

exports.HTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj){
	return Object.keys(obj).sort().reduce(function(inverse, name){
		inverse[obj[name]] = "&" + name + ";";
		return inverse;
	}, {});
}

function getInverseReplacer(inverse){
	var single = [],
	    multiple = [];

	Object.keys(inverse).forEach(function(k){
		if(k.length === 1){
			single.push("\\" + k);
		} else {
			multiple.push(k);
		}
	});

	//TODO add ranges
	multiple.unshift("[" + single.join("") + "]");

	return new RegExp(multiple.join("|"), "g");
}

var re_nonASCII = /[^\0-\x7F]/g,
    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer(c){
	return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
}

function astralReplacer(c){
	// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	var high = c.charCodeAt(0);
	var low  = c.charCodeAt(1);
	var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
	return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re){
	function func(name){
		return inverse[name];
	}

	return function(data){
		return data
				.replace(re, func)
				.replace(re_astralSymbols, astralReplacer)
				.replace(re_nonASCII, singleCharReplacer);
	};
}

var re_xmlChars = getInverseReplacer(inverseXML);

function escapeXML(data){
	return data
			.replace(re_xmlChars, singleCharReplacer)
			.replace(re_astralSymbols, astralReplacer)
			.replace(re_nonASCII, singleCharReplacer);
}

exports.escape = escapeXML;

},{"../maps/entities.json":38,"../maps/xml.json":40}],37:[function(require,module,exports){
module.exports={"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}
},{}],38:[function(require,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","Acy":"\u0410","acy":"\u0430","AElig":"\u00C6","aelig":"\u00E6","af":"\u2061","Afr":"\uD835\uDD04","afr":"\uD835\uDD1E","Agrave":"\u00C0","agrave":"\u00E0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\u00C5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\uD835\uDD38","aopf":"\uD835\uDD52","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\u00C5","aring":"\u00E5","Ascr":"\uD835\uDC9C","ascr":"\uD835\uDCB6","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\uD835\uDD05","bfr":"\uD835\uDD1F","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\uD835\uDD39","bopf":"\uD835\uDD53","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\u00A6","bscr":"\uD835\uDCB7","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\u00C7","ccedil":"\u00E7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\u00B8","Cedilla":"\u00B8","cemptyv":"\u29B2","cent":"\u00A2","centerdot":"\u00B7","CenterDot":"\u00B7","cfr":"\uD835\uDD20","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\u00AE","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\uD835\uDD54","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\u00A9","COPY":"\u00A9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\uD835\uDC9E","cscr":"\uD835\uDCB8","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\u00A4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\u00B0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\uD835\uDD07","dfr":"\uD835\uDD21","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\u00B4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\u00A8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\u00F7","divide":"\u00F7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\uD835\uDD3B","dopf":"\uD835\uDD55","Dot":"\u00A8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\u00A8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\uD835\uDC9F","dscr":"\uD835\uDCB9","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\u00C9","eacute":"\u00E9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\u00CA","ecirc":"\u00EA","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\uD835\uDD08","efr":"\uD835\uDD22","eg":"\u2A9A","Egrave":"\u00C8","egrave":"\u00E8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\uD835\uDD3C","eopf":"\uD835\uDD56","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\uD835\uDD09","ffr":"\uD835\uDD23","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\uD835\uDD3D","fopf":"\uD835\uDD57","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\u00BD","frac13":"\u2153","frac14":"\u00BC","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\u00BE","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\uD835\uDCBB","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\uD835\uDD0A","gfr":"\uD835\uDD24","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\uD835\uDD3E","gopf":"\uD835\uDD58","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\uD835\uDCA2","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\u00BD","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\uD835\uDD25","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\uD835\uDD59","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\uD835\uDCBD","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\u00CD","iacute":"\u00ED","ic":"\u2063","Icirc":"\u00CE","icirc":"\u00EE","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\u00A1","iff":"\u21D4","ifr":"\uD835\uDD26","Ifr":"\u2111","Igrave":"\u00CC","igrave":"\u00EC","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\uD835\uDD40","iopf":"\uD835\uDD5A","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\u00BF","iscr":"\uD835\uDCBE","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\u00CF","iuml":"\u00EF","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\uD835\uDD0D","jfr":"\uD835\uDD27","jmath":"\u0237","Jopf":"\uD835\uDD41","jopf":"\uD835\uDD5B","Jscr":"\uD835\uDCA5","jscr":"\uD835\uDCBF","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\uD835\uDD0E","kfr":"\uD835\uDD28","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\uD835\uDD42","kopf":"\uD835\uDD5C","Kscr":"\uD835\uDCA6","kscr":"\uD835\uDCC0","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\u00AB","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\uD835\uDD0F","lfr":"\uD835\uDD29","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\uD835\uDD43","lopf":"\uD835\uDD5D","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\uD835\uDCC1","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\u00AF","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\uD835\uDD10","mfr":"\uD835\uDD2A","mho":"\u2127","micro":"\u00B5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\u00B7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\uD835\uDD44","mopf":"\uD835\uDD5E","mp":"\u2213","mscr":"\uD835\uDCC2","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\u00A0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\uD835\uDD11","nfr":"\uD835\uDD2B","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\u00A0","nopf":"\uD835\uDD5F","Nopf":"\u2115","Not":"\u2AEC","not":"\u00AC","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\uD835\uDCA9","nscr":"\uD835\uDCC3","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\u00D1","ntilde":"\u00F1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\u00D3","oacute":"\u00F3","oast":"\u229B","Ocirc":"\u00D4","ocirc":"\u00F4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\uD835\uDD12","ofr":"\uD835\uDD2C","ogon":"\u02DB","Ograve":"\u00D2","ograve":"\u00F2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\uD835\uDD46","oopf":"\uD835\uDD60","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\u00AA","ordm":"\u00BA","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\uD835\uDCAA","oscr":"\u2134","Oslash":"\u00D8","oslash":"\u00F8","osol":"\u2298","Otilde":"\u00D5","otilde":"\u00F5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\u00D6","ouml":"\u00F6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\u00B6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\uD835\uDD13","pfr":"\uD835\uDD2D","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\u00B1","plusmn":"\u00B1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\u00B1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\uD835\uDD61","Popf":"\u2119","pound":"\u00A3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\uD835\uDCAB","pscr":"\uD835\uDCC5","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\uD835\uDD14","qfr":"\uD835\uDD2E","qint":"\u2A0C","qopf":"\uD835\uDD62","Qopf":"\u211A","qprime":"\u2057","Qscr":"\uD835\uDCAC","qscr":"\uD835\uDCC6","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\"","QUOT":"\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\u00BB","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\u00AE","REG":"\u00AE","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\uD835\uDD2F","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\uD835\uDD63","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\uD835\uDCC7","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\u00A7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\uD835\uDD16","sfr":"\uD835\uDD30","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\u00AD","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\uD835\uDD4A","sopf":"\uD835\uDD64","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\uD835\uDCAE","sscr":"\uD835\uDCC8","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\u00AF","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\u00DF","Tab":"\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\uD835\uDD17","tfr":"\uD835\uDD31","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\u00DE","thorn":"\u00FE","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\u00D7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\uD835\uDD4B","topf":"\uD835\uDD65","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\uD835\uDCAF","tscr":"\uD835\uDCC9","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\u00DA","uacute":"\u00FA","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\u00DB","ucirc":"\u00FB","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\uD835\uDD18","ufr":"\uD835\uDD32","Ugrave":"\u00D9","ugrave":"\u00F9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\u00A8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\uD835\uDD4C","uopf":"\uD835\uDD66","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\uD835\uDCB0","uscr":"\uD835\uDCCA","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\u00DC","uuml":"\u00FC","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\uD835\uDD19","vfr":"\uD835\uDD33","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\uD835\uDD4D","vopf":"\uD835\uDD67","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\uD835\uDCB1","vscr":"\uD835\uDCCB","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\uD835\uDD1A","wfr":"\uD835\uDD34","Wopf":"\uD835\uDD4E","wopf":"\uD835\uDD68","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\uD835\uDCB2","wscr":"\uD835\uDCCC","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\uD835\uDD1B","xfr":"\uD835\uDD35","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\uD835\uDD4F","xopf":"\uD835\uDD69","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\uD835\uDCB3","xscr":"\uD835\uDCCD","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\u00DD","yacute":"\u00FD","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\u00A5","Yfr":"\uD835\uDD1C","yfr":"\uD835\uDD36","YIcy":"\u0407","yicy":"\u0457","Yopf":"\uD835\uDD50","yopf":"\uD835\uDD6A","Yscr":"\uD835\uDCB4","yscr":"\uD835\uDCCE","YUcy":"\u042E","yucy":"\u044E","yuml":"\u00FF","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\uD835\uDD37","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\uD835\uDD6B","Zopf":"\u2124","Zscr":"\uD835\uDCB5","zscr":"\uD835\uDCCF","zwj":"\u200D","zwnj":"\u200C"}
},{}],39:[function(require,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","AElig":"\u00C6","aelig":"\u00E6","Agrave":"\u00C0","agrave":"\u00E0","amp":"&","AMP":"&","Aring":"\u00C5","aring":"\u00E5","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","brvbar":"\u00A6","Ccedil":"\u00C7","ccedil":"\u00E7","cedil":"\u00B8","cent":"\u00A2","copy":"\u00A9","COPY":"\u00A9","curren":"\u00A4","deg":"\u00B0","divide":"\u00F7","Eacute":"\u00C9","eacute":"\u00E9","Ecirc":"\u00CA","ecirc":"\u00EA","Egrave":"\u00C8","egrave":"\u00E8","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","frac12":"\u00BD","frac14":"\u00BC","frac34":"\u00BE","gt":">","GT":">","Iacute":"\u00CD","iacute":"\u00ED","Icirc":"\u00CE","icirc":"\u00EE","iexcl":"\u00A1","Igrave":"\u00CC","igrave":"\u00EC","iquest":"\u00BF","Iuml":"\u00CF","iuml":"\u00EF","laquo":"\u00AB","lt":"<","LT":"<","macr":"\u00AF","micro":"\u00B5","middot":"\u00B7","nbsp":"\u00A0","not":"\u00AC","Ntilde":"\u00D1","ntilde":"\u00F1","Oacute":"\u00D3","oacute":"\u00F3","Ocirc":"\u00D4","ocirc":"\u00F4","Ograve":"\u00D2","ograve":"\u00F2","ordf":"\u00AA","ordm":"\u00BA","Oslash":"\u00D8","oslash":"\u00F8","Otilde":"\u00D5","otilde":"\u00F5","Ouml":"\u00D6","ouml":"\u00F6","para":"\u00B6","plusmn":"\u00B1","pound":"\u00A3","quot":"\"","QUOT":"\"","raquo":"\u00BB","reg":"\u00AE","REG":"\u00AE","sect":"\u00A7","shy":"\u00AD","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","szlig":"\u00DF","THORN":"\u00DE","thorn":"\u00FE","times":"\u00D7","Uacute":"\u00DA","uacute":"\u00FA","Ucirc":"\u00DB","ucirc":"\u00FB","Ugrave":"\u00D9","ugrave":"\u00F9","uml":"\u00A8","Uuml":"\u00DC","uuml":"\u00FC","Yacute":"\u00DD","yacute":"\u00FD","yen":"\u00A5","yuml":"\u00FF"}
},{}],40:[function(require,module,exports){
module.exports={"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""}

},{}],41:[function(require,module,exports){
var prr = require('prr')

function init (type, message, cause) {
  prr(this, {
      type    : type
    , name    : type
      // can be passed just a 'cause'
    , cause   : typeof message != 'string' ? message : cause
    , message : !!message && typeof message != 'string' ? message.message : message

  }, 'ewr')
}

// generic prototype, not intended to be actually used - helpful for `instanceof`
function CustomError (message, cause) {
  Error.call(this)
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, arguments.callee)
  init.call(this, 'CustomError', message, cause)
}

CustomError.prototype = new Error()

function createError (errno, type, proto) {
  var err = function (message, cause) {
    init.call(this, type, message, cause)
    //TODO: the specificity here is stupid, errno should be available everywhere
    if (type == 'FilesystemError') {
      this.code    = this.cause.code
      this.path    = this.cause.path
      this.errno   = this.cause.errno
      this.message =
        (errno.errno[this.cause.errno]
          ? errno.errno[this.cause.errno].description
          : this.cause.message)
        + (this.cause.path ? ' [' + this.cause.path + ']' : '')
    }
    Error.call(this)
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, arguments.callee)
  }
  err.prototype = !!proto ? new proto() : new CustomError()
  return err
}

module.exports = function (errno) {
  var ce = function (type, proto) {
    return createError(errno, type, proto)
  }
  return {
      CustomError     : CustomError
    , FilesystemError : ce('FilesystemError')
    , createError     : ce
  }
}

},{"prr":43}],42:[function(require,module,exports){
var all = module.exports.all = [
  {
    errno: -2,
    code: 'ENOENT',
    description: 'no such file or directory'
  },
  {
    errno: -1,
    code: 'UNKNOWN',
    description: 'unknown error'
  },
  {
    errno: 0,
    code: 'OK',
    description: 'success'
  },
  {
    errno: 1,
    code: 'EOF',
    description: 'end of file'
  },
  {
    errno: 2,
    code: 'EADDRINFO',
    description: 'getaddrinfo error'
  },
  {
    errno: 3,
    code: 'EACCES',
    description: 'permission denied'
  },
  {
    errno: 4,
    code: 'EAGAIN',
    description: 'resource temporarily unavailable'
  },
  {
    errno: 5,
    code: 'EADDRINUSE',
    description: 'address already in use'
  },
  {
    errno: 6,
    code: 'EADDRNOTAVAIL',
    description: 'address not available'
  },
  {
    errno: 7,
    code: 'EAFNOSUPPORT',
    description: 'address family not supported'
  },
  {
    errno: 8,
    code: 'EALREADY',
    description: 'connection already in progress'
  },
  {
    errno: 9,
    code: 'EBADF',
    description: 'bad file descriptor'
  },
  {
    errno: 10,
    code: 'EBUSY',
    description: 'resource busy or locked'
  },
  {
    errno: 11,
    code: 'ECONNABORTED',
    description: 'software caused connection abort'
  },
  {
    errno: 12,
    code: 'ECONNREFUSED',
    description: 'connection refused'
  },
  {
    errno: 13,
    code: 'ECONNRESET',
    description: 'connection reset by peer'
  },
  {
    errno: 14,
    code: 'EDESTADDRREQ',
    description: 'destination address required'
  },
  {
    errno: 15,
    code: 'EFAULT',
    description: 'bad address in system call argument'
  },
  {
    errno: 16,
    code: 'EHOSTUNREACH',
    description: 'host is unreachable'
  },
  {
    errno: 17,
    code: 'EINTR',
    description: 'interrupted system call'
  },
  {
    errno: 18,
    code: 'EINVAL',
    description: 'invalid argument'
  },
  {
    errno: 19,
    code: 'EISCONN',
    description: 'socket is already connected'
  },
  {
    errno: 20,
    code: 'EMFILE',
    description: 'too many open files'
  },
  {
    errno: 21,
    code: 'EMSGSIZE',
    description: 'message too long'
  },
  {
    errno: 22,
    code: 'ENETDOWN',
    description: 'network is down'
  },
  {
    errno: 23,
    code: 'ENETUNREACH',
    description: 'network is unreachable'
  },
  {
    errno: 24,
    code: 'ENFILE',
    description: 'file table overflow'
  },
  {
    errno: 25,
    code: 'ENOBUFS',
    description: 'no buffer space available'
  },
  {
    errno: 26,
    code: 'ENOMEM',
    description: 'not enough memory'
  },
  {
    errno: 27,
    code: 'ENOTDIR',
    description: 'not a directory'
  },
  {
    errno: 28,
    code: 'EISDIR',
    description: 'illegal operation on a directory'
  },
  {
    errno: 29,
    code: 'ENONET',
    description: 'machine is not on the network'
  },
  {
    errno: 31,
    code: 'ENOTCONN',
    description: 'socket is not connected'
  },
  {
    errno: 32,
    code: 'ENOTSOCK',
    description: 'socket operation on non-socket'
  },
  {
    errno: 33,
    code: 'ENOTSUP',
    description: 'operation not supported on socket'
  },
  {
    errno: 34,
    code: 'ENOENT',
    description: 'no such file or directory'
  },
  {
    errno: 35,
    code: 'ENOSYS',
    description: 'function not implemented'
  },
  {
    errno: 36,
    code: 'EPIPE',
    description: 'broken pipe'
  },
  {
    errno: 37,
    code: 'EPROTO',
    description: 'protocol error'
  },
  {
    errno: 38,
    code: 'EPROTONOSUPPORT',
    description: 'protocol not supported'
  },
  {
    errno: 39,
    code: 'EPROTOTYPE',
    description: 'protocol wrong type for socket'
  },
  {
    errno: 40,
    code: 'ETIMEDOUT',
    description: 'connection timed out'
  },
  {
    errno: 41,
    code: 'ECHARSET',
    description: 'invalid Unicode character'
  },
  {
    errno: 42,
    code: 'EAIFAMNOSUPPORT',
    description: 'address family for hostname not supported'
  },
  {
    errno: 44,
    code: 'EAISERVICE',
    description: 'servname not supported for ai_socktype'
  },
  {
    errno: 45,
    code: 'EAISOCKTYPE',
    description: 'ai_socktype not supported'
  },
  {
    errno: 46,
    code: 'ESHUTDOWN',
    description: 'cannot send after transport endpoint shutdown'
  },
  {
    errno: 47,
    code: 'EEXIST',
    description: 'file already exists'
  },
  {
    errno: 48,
    code: 'ESRCH',
    description: 'no such process'
  },
  {
    errno: 49,
    code: 'ENAMETOOLONG',
    description: 'name too long'
  },
  {
    errno: 50,
    code: 'EPERM',
    description: 'operation not permitted'
  },
  {
    errno: 51,
    code: 'ELOOP',
    description: 'too many symbolic links encountered'
  },
  {
    errno: 52,
    code: 'EXDEV',
    description: 'cross-device link not permitted'
  },
  {
    errno: 53,
    code: 'ENOTEMPTY',
    description: 'directory not empty'
  },
  {
    errno: 54,
    code: 'ENOSPC',
    description: 'no space left on device'
  },
  {
    errno: 55,
    code: 'EIO',
    description: 'i/o error'
  },
  {
    errno: 56,
    code: 'EROFS',
    description: 'read-only file system'
  },
  {
    errno: 57,
    code: 'ENODEV',
    description: 'no such device'
  },
  {
    errno: 58,
    code: 'ESPIPE',
    description: 'invalid seek'
  },
  {
    errno: 59,
    code: 'ECANCELED',
    description: 'operation canceled'
  }
]

module.exports.errno = {}
module.exports.code = {}

all.forEach(function (error) {
  module.exports.errno[error.errno] = error
  module.exports.code[error.code] = error
})

module.exports.custom = require('./custom')(module.exports)
module.exports.create = module.exports.custom.createError

},{"./custom":41}],43:[function(require,module,exports){
/*!
  * prr
  * (c) 2013 Rod Vagg <rod@vagg.org>
  * https://github.com/rvagg/prr
  * License: MIT
  */

(function (name, context, definition) {
  if (typeof module != 'undefined' && module.exports)
    module.exports = definition()
  else
    context[name] = definition()
})('prr', this, function() {

  var setProperty = typeof Object.defineProperty == 'function'
      ? function (obj, key, options) {
          Object.defineProperty(obj, key, options)
          return obj
        }
      : function (obj, key, options) { // < es5
          obj[key] = options.value
          return obj
        }

    , makeOptions = function (value, options) {
        var oo = typeof options == 'object'
          , os = !oo && typeof options == 'string'
          , op = function (p) {
              return oo
                ? !!options[p]
                : os
                  ? options.indexOf(p[0]) > -1
                  : false
            }

        return {
            enumerable   : op('enumerable')
          , configurable : op('configurable')
          , writable     : op('writable')
          , value        : value
        }
      }

    , prr = function (obj, key, value, options) {
        var k

        options = makeOptions(value, options)

        if (typeof key == 'object') {
          for (k in key) {
            if (Object.hasOwnProperty.call(key, k)) {
              options.value = key[k]
              setProperty(obj, k, options)
            }
          }
          return obj
        }

        return setProperty(obj, key, options)
      }

  return prr
})
},{}],44:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],45:[function(require,module,exports){
var is = require('./is'),
    GENERIC = '_generic',
    EventEmitter = require('events').EventEmitter,
    slice = Array.prototype.slice;

function flatten(item){
    return Array.isArray(item) ? item.reduce(function(result, element){
        if(element == null){
            return result;
        }
        return result.concat(flatten(element));
    },[]) : item;
}

function attachProperties(object, firm){
    for(var key in this._properties){
        this._properties[key].attach(object, firm);
    }
}

function onRender(){

    // Ensure all bindings are somewhat attached just before rendering
    this.attach(undefined, 0);

    for(var key in this._properties){
        this._properties[key].update();
    }
}

function detachProperties(firm){
    for(var key in this._properties){
        this._properties[key].detach(firm);
    }
}

function destroyProperties(){
    for(var key in this._properties){
        this._properties[key].destroy();
    }
}

function clone(){
    return this.fastn(this.component._type, this.component._settings, this.component._children.filter(function(child){
            return !child._templated;
        }).map(function(child){
            return child.clone();
        })
    );
}

function getSetBinding(newBinding){
    if(!arguments.length){
        return this.binding;
    }

    if(!is.binding(newBinding)){
        newBinding = this.fastn.binding(newBinding);
    }

    if(this.binding && this.binding !== newBinding){
        this.binding.removeListener('change', this.emitAttach);
        newBinding.attach(this.binding._model, this.binding._firm);
    }

    this.binding = newBinding;

    this.binding.on('change', this.emitAttach);
    this.binding.on('detach', this.emitDetach);

    this.emitAttach();

    return this.component;
};

function emitAttach(){
    var newBound = this.binding();
    if(newBound !== this.lastBound){
        this.lastBound = newBound;
        this.scope.attach(this.lastBound);
        this.component.emit('attach', this.scope, 1);
    }
}

function emitDetach(){
    this.component.emit('detach', 1);
}

function getScope(){
    return this.scope;
}

function destroy(){
    if(this.destroyed){
        return;
    }
    this.destroyed = true;

    this.component
        .removeAllListeners('render')
        .removeAllListeners('attach');

    this.component.emit('destroy');
    this.component.element = null;
    this.scope.destroy();
    this.binding.destroy();

    return this.component;
}

function attachComponent(object, firm){
    this.binding.attach(object, firm);
    return this.component;
}

function detachComponent(firm){
    this.binding.detach(firm);
    return this.component;
}

function isDestroyed(){
    return this.destroyed;
}

function setProperty(key, property){

    // Add a default property or use the one already there
    if(!property){
        property = this.component[key] || this.fastn.property();
    }

    this.component[key] = property;
    this.component._properties[key] = property;

    return this.component;
}

function extendComponent(type, settings, children){

    if(type in this.types){
        return this.component;
    }

    if(!(type in this.fastn.components)){

        if(!(GENERIC in this.fastn.components)){
            throw new Error('No component of type "' + type + '" is loaded');
        }

        this.fastn.components._generic(this.fastn, this.component, type, settings, children);

        this.types._generic = true;
    }else{

        this.fastn.components[type](this.fastn, this.component, type, settings, children);
    }

    this.types[type] = true;

    return this.component;
};

function isType(type){
    return type in this.types;
}

function FastnComponent(fastn, type, settings, children){
    var component = this;

    var componentScope = {
        types: {},
        fastn: fastn,
        component: component,
        binding: fastn.binding('.'),
        destroyed: false,
        scope: new fastn.Model(false),
        lastBound: null
    };

    componentScope.emitAttach = emitAttach.bind(componentScope);
    componentScope.emitDetach = emitDetach.bind(componentScope);
    componentScope.binding._default_binding = true;

    component._type = type;
    component._properties = {};
    component._settings = settings || {};
    component._children = children ? flatten(children) : [];

    component.attach = attachComponent.bind(componentScope);
    component.detach = detachComponent.bind(componentScope);
    component.scope = getScope.bind(componentScope);
    component.destroy = destroy.bind(componentScope);
    component.destroyed = isDestroyed.bind(componentScope);
    component.binding = getSetBinding.bind(componentScope);
    component.setProperty = setProperty.bind(componentScope);
    component.clone = clone.bind(componentScope);
    component.children = slice.bind(component._children);
    component.extend = extendComponent.bind(componentScope);
    component.is = isType.bind(componentScope);

    component.binding(componentScope.binding);

    component.on('attach', attachProperties.bind(this));
    component.on('render', onRender.bind(this));
    component.on('detach', detachProperties.bind(this));
    component.on('destroy', destroyProperties.bind(this));

    if(fastn.debug){
        component.on('render', function(){
            if(component.element && typeof component.element === 'object'){
                component.element._component = component;
            }
        });
    }
}
FastnComponent.prototype = Object.create(EventEmitter.prototype);
FastnComponent.prototype.constructor = FastnComponent;
FastnComponent.prototype._fastn_component = true;

module.exports = FastnComponent;
},{"./is":53,"events":44}],46:[function(require,module,exports){
var Enti = require('enti'),
    is = require('./is'),
    firmer = require('./firmer'),
    functionEmitter = require('./functionEmitter'),
    setPrototypeOf = require('setprototypeof'),
    same = require('same-value');

function fuseBinding(){
    var args = Array.prototype.slice.call(arguments);

    var bindings = args.slice(),
        transform = bindings.pop(),
        updateTransform,
        resultBinding = createBinding('result'),
        selfChanging;

    resultBinding._arguments = args;

    if(typeof bindings[bindings.length-1] === 'function' && !is.binding(bindings[bindings.length-1])){
        updateTransform = transform;
        transform = bindings.pop();
    }

    resultBinding._model.removeAllListeners();
    resultBinding._set = function(value){
        if(updateTransform){
            selfChanging = true;
            var newValue = updateTransform(value);
            if(!same(newValue, bindings[0]())){
                bindings[0](newValue);
                resultBinding._change(newValue);
            }
            selfChanging = false;
        }else{
            resultBinding._change(value);
        }
    };

    function change(){
        if(selfChanging){
            return;
        }
        resultBinding(transform.apply(null, bindings.map(function(binding){
            return binding();
        })));
    }

    bindings.forEach(function(binding, index){
        if(!is.binding(binding)){
            binding = createBinding(binding);
            bindings.splice(index,1,binding);
        }
        binding.on('change', change);
        resultBinding.on('detach', binding.detach);
    });

    var lastAttached;
    resultBinding.on('attach', function(object){
        selfChanging = true;
        bindings.forEach(function(binding){
            binding.attach(object, 1);
        });
        selfChanging = false;
        if(lastAttached !== object){
            change();
        }
        lastAttached = object;
    });

    return resultBinding;
}

function createValueBinding(){
    var valueBinding = createBinding('value');
    valueBinding.attach = function(){return valueBinding;};
    valueBinding.detach = function(){return valueBinding;};
    return valueBinding;
}

function bindingTemplate(newValue){
    if(!arguments.length){
        return this.value;
    }

    if(this.binding._fastn_binding === '.'){
        return;
    }

    this.binding._set(newValue);
    return this.binding;
}

function createBinding(path, more){

    if(more){ // used instead of arguments.length for performance
        return fuseBinding.apply(null, arguments);
    }

    if(path == null){
        return createValueBinding();
    }

    var bindingScope = {},
        binding = bindingScope.binding = bindingTemplate.bind(bindingScope),
        destroyed;

    setPrototypeOf(binding, functionEmitter);
    binding.setMaxListeners(10000);
    binding._arguments = [path];
    binding._model = new Enti(false);
    binding._fastn_binding = path;
    binding._firm = -Infinity;

    function modelAttachHandler(data){
        binding._model.attach(data);
        binding._change(binding._model.get(path));
        binding.emit('attach', data, 1);
    }

    function modelDetachHandler(){
        binding._model.detach();
    }

    binding.attach = function(object, firm){

        // If the binding is being asked to attach loosly to an object,
        // but it has already been defined as being firmly attached, do not attach.
        if(firmer(binding, firm)){
            return binding;
        }

        binding._firm = firm;

        var isEnti = Enti.isEnti(object);

        if(isEnti && bindingScope.attachedModel === object){
            return binding;
        }

        if(bindingScope.attachedModel){
            bindingScope.attachedModel.removeListener('attach', modelAttachHandler);
            bindingScope.attachedModel.removeListener('detach', modelDetachHandler);
            bindingScope.attachedModel = null;
        }

        if(isEnti){
            bindingScope.attachedModel = object;
            bindingScope.attachedModel.on('attach', modelAttachHandler);
            bindingScope.attachedModel.on('detach', modelDetachHandler);
            object = object._model;
        }

        if(!(object instanceof Object)){
            object = {};
        }

        if(binding._model._model === object){
            return binding;
        }

        modelAttachHandler(object);

        return binding;
    };

    binding.detach = function(firm){
        if(firmer(binding, firm)){
            return binding;
        }

        bindingScope.value = undefined;
        if(binding._model.isAttached()){
            binding._model.detach();
        }
        binding.emit('detach', 1);
        return binding;
    };
    binding._set = function(newValue){
        if(same(binding._model.get(path), newValue)){
            return;
        }
        if(!binding._model.isAttached()){
            binding._model.attach(binding._model.get('.'));
        }
        binding._model.set(path, newValue);
    };
    binding._change = function(newValue){
        bindingScope.value = newValue;
        binding.emit('change', binding());
    };
    binding.clone = function(keepAttachment){
        var newBinding = createBinding.apply(null, binding._arguments);

        if(keepAttachment){
            newBinding.attach(bindingScope.attachedModel || binding._model._model, binding._firm);
        }

        return newBinding;
    };
    binding.destroy = function(soft){
        if(destroyed){
            return;
        }
        if(soft && binding.listeners('change').length){
            return;
        }
        destroyed = true;
        binding.emit('destroy');
        binding.detach();
        binding._model.destroy();
    };

    binding.destroyed = function(){
        return destroyed;
    };

    if(path !== '.'){
        binding._model.on(path, binding._change);
    }

    return binding;
}

function from(valueOrBinding){
    if(is.binding(valueOrBinding)){
        return valueOrBinding;
    }

    return createBinding()(valueOrBinding);
}

createBinding.from = from;

module.exports = createBinding;
},{"./firmer":49,"./functionEmitter":50,"./is":53,"enti":32,"same-value":103,"setprototypeof":105}],47:[function(require,module,exports){
function insertChild(fastn, container, child, index){
    if(child == null || child === false){
        return;
    }

    var currentIndex = container._children.indexOf(child),
        newComponent = fastn.toComponent(child);

    if(newComponent !== child && ~currentIndex){
        container._children.splice(currentIndex, 1, newComponent);
    }

    if(!~currentIndex || newComponent !== child){
        newComponent.attach(container.scope(), 1);
    }

    if(currentIndex !== index){
        if(~currentIndex){
            container._children.splice(currentIndex, 1);
        }
        container._children.splice(index, 0, newComponent);
    }

    if(container.element){
        if(!newComponent.element){
            newComponent.render();
        }
        container._insert(newComponent.element, index);
        newComponent.emit('insert', container);
        container.emit('childInsert', newComponent);
    }
}

function getContainerElement(){
    return this.containerElement || this.element;
}

function insert(child, index){
    var childComponent = child,
        container = this.container,
        fastn = this.fastn;

    if(index && typeof index === 'object'){
        childComponent = Array.prototype.slice.call(arguments);
    }

    if(isNaN(index)){
        index = container._children.length;
    }

    if(Array.isArray(childComponent)){
        for (var i = 0; i < childComponent.length; i++) {
            container.insert(childComponent[i], i + index);
        }
    }else{
        insertChild(fastn, container, childComponent, index);
    }

    return container;
}

module.exports = function(fastn, component, type, settings, children){
    component.insert = insert.bind({
        container: component,
        fastn: fastn
    });

    component._insert = function(element, index){
        var containerElement = component.getContainerElement();
        if(!containerElement){
            return;
        }

        if(containerElement.childNodes[index] === element){
            return;
        }

        containerElement.insertBefore(element, containerElement.childNodes[index]);
    };

    component.remove = function(childComponent){
        var index = component._children.indexOf(childComponent);
        if(~index){
            component._children.splice(index,1);
        }

        childComponent.detach(1);

        if(childComponent.element){
            component._remove(childComponent.element);
            childComponent.emit('remove', component);
        }
        component.emit('childRemove', childComponent);
    };

    component._remove = function(element){
        var containerElement = component.getContainerElement();

        if(!element || !containerElement || element.parentNode !== containerElement){
            return;
        }

        containerElement.removeChild(element);
    };

    component.empty = function(){
        while(component._children.length){
            component.remove(component._children.pop());
        }
    };

    component.replaceChild = function(oldChild, newChild){
        var index = component._children.indexOf(oldChild);

        if(!~index){
            return;
        }

        component.remove(oldChild);
        component.insert(newChild, index);
    };

    component.getContainerElement = getContainerElement.bind(component);

    component.on('render', component.insert.bind(null, component._children, 0));

    component.on('attach', function(model, firm){
        for(var i = 0; i < component._children.length; i++){
            if(fastn.isComponent(component._children[i])){
                component._children[i].attach(model, firm);
            }
        }
    });

    component.on('destroy', function(data, firm){
        for(var i = 0; i < component._children.length; i++){
            if(fastn.isComponent(component._children[i])){
                component._children[i].destroy(firm);
            }
        }
    });

    return component;
};
},{}],48:[function(require,module,exports){
var setify = require('setify'),
    classist = require('classist');

function updateTextProperty(generic, element, value){
    if(arguments.length === 2){
        return element.textContent;
    }
    element.textContent = (value == null ? '' : value);

    var inputType = element.type;

    if(element.nodeName === 'INPUT' && inputType === 'date'){
        if(arguments.length === 2){
            return element.value ? new Date(element.value.replace(/-/g,'/').replace('T',' ')) : null;
        }

        value = value != null ? new Date(value) : null;

        if(!value || isNaN(value)){
            element.value = null;
        }else{
            element.value = [
                value.getFullYear(),
                ('0' + (value.getMonth() + 1)).slice(-2),
                ('0' + value.getDate()).slice(-2)
            ].join('-');
        }
        return;
    }

    if(value === undefined){
        value = null;
    }

    setify(element, value);
}

module.exports = {
    class: function(generic, element, value){
        if(!generic._classist){
            generic._classist = classist(element);
        }

        if(arguments.length < 3){
            return generic._classist();
        }

        generic._classist(value);
    },
    display: function(generic, element, value){
        if(arguments.length === 2){
            return element.style.display !== 'none';
        }
        element.style.display = value ? null : 'none';
    },
    disabled: function(generic, element, value){
        if(arguments.length === 2){
            return element.hasAttribute('disabled');
        }
        if(value){
            element.setAttribute('disabled', 'disabled');
        }else{
            element.removeAttribute('disabled');
        }
    },
    textContent: updateTextProperty,
    innerText: updateTextProperty,
    innerHTML: function(generic, element, value){
        if(arguments.length === 2){
            return element.innerHTML;
        }
        element.innerHTML = (value == null ? '' : value);
    },
    value: function(generic, element, value){
        var inputType = element.type;

        if(element.nodeName === 'INPUT' && inputType === 'date'){
            if(arguments.length === 2){
                return element.value ? new Date(element.value.replace(/-/g,'/').replace('T',' ')) : null;
            }

            value = value != null ? new Date(value) : null;

            if(!value || isNaN(value)){
                element.value = null;
            }else{
                element.value = [
                    value.getFullYear(),
                    ('0' + (value.getMonth() + 1)).slice(-2),
                    ('0' + value.getDate()).slice(-2)
                ].join('-');
            }
            return;
        }

        if(arguments.length === 2){
            return element.value;
        }
        if(value === undefined){
            value = null;
        }

        if(element.nodeName === 'PROGRESS'){
            value = parseFloat(value) || 0;
        }

        setify(element, value);
    },
    max: function(generic, element, value) {
        if(arguments.length === 2){
            return element.value;
        }

        if(element.nodeName === 'PROGRESS'){
            value = parseFloat(value) || 0;
        }

        element.max = value;
    },
    style: function(generic, element, value){
        if(arguments.length === 2){
            return element.style;
        }

        for(var key in value){
            element.style[key] = value[key];
        }
    },
    type: function(generic, element, value){
        if(arguments.length === 2){
            return element.type;
        }
        element.setAttribute('type', value);
    }
};
},{"classist":10,"setify":104}],49:[function(require,module,exports){
// Is the entity firmer than the new firmness
module.exports = function(entity, firm){
    if(firm != null && (entity._firm === undefined || firm < entity._firm)){
        return true;
    }
};
},{}],50:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter,
    functionEmitterPrototype = function(){};

for(var key in EventEmitter.prototype){
    functionEmitterPrototype[key] = EventEmitter.prototype[key];
}

module.exports = functionEmitterPrototype;
},{"events":44}],51:[function(require,module,exports){
var containerComponent = require('./containerComponent'),
    schedule = require('./schedule'),
    fancyProps = require('./fancyProps'),
    matchDomHandlerName = /^((?:el\.)?)([^. ]+)(?:\.(capture))?$/,
    GENERIC = '_generic';

function createProperties(fastn, component, settings){
    for(var key in settings){
        var setting = settings[key];

        if(typeof setting === 'function' && !fastn.isProperty(setting) && !fastn.isBinding(setting)){
            continue;
        }

        component.addDomProperty(key);
    }
}

function addDomHandler(component, element, handlerName, eventName, capture){
    var eventParts = handlerName.split('.');

    if(eventParts[0] === 'on'){
        eventParts.shift();
    }

    var handler = function(event){
            component.emit(handlerName, event, component.scope());
        };

    element.addEventListener(eventName, handler, capture);

    component.on('destroy', function(){
        element.removeEventListener(eventName, handler, capture);
    });
}

function addDomHandlers(component, element, eventNames){
    var events = eventNames.split(' ');

    for(var i = 0; i < events.length; i++){
        var eventName = events[i],
            match = eventName.match(matchDomHandlerName);

        if(!match){
            continue;
        }

        if(match[1] || 'on' + match[2] in element){
            addDomHandler(component, element, eventNames, match[2], match[3]);
        }
    }
}

function addAutoHandler(component, element, key, settings){
    if(!settings[key]){
        return;
    }

    var autoEvent = settings[key].split(':'),
        eventName = key.slice(2);

    delete settings[key];

    var handler = function(event){
        var fancyProp = fancyProps[autoEvent[1]],
            value = fancyProp ? fancyProp(component, element) : element[autoEvent[1]];

        component[autoEvent[0]](value);
    };

    element.addEventListener(eventName, handler);

    component.on('destroy', function(){
        element.removeEventListener(eventName, handler);
    });
}

function addDomProperty(fastn, key, property){
    var component = this;

    property = property || component[key] || fastn.property();
    component.setProperty(key, property);

    function update(){
        var element = component.getPropertyElement(key),
            value = property();

        if(!element || component.destroyed()){
            return;
        }

        var isProperty = key in element,
            fancyProp = fancyProps[key],
            previous = fancyProp ? fancyProp(component, element) : isProperty ? element[key] : element.getAttribute(key);

        if(!fancyProp && !isProperty && value == null){
            value = '';
        }

        if(value !== previous){
            if(fancyProp){
                fancyProp(component, element, value);
                return;
            }

            if(isProperty){
                element[key] = value;
                return;
            }

            if(typeof value !== 'function' && typeof value !== 'object'){
                element.setAttribute(key, value);
            }
        }
    }

    property.updater(update);
}

function onRender(){
    var component = this,
        element;

    for(var key in component._settings){
        element = component.getEventElement(key);
        if(key.slice(0,2) === 'on' && key in element){
            addAutoHandler(component, element, key, component._settings);
        }
    }

    for(var eventKey in component._events){
        element = component.getEventElement(key);
        addDomHandlers(component, element, eventKey);
    }
}

function render(){
    this.element = this.createElement(this._settings.tagName || this._tagName);

    this.emit('render');

    return this;
};

function genericComponent(fastn, component, type, settings, children){
    if(component.is(type)){
        return component;
    }

    if(type === GENERIC){
        component._tagName = component._tagName || 'div';
    }else{
        component._tagName = type;
    }

    if(component.is(GENERIC)){
        return component;
    }

    component.extend('_container', settings, children);

    component.addDomProperty = addDomProperty.bind(component, fastn);
    component.getEventElement = component.getContainerElement;
    component.getPropertyElement = component.getContainerElement;
    component.updateProperty = genericComponent.updateProperty;
    component.createElement = genericComponent.createElement;

    createProperties(fastn, component, settings);

    component.render = render.bind(component);

    component.on('render', onRender);

    return component;
}

genericComponent.updateProperty = function(component, property, update){
    if(typeof document !== 'undefined' && document.contains(component.element)){
        schedule(property, update);
    }else{
        update();
    }
};

genericComponent.createElement = function(tagName){
    if(tagName instanceof Node){
        return tagName;
    }
    return document.createElement(tagName);
};

module.exports = genericComponent;
},{"./containerComponent":47,"./fancyProps":48,"./schedule":56}],52:[function(require,module,exports){
var createProperty = require('./property'),
    createBinding = require('./binding'),
    BaseComponent = require('./baseComponent'),
    crel = require('crel'),
    Enti = require('enti'),
    objectAssign = require('object-assign'),
    is = require('./is');

function inflateProperties(component, settings){
    for(var key in settings){
        var setting = settings[key],
            property = component[key];

        if(is.property(settings[key])){

            if(is.property(property)){
                property.destroy();
            }

            setting.addTo(component, key);

        }else if(is.property(property)){

            if(is.binding(setting)){
                property.binding(setting);
            }else{
                property(setting);
            }

            property.addTo(component, key);
        }
    }
}

function validateExpectedComponents(components, componentName, expectedComponents){
    expectedComponents = expectedComponents.filter(function(componentName){
        return !(componentName in components);
    });

    if(expectedComponents.length){
        console.warn([
            'fastn("' + componentName + '") uses some components that have not been registered with fastn',
            'Expected conponent constructors: ' + expectedComponents.join(', ')
        ].join('\n\n'));
    }
}

module.exports = function(components, debug){

    if(!components || typeof components !== 'object'){
        throw new Error('fastn must be initialised with a components object');
    }

    components._container = components._container || require('./containerComponent');

    function fastn(type){

        var args = [];
        for(var i = 0; i < arguments.length; i++){
            args[i] = arguments[i];
        }

        var settings = args[1],
            childrenIndex = 2,
            settingsChild = fastn.toComponent(args[1]);

        if(Array.isArray(args[1]) || settingsChild || !args[1]){
            args[1] = settingsChild || args[1];
            childrenIndex--;
            settings = null;
        }

        settings = objectAssign({}, settings || {});

        var types = typeof type === 'string' ? type.split(':') : Array.isArray(type) ? type : [type],
            baseType,
            children = args.slice(childrenIndex),
            component = fastn.base(type, settings, children);

        while(baseType = types.shift()){
            component.extend(baseType, settings, children);
        }

        component._properties = {};

        inflateProperties(component, settings);

        return component;
    }

    fastn.toComponent = function(component){
        if(component == null){
            return;
        }
        if(is.component(component)){
            return component;
        }
        if(typeof component !== 'object' || component instanceof Date){
            return fastn('text', {auto: true}, component);
        }
        if(crel.isElement(component)){
            return fastn(component);
        }
        if(crel.isNode(component)){
            return fastn('text', {auto: true}, component.textContent);
        }
    };

    fastn.debug = debug;
    fastn.property = createProperty;
    fastn.binding = createBinding;
    fastn.isComponent = is.component;
    fastn.isBinding = is.binding;
    fastn.isDefaultBinding = is.defaultBinding;
    fastn.isBindingObject = is.bindingObject;
    fastn.isProperty = is.property;
    fastn.components = components;
    fastn.Model = Enti;

    fastn.base = function(type, settings, children){
        return new BaseComponent(fastn, type, settings, children);
    };

    for(var key in components){
        var componentConstructor = components[key];

        if(componentConstructor.expectedComponents){
            validateExpectedComponents(components, key, componentConstructor.expectedComponents);
        }
    }

    return fastn;
};
},{"./baseComponent":45,"./binding":46,"./containerComponent":47,"./is":53,"./property":55,"crel":14,"enti":32,"object-assign":90}],53:[function(require,module,exports){
var FUNCTION = 'function',
    OBJECT = 'object',
    FASTNBINDING = '_fastn_binding',
    FASTNPROPERTY = '_fastn_property',
    FASTNCOMPONENT = '_fastn_component',
    DEFAULTBINDING = '_default_binding';

function isComponent(thing){
    return thing && typeof thing === OBJECT && FASTNCOMPONENT in thing;
}

function isBindingObject(thing){
    return thing && typeof thing === OBJECT && FASTNBINDING in thing;
}

function isBinding(thing){
    return typeof thing === FUNCTION && FASTNBINDING in thing;
}

function isProperty(thing){
    return typeof thing === FUNCTION && FASTNPROPERTY in thing;
}

function isDefaultBinding(thing){
    return typeof thing === FUNCTION && FASTNBINDING in thing && DEFAULTBINDING in thing;
}

module.exports = {
    component: isComponent,
    bindingObject: isBindingObject,
    binding: isBinding,
    defaultBinding: isDefaultBinding,
    property: isProperty
};
},{}],54:[function(require,module,exports){
var MultiMap = require('multimap'),
    merge = require('flat-merge');

MultiMap.Map = Map;

function each(value, fn){
    if(!value || typeof value !== 'object'){
        return;
    }

    if(Array.isArray(value)){
        for(var i = 0; i < value.length; i++){
            fn(value[i], i)
        }
    }else{
        for(var key in value){
            fn(value[key], key);
        }
    }
}

function keyFor(object, value){
    if(!object || typeof object !== 'object'){
        return false;
    }

    if(Array.isArray(object)){
        var index = object.indexOf(value);
        return index >=0 ? index : false;
    }

    for(var key in object){
        if(object[key] === value){
            return key;
        }
    }

    return false;
}

module.exports = function(fastn, component, type, settings, children){

    if(fastn.components._generic){
        component.extend('_generic', settings, children);
    }else{
        component.extend('_container', settings, children);
    }

    if(!('template' in settings)){
        console.warn('No "template" function was set for this templater component');
    }

    var itemsMap = new MultiMap(),
        dataMap = new WeakMap(),
        lastTemplate,
        existingItem = {};

    function updateItems(){
        var value = component.items(),
            template = component.template(),
            emptyTemplate = component.emptyTemplate(),
            newTemplate = lastTemplate !== template;

        var currentItems = merge(template ? value : []);

        itemsMap.forEach(function(childComponent, item){
            var currentKey = keyFor(currentItems, item);

            if(!newTemplate && currentKey !== false){
                currentItems[currentKey] = [existingItem, item, childComponent];
            }else{
                removeComponent(childComponent);
                itemsMap.delete(item);
            }
        });

        var index = 0;

        function updateItem(item, key){
            var child,
                existing;

            while(index < component._children.length && !component._children[index]._templated){
                index++;
            }

            if(Array.isArray(item) && item[0] === existingItem){
                existing = true;
                child = item[2];
                item = item[1];
            }

            var childModel;

            if(!existing){
                childModel = new fastn.Model({
                    item: item,
                    key: key
                });

                child = fastn.toComponent(template(childModel, component.scope()));
                if(!child){
                    child = fastn('template');
                }
                child._listItem = item;
                child._templated = true;

                dataMap.set(child, childModel);
                itemsMap.set(item, child);
            }else{
                childModel = dataMap.get(child);
                childModel.set('key', key);
            }

            if(fastn.isComponent(child) && component._settings.attachTemplates !== false){
                child.attach(childModel, 2);
            }

            component.insert(child, index);
            index++;
        }

        each(currentItems, updateItem);

        lastTemplate = template;

        if(index === 0 && emptyTemplate){
            var child = fastn.toComponent(emptyTemplate(component.scope()));
            if(!child){
                child = fastn('template');
            }
            child._templated = true;

            itemsMap.set({}, child);

            component.insert(child);
        }
    }

    function removeComponent(childComponent){
        component.remove(childComponent);
        childComponent.destroy();
    }

    component.setProperty('items',
        fastn.property([], settings.itemChanges || 'type keys shallowStructure')
            .on('change', updateItems)
    );

    component.setProperty('template',
        fastn.property().on('change', updateItems)
    );

    component.setProperty('emptyTemplate',
        fastn.property().on('change', updateItems)
    );

    return component;
};
},{"flat-merge":59,"multimap":88}],55:[function(require,module,exports){
var Enti = require('enti'),
    WhatChanged = require('what-changed'),
    same = require('same-value'),
    firmer = require('./firmer'),
    createBinding = require('./binding'),
    functionEmitter = require('./functionEmitter'),
    setPrototypeOf = require('setprototypeof'),
    is = require('./is');

var propertyProto = Object.create(functionEmitter);

propertyProto._fastn_property = true;
propertyProto._firm = 1;

function propertyTemplate(value){
    if(!arguments.length){
        return this.binding && this.binding() || this.property._value;
    }

    if(!this.destroyed){
        if(this.binding){
            this.binding(value);
            return this.property;
        }

        this.valueUpdate(value);
    }

    return this.property;
}

function changeChecker(current, changes){
    if(changes){
        var changes = new WhatChanged(current, changes);

        return function(value){
            return Object.keys(changes.update(value)).length > 0;
        };
    }else{
        var lastValue = current;
        return function(newValue){
            if(!same(lastValue, newValue)){
                lastValue = newValue;
                return true;
            }
        };
    }
}


function propertyBinding(newBinding){
    if(!arguments.length){
        return this.binding;
    }

    if(!is.binding(newBinding)){
        newBinding = createBinding(newBinding);
    }

    if(newBinding === this.binding){
        return this.property;
    }

    if(this.binding){
        this.binding.removeListener('change', this.valueUpdate);
    }

    this.binding = newBinding;

    if(this.model){
        this.property.attach(this.model, this.property._firm);
    }

    this.binding.on('change', this.valueUpdate);
    this.valueUpdate(this.binding());

    return this.property;
};

function attachProperty(object, firm){
    if(firmer(this.property, firm)){
        return this.property;
    }

    this.property._firm = firm;

    if(!(object instanceof Object)){
        object = {};
    }

    if(this.binding){
        this.model = object;
        this.binding.attach(object, 1);
    }

    if(this.property._events && 'attach' in this.property._events){
        this.property.emit('attach', object, 1);
    }

    return this.property;
};

function detachProperty(firm){
    if(firmer(this.property, firm)){
        return this.property;
    }

    if(this.binding){
        this.binding.removeListener('change', this.valueUpdate);
        this.binding.detach(1);
        this.model = null;
    }

    if(this.property._events && 'detach' in this.property._events){
        this.property.emit('detach', 1);
    }

    return this.property;
};

function updateProperty(){
    if(!this.destroyed){

        if(this.property._update){
            this.property._update(this.property._value, this.property);
        }

        this.property.emit('update', this.property._value);
    }
    return this.property;
};

function propertyUpdater(fn){
    if(!arguments.length){
        return this.property._update;
    }
    this.property._update = fn;
    return this.property;
};

function destroyProperty(){
    if(!this.destroyed){
        this.destroyed = true;

        this.property
            .removeAllListeners('change')
            .removeAllListeners('update')
            .removeAllListeners('attach');

        this.property.emit('destroy');
        this.property.detach();
        if(this.binding){
            this.binding.destroy(true);
        }
    }
    return this.property;
};

function propertyDestroyed(){
    return this.destroyed;
};

function addPropertyTo(component, key){
    component.setProperty(key, this.property);

    return this.property;
};

function createProperty(currentValue, changes, updater){
    if(typeof changes === 'function'){
        updater = changes;
        changes = null;
    }

    var propertyScope =
        property = propertyTemplate.bind(propertyScope)
        propertyScope = {
        hasChanged: changeChecker(currentValue, changes),
        valueUpdate: function(value){
            property._value = value;
            if(!propertyScope.hasChanged(value)){
                return;
            }
            property.emit('change', property._value);
            property.update();
        }
    };

    var property = propertyScope.property = propertyTemplate.bind(propertyScope);

    property._value = currentValue;
    property._update = updater;

    setPrototypeOf(property, propertyProto);

    property.binding = propertyBinding.bind(propertyScope);
    property.attach = attachProperty.bind(propertyScope);
    property.detach = detachProperty.bind(propertyScope);
    property.update = updateProperty.bind(propertyScope);
    property.updater = propertyUpdater.bind(propertyScope);
    property.destroy = destroyProperty.bind(propertyScope);
    property.destroyed = propertyDestroyed.bind(propertyScope);
    property.addTo = addPropertyTo.bind(propertyScope);

    return property;
};

module.exports = createProperty;
},{"./binding":46,"./firmer":49,"./functionEmitter":50,"./is":53,"enti":32,"same-value":103,"setprototypeof":105,"what-changed":125}],56:[function(require,module,exports){
var todo = [],
    todoKeys = [],
    scheduled,
    updates = 0;

function run(){
    var startTime = Date.now();

    while(todo.length && Date.now() - startTime < 16){
        todoKeys.shift();
        todo.shift()();
    }

    if(todo.length){
        requestAnimationFrame(run);
    }else{
        scheduled = false;
    }
}

function schedule(key, fn){
    if(~todoKeys.indexOf(key)){
        return;
    }

    todo.push(fn);
    todoKeys.push(key);

    if(!scheduled){
        scheduled = true;
        requestAnimationFrame(run);
    }
}

module.exports = schedule;
},{}],57:[function(require,module,exports){
module.exports = function(fastn, component, type, settings, children){
    var itemModel = new fastn.Model({});

    if(!('template' in settings)){
        console.warn('No "template" function was set for this templater component');
    }

    function replaceElement(element){
        if(component.element && component.element.parentNode){
            component.element.parentNode.replaceChild(element, component.element);
        }
        component.element = element;
    }

    function update(){

        var value = component.data(),
            template = component.template();

        itemModel.set('item', value);

        var newComponent;

        if(template){
           newComponent = fastn.toComponent(template(itemModel, component.scope(), component._currentComponent));
        }

        if(component._currentComponent && component._currentComponent !== newComponent){
            if(fastn.isComponent(component._currentComponent)){
                component._currentComponent.destroy();
            }
        }

        component._currentComponent = newComponent;

        if(!newComponent){
            replaceElement(component.emptyElement);
            return;
        }

        if(fastn.isComponent(newComponent)){
            if(component._settings.attachTemplates !== false){
                newComponent.attach(itemModel, 2);
            }else{
                newComponent.attach(component.scope(), 1);
            }

            if(component.element && component.element !== newComponent.element){
                if(newComponent.element == null){
                    newComponent.render();
                }
                replaceElement(component._currentComponent.element);
            }
        }
    }

    component.render = function(){
        var element;
        component.emptyElement = document.createTextNode('');
        if(component._currentComponent){
            component._currentComponent.render();
            element = component._currentComponent.element;
        }
        component.element = element || component.emptyElement;
        component.emit('render');
    };

    component.setProperty('data',
        fastn.property(undefined, settings.dataChanges || 'value structure')
            .on('change', update)
    );

    component.setProperty('template',
        fastn.property(undefined, 'value reference')
            .on('change', update)
    );

    component.on('destroy', function(){
        if(fastn.isComponent(component._currentComponent)){
            component._currentComponent.destroy();
        }
    });

    component.on('attach', function(data){
        if(fastn.isComponent(component._currentComponent)){
            component._currentComponent.attach(component.scope(), 1);
        }
    });

    return component;
};
},{}],58:[function(require,module,exports){
function updateText(){
    if(!this.element){
        return;
    }

    var value = this.text();

    this.element.textContent = (value == null ? '' : value);
}

function autoRender(content){
    this.element = document.createTextNode(content);
}

function autoText(text, fastn, content) {
    text.render = autoRender.bind(text, content);

    return text;
}

function render(){
    this.element = this.createTextNode(this.text());
    this.emit('render');
};

function textComponent(fastn, component, type, settings, children){
    if(settings.auto){
        delete settings.auto;
        if(!fastn.isBinding(children[0])){
            return autoText(component, fastn, children[0]);
        }
        settings.text = children.pop();
    }

    component.createTextNode = textComponent.createTextNode;
    component.render = render.bind(component);

    component.setProperty('text', fastn.property('', updateText.bind(component)));

    return component;
}

textComponent.createTextNode = function(text){
    return document.createTextNode(text);
};

module.exports = textComponent;
},{}],59:[function(require,module,exports){
function flatMerge(a,b){
    if(!b || typeof b !== 'object'){
        b = {};
    }

    if(!a || typeof a !== 'object'){
        a = new b.constructor();
    }

    var result = new a.constructor(),
        aKeys = Object.keys(a),
        bKeys = Object.keys(b);

    for(var i = 0; i < aKeys.length; i++){
        result[aKeys[i]] = a[aKeys[i]];
    }

    for(var i = 0; i < bKeys.length; i++){
        result[bKeys[i]] = b[bKeys[i]];
    }

    return result;
}

module.exports = flatMerge;
},{}],60:[function(require,module,exports){
/*global window:false, self:false, define:false, module:false */

/**
 * @license IDBWrapper - A cross-browser wrapper for IndexedDB
 * Version 1.6.2
 * Copyright (c) 2011 - 2016 Jens Arps
 * http://jensarps.de/
 *
 * Licensed under the MIT (X11) license
 */

(function (name, definition, global) {

  'use strict';

  if (typeof define === 'function') {
    define(definition);
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = definition();
  } else {
    global[name] = definition();
  }
})('IDBStore', function () {

  'use strict';

  var defaultErrorHandler = function (error) {
    throw error;
  };
  var defaultSuccessHandler = function () {};

  var defaults = {
    storeName: 'Store',
    storePrefix: 'IDBWrapper-',
    dbVersion: 1,
    keyPath: 'id',
    autoIncrement: true,
    onStoreReady: function () {
    },
    onError: defaultErrorHandler,
    indexes: [],
    implementationPreference: [
      'indexedDB',
      'webkitIndexedDB',
      'mozIndexedDB',
      'shimIndexedDB'
    ]
  };

  /**
   *
   * The IDBStore constructor
   *
   * @constructor
   * @name IDBStore
   * @version 1.6.2
   *
   * @param {Object} [kwArgs] An options object used to configure the store and
   *  set callbacks
   * @param {String} [kwArgs.storeName='Store'] The name of the store
   * @param {String} [kwArgs.storePrefix='IDBWrapper-'] A prefix that is
   *  internally used to construct the name of the database, which will be
   *  kwArgs.storePrefix + kwArgs.storeName
   * @param {Number} [kwArgs.dbVersion=1] The version of the store
   * @param {String} [kwArgs.keyPath='id'] The key path to use. If you want to
   *  setup IDBWrapper to work with out-of-line keys, you need to set this to
   *  `null`
   * @param {Boolean} [kwArgs.autoIncrement=true] If set to true, IDBStore will
   *  automatically make sure a unique keyPath value is present on each object
   *  that is stored.
   * @param {Function} [kwArgs.onStoreReady] A callback to be called when the
   *  store is ready to be used.
   * @param {Function} [kwArgs.onError=throw] A callback to be called when an
   *  error occurred during instantiation of the store.
   * @param {Array} [kwArgs.indexes=[]] An array of indexData objects
   *  defining the indexes to use with the store. For every index to be used
   *  one indexData object needs to be passed in the array.
   *  An indexData object is defined as follows:
   * @param {Object} [kwArgs.indexes.indexData] An object defining the index to
   *  use
   * @param {String} kwArgs.indexes.indexData.name The name of the index
   * @param {String} [kwArgs.indexes.indexData.keyPath] The key path of the index
   * @param {Boolean} [kwArgs.indexes.indexData.unique] Whether the index is unique
   * @param {Boolean} [kwArgs.indexes.indexData.multiEntry] Whether the index is multi entry
   * @param {Array} [kwArgs.implementationPreference=['indexedDB','webkitIndexedDB','mozIndexedDB','shimIndexedDB']] An array of strings naming implementations to be used, in order or preference
   * @param {Function} [onStoreReady] A callback to be called when the store
   * is ready to be used.
   * @example
      // create a store for customers with an additional index over the
      // `lastname` property.
      var myCustomerStore = new IDBStore({
        dbVersion: 1,
        storeName: 'customer-index',
        keyPath: 'customerid',
        autoIncrement: true,
        onStoreReady: populateTable,
        indexes: [
          { name: 'lastname', keyPath: 'lastname', unique: false, multiEntry: false }
        ]
      });
   * @example
      // create a generic store
      var myCustomerStore = new IDBStore({
        storeName: 'my-data-store',
        onStoreReady: function(){
          // start working with the store.
        }
      });
   */
  var IDBStore = function (kwArgs, onStoreReady) {

    if (typeof onStoreReady == 'undefined' && typeof kwArgs == 'function') {
      onStoreReady = kwArgs;
    }
    if (Object.prototype.toString.call(kwArgs) != '[object Object]') {
      kwArgs = {};
    }

    for (var key in defaults) {
      this[key] = typeof kwArgs[key] != 'undefined' ? kwArgs[key] : defaults[key];
    }

    this.dbName = this.storePrefix + this.storeName;
    this.dbVersion = parseInt(this.dbVersion, 10) || 1;

    onStoreReady && (this.onStoreReady = onStoreReady);

    var env = typeof window == 'object' ? window : self;
    var availableImplementations = this.implementationPreference.filter(function (implName) {
      return implName in env;
    });
    this.implementation = availableImplementations[0];
    this.idb = env[this.implementation];
    this.keyRange = env.IDBKeyRange || env.webkitIDBKeyRange || env.mozIDBKeyRange;

    this.consts = {
      'READ_ONLY':         'readonly',
      'READ_WRITE':        'readwrite',
      'VERSION_CHANGE':    'versionchange',
      'NEXT':              'next',
      'NEXT_NO_DUPLICATE': 'nextunique',
      'PREV':              'prev',
      'PREV_NO_DUPLICATE': 'prevunique'
    };

    this.openDB();
  };

  /** @lends IDBStore.prototype */
  var proto = {

    /**
     * A pointer to the IDBStore ctor
     *
     * @private
     * @type {Function}
     * @constructs
     */
    constructor: IDBStore,

    /**
     * The version of IDBStore
     *
     * @type {String}
     */
    version: '1.6.2',

    /**
     * A reference to the IndexedDB object
     *
     * @type {Object}
     */
    db: null,

    /**
     * The full name of the IndexedDB used by IDBStore, composed of
     * this.storePrefix + this.storeName
     *
     * @type {String}
     */
    dbName: null,

    /**
     * The version of the IndexedDB used by IDBStore
     *
     * @type {Number}
     */
    dbVersion: null,

    /**
     * A reference to the objectStore used by IDBStore
     *
     * @type {Object}
     */
    store: null,

    /**
     * The store name
     *
     * @type {String}
     */
    storeName: null,

    /**
     * The prefix to prepend to the store name
     *
     * @type {String}
     */
    storePrefix: null,

    /**
     * The key path
     *
     * @type {String}
     */
    keyPath: null,

    /**
     * Whether IDBStore uses autoIncrement
     *
     * @type {Boolean}
     */
    autoIncrement: null,

    /**
     * The indexes used by IDBStore
     *
     * @type {Array}
     */
    indexes: null,

    /**
     * The implemantations to try to use, in order of preference
     *
     * @type {Array}
     */
    implementationPreference: null,

    /**
     * The actual implementation being used
     *
     * @type {String}
     */
    implementation: '',

    /**
     * The callback to be called when the store is ready to be used
     *
     * @type {Function}
     */
    onStoreReady: null,

    /**
     * The callback to be called if an error occurred during instantiation
     * of the store
     *
     * @type {Function}
     */
    onError: null,

    /**
     * The internal insertID counter
     *
     * @type {Number}
     * @private
     */
    _insertIdCount: 0,

    /**
     * Opens an IndexedDB; called by the constructor.
     *
     * Will check if versions match and compare provided index configuration
     * with existing ones, and update indexes if necessary.
     *
     * Will call this.onStoreReady() if everything went well and the store
     * is ready to use, and this.onError() is something went wrong.
     *
     * @private
     *
     */
    openDB: function () {

      var openRequest = this.idb.open(this.dbName, this.dbVersion);
      var preventSuccessCallback = false;

      openRequest.onerror = function (error) {

        var gotVersionErr = false;
        if ('error' in error.target) {
          gotVersionErr = error.target.error.name == 'VersionError';
        } else if ('errorCode' in error.target) {
          gotVersionErr = error.target.errorCode == 12;
        }

        if (gotVersionErr) {
          this.onError(new Error('The version number provided is lower than the existing one.'));
        } else {
          this.onError(error);
        }
      }.bind(this);

      openRequest.onsuccess = function (event) {

        if (preventSuccessCallback) {
          return;
        }

        if(this.db){
          this.onStoreReady();
          return;
        }

        this.db = event.target.result;

        if(typeof this.db.version == 'string'){
          this.onError(new Error('The IndexedDB implementation in this browser is outdated. Please upgrade your browser.'));
          return;
        }

        if(!this.db.objectStoreNames.contains(this.storeName)){
          // We should never ever get here.
          // Lets notify the user anyway.
          this.onError(new Error('Object store couldn\'t be created.'));
          return;
        }

        var emptyTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);
        this.store = emptyTransaction.objectStore(this.storeName);

        // check indexes
        var existingIndexes = Array.prototype.slice.call(this.getIndexList());
        this.indexes.forEach(function(indexData){
          var indexName = indexData.name;

          if(!indexName){
            preventSuccessCallback = true;
            this.onError(new Error('Cannot create index: No index name given.'));
            return;
          }

          this.normalizeIndexData(indexData);

          if(this.hasIndex(indexName)){
            // check if it complies
            var actualIndex = this.store.index(indexName);
            var complies = this.indexComplies(actualIndex, indexData);
            if(!complies){
              preventSuccessCallback = true;
              this.onError(new Error('Cannot modify index "' + indexName + '" for current version. Please bump version number to ' + ( this.dbVersion + 1 ) + '.'));
            }

            existingIndexes.splice(existingIndexes.indexOf(indexName), 1);
          } else {
            preventSuccessCallback = true;
            this.onError(new Error('Cannot create new index "' + indexName + '" for current version. Please bump version number to ' + ( this.dbVersion + 1 ) + '.'));
          }

        }, this);

        if (existingIndexes.length) {
          preventSuccessCallback = true;
          this.onError(new Error('Cannot delete index(es) "' + existingIndexes.toString() + '" for current version. Please bump version number to ' + ( this.dbVersion + 1 ) + '.'));
        }

        preventSuccessCallback || this.onStoreReady();
      }.bind(this);

      openRequest.onupgradeneeded = function(/* IDBVersionChangeEvent */ event){

        this.db = event.target.result;

        if(this.db.objectStoreNames.contains(this.storeName)){
          this.store = event.target.transaction.objectStore(this.storeName);
        } else {
          var optionalParameters = { autoIncrement: this.autoIncrement };
          if (this.keyPath !== null) {
            optionalParameters.keyPath = this.keyPath;
          }
          this.store = this.db.createObjectStore(this.storeName, optionalParameters);
        }

        var existingIndexes = Array.prototype.slice.call(this.getIndexList());
        this.indexes.forEach(function(indexData){
          var indexName = indexData.name;

          if(!indexName){
            preventSuccessCallback = true;
            this.onError(new Error('Cannot create index: No index name given.'));
          }

          this.normalizeIndexData(indexData);

          if(this.hasIndex(indexName)){
            // check if it complies
            var actualIndex = this.store.index(indexName);
            var complies = this.indexComplies(actualIndex, indexData);
            if(!complies){
              // index differs, need to delete and re-create
              this.store.deleteIndex(indexName);
              this.store.createIndex(indexName, indexData.keyPath, { unique: indexData.unique, multiEntry: indexData.multiEntry });
            }

            existingIndexes.splice(existingIndexes.indexOf(indexName), 1);
          } else {
            this.store.createIndex(indexName, indexData.keyPath, { unique: indexData.unique, multiEntry: indexData.multiEntry });
          }

        }, this);

        if (existingIndexes.length) {
          existingIndexes.forEach(function(_indexName){
            this.store.deleteIndex(_indexName);
          }, this);
        }

      }.bind(this);
    },

    /**
     * Deletes the database used for this store if the IDB implementations
     * provides that functionality.
     *
     * @param {Function} [onSuccess] A callback that is called if deletion
     *  was successful.
     * @param {Function} [onError] A callback that is called if deletion
     *  failed.
     */
    deleteDatabase: function (onSuccess, onError) {
      if (this.idb.deleteDatabase) {
        this.db.close();
        var deleteRequest = this.idb.deleteDatabase(this.dbName);
        deleteRequest.onsuccess = onSuccess;
        deleteRequest.onerror = onError;
      } else {
        onError(new Error('Browser does not support IndexedDB deleteDatabase!'));
      }
    },

    /*********************
     * data manipulation *
     *********************/

    /**
     * Puts an object into the store. If an entry with the given id exists,
     * it will be overwritten. This method has a different signature for inline
     * keys and out-of-line keys; please see the examples below.
     *
     * @param {*} [key] The key to store. This is only needed if IDBWrapper
     *  is set to use out-of-line keys. For inline keys - the default scenario -
     *  this can be omitted.
     * @param {Object} value The data object to store.
     * @param {Function} [onSuccess] A callback that is called if insertion
     *  was successful.
     * @param {Function} [onError] A callback that is called if insertion
     *  failed.
     * @returns {IDBTransaction} The transaction used for this operation.
     * @example
        // Storing an object, using inline keys (the default scenario):
        var myCustomer = {
          customerid: 2346223,
          lastname: 'Doe',
          firstname: 'John'
        };
        myCustomerStore.put(myCustomer, mySuccessHandler, myErrorHandler);
        // Note that passing success- and error-handlers is optional.
     * @example
        // Storing an object, using out-of-line keys:
       var myCustomer = {
         lastname: 'Doe',
         firstname: 'John'
       };
       myCustomerStore.put(2346223, myCustomer, mySuccessHandler, myErrorHandler);
      // Note that passing success- and error-handlers is optional.
     */
    put: function (key, value, onSuccess, onError) {
      if (this.keyPath !== null) {
        onError = onSuccess;
        onSuccess = value;
        value = key;
      }
      onError || (onError = defaultErrorHandler);
      onSuccess || (onSuccess = defaultSuccessHandler);

      var hasSuccess = false,
          result = null,
          putRequest;

      var putTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);
      putTransaction.oncomplete = function () {
        var callback = hasSuccess ? onSuccess : onError;
        callback(result);
      };
      putTransaction.onabort = onError;
      putTransaction.onerror = onError;

      if (this.keyPath !== null) { // in-line keys
        this._addIdPropertyIfNeeded(value);
        putRequest = putTransaction.objectStore(this.storeName).put(value);
      } else { // out-of-line keys
        putRequest = putTransaction.objectStore(this.storeName).put(value, key);
      }
      putRequest.onsuccess = function (event) {
        hasSuccess = true;
        result = event.target.result;
      };
      putRequest.onerror = onError;

      return putTransaction;
    },

    /**
     * Retrieves an object from the store. If no entry exists with the given id,
     * the success handler will be called with null as first and only argument.
     *
     * @param {*} key The id of the object to fetch.
     * @param {Function} [onSuccess] A callback that is called if fetching
     *  was successful. Will receive the object as only argument.
     * @param {Function} [onError] A callback that will be called if an error
     *  occurred during the operation.
     * @returns {IDBTransaction} The transaction used for this operation.
     */
    get: function (key, onSuccess, onError) {
      onError || (onError = defaultErrorHandler);
      onSuccess || (onSuccess = defaultSuccessHandler);

      var hasSuccess = false,
          result = null;
      
      var getTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);
      getTransaction.oncomplete = function () {
        var callback = hasSuccess ? onSuccess : onError;
        callback(result);
      };
      getTransaction.onabort = onError;
      getTransaction.onerror = onError;
      var getRequest = getTransaction.objectStore(this.storeName).get(key);
      getRequest.onsuccess = function (event) {
        hasSuccess = true;
        result = event.target.result;
      };
      getRequest.onerror = onError;

      return getTransaction;
    },

    /**
     * Removes an object from the store.
     *
     * @param {*} key The id of the object to remove.
     * @param {Function} [onSuccess] A callback that is called if the removal
     *  was successful.
     * @param {Function} [onError] A callback that will be called if an error
     *  occurred during the operation.
     * @returns {IDBTransaction} The transaction used for this operation.
     */
    remove: function (key, onSuccess, onError) {
      onError || (onError = defaultErrorHandler);
      onSuccess || (onSuccess = defaultSuccessHandler);

      var hasSuccess = false,
          result = null;

      var removeTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);
      removeTransaction.oncomplete = function () {
        var callback = hasSuccess ? onSuccess : onError;
        callback(result);
      };
      removeTransaction.onabort = onError;
      removeTransaction.onerror = onError;

      var deleteRequest = removeTransaction.objectStore(this.storeName)['delete'](key);
      deleteRequest.onsuccess = function (event) {
        hasSuccess = true;
        result = event.target.result;
      };
      deleteRequest.onerror = onError;

      return removeTransaction;
    },

    /**
     * Runs a batch of put and/or remove operations on the store.
     *
     * @param {Array} dataArray An array of objects containing the operation to run
     *  and the data object (for put operations).
     * @param {Function} [onSuccess] A callback that is called if all operations
     *  were successful.
     * @param {Function} [onError] A callback that is called if an error
     *  occurred during one of the operations.
     * @returns {IDBTransaction} The transaction used for this operation.
     */
    batch: function (dataArray, onSuccess, onError) {
      onError || (onError = defaultErrorHandler);
      onSuccess || (onSuccess = defaultSuccessHandler);

      if(Object.prototype.toString.call(dataArray) != '[object Array]'){
        onError(new Error('dataArray argument must be of type Array.'));
      } else if (dataArray.length === 0) {
        return onSuccess(true);
      }

      var count = dataArray.length;
      var called = false;
      var hasSuccess = false;

      var batchTransaction = this.db.transaction([this.storeName] , this.consts.READ_WRITE);
      batchTransaction.oncomplete = function () {
        var callback = hasSuccess ? onSuccess : onError;
        callback(hasSuccess);
      };
      batchTransaction.onabort = onError;
      batchTransaction.onerror = onError;


      var onItemSuccess = function () {
        count--;
        if (count === 0 && !called) {
          called = true;
          hasSuccess = true;
        }
      };

      dataArray.forEach(function (operation) {
        var type = operation.type;
        var key = operation.key;
        var value = operation.value;

        var onItemError = function (err) {
          batchTransaction.abort();
          if (!called) {
            called = true;
            onError(err, type, key);
          }
        };

        if (type == 'remove') {
          var deleteRequest = batchTransaction.objectStore(this.storeName)['delete'](key);
          deleteRequest.onsuccess = onItemSuccess;
          deleteRequest.onerror = onItemError;
        } else if (type == 'put') {
          var putRequest;
          if (this.keyPath !== null) { // in-line keys
            this._addIdPropertyIfNeeded(value);
            putRequest = batchTransaction.objectStore(this.storeName).put(value);
          } else { // out-of-line keys
            putRequest = batchTransaction.objectStore(this.storeName).put(value, key);
          }
          putRequest.onsuccess = onItemSuccess;
          putRequest.onerror = onItemError;
        }
      }, this);

      return batchTransaction;
    },

    /**
     * Takes an array of objects and stores them in a single transaction.
     *
     * @param {Array} dataArray An array of objects to store
     * @param {Function} [onSuccess] A callback that is called if all operations
     *  were successful.
     * @param {Function} [onError] A callback that is called if an error
     *  occurred during one of the operations.
     * @returns {IDBTransaction} The transaction used for this operation.
     */
    putBatch: function (dataArray, onSuccess, onError) {
      var batchData = dataArray.map(function(item){
        return { type: 'put', value: item };
      });

      return this.batch(batchData, onSuccess, onError);
    },

    /**
     * Like putBatch, takes an array of objects and stores them in a single
     * transaction, but allows processing of the result values.  Returns the
     * processed records containing the key for newly created records to the
     * onSuccess calllback instead of only returning true or false for success.
     * In addition, added the option for the caller to specify a key field that
     * should be set to the newly created key.
     *
     * @param {Array} dataArray An array of objects to store
     * @param {Object} [options] An object containing optional options
     * @param {String} [options.keyField=this.keyPath] Specifies a field in the record to update
     *  with the auto-incrementing key. Defaults to the store's keyPath.
     * @param {Function} [onSuccess] A callback that is called if all operations
     *  were successful.
     * @param {Function} [onError] A callback that is called if an error
     *  occurred during one of the operations.
     * @returns {IDBTransaction} The transaction used for this operation.
     *
     */
    upsertBatch: function (dataArray, options, onSuccess, onError) {
      // handle `dataArray, onSuccess, onError` signature
      if (typeof options == 'function') {
        onSuccess = options;
        onError = onSuccess;
        options = {};
      }

      onError || (onError = defaultErrorHandler);
      onSuccess || (onSuccess = defaultSuccessHandler);
      options || (options = {});

      if (Object.prototype.toString.call(dataArray) != '[object Array]') {
        onError(new Error('dataArray argument must be of type Array.'));
      }

      var keyField = options.keyField || this.keyPath;
      var count = dataArray.length;
      var called = false;
      var hasSuccess = false;
      var index = 0; // assume success callbacks are executed in order

      var batchTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);
      batchTransaction.oncomplete = function () {
        if (hasSuccess) {
          onSuccess(dataArray);
        } else {
          onError(false);
        }
      };
      batchTransaction.onabort = onError;
      batchTransaction.onerror = onError;

      var onItemSuccess = function (event) {
        var record = dataArray[index++];
        record[keyField] = event.target.result;

        count--;
        if (count === 0 && !called) {
          called = true;
          hasSuccess = true;
        }
      };

      dataArray.forEach(function (record) {
        var key = record.key;

        var onItemError = function (err) {
          batchTransaction.abort();
          if (!called) {
            called = true;
            onError(err);
          }
        };

        var putRequest;
        if (this.keyPath !== null) { // in-line keys
          this._addIdPropertyIfNeeded(record);
          putRequest = batchTransaction.objectStore(this.storeName).put(record);
        } else { // out-of-line keys
          putRequest = batchTransaction.objectStore(this.storeName).put(record, key);
        }
        putRequest.onsuccess = onItemSuccess;
        putRequest.onerror = onItemError;
      }, this);

      return batchTransaction;
    },

    /**
     * Takes an array of keys and removes matching objects in a single
     * transaction.
     *
     * @param {Array} keyArray An array of keys to remove
     * @param {Function} [onSuccess] A callback that is called if all operations
     *  were successful.
     * @param {Function} [onError] A callback that is called if an error
     *  occurred during one of the operations.
     * @returns {IDBTransaction} The transaction used for this operation.
     */
    removeBatch: function (keyArray, onSuccess, onError) {
      var batchData = keyArray.map(function(key){
        return { type: 'remove', key: key };
      });

      return this.batch(batchData, onSuccess, onError);
    },

    /**
     * Takes an array of keys and fetches matching objects
     *
     * @param {Array} keyArray An array of keys identifying the objects to fetch
     * @param {Function} [onSuccess] A callback that is called if all operations
     *  were successful.
     * @param {Function} [onError] A callback that is called if an error
     *  occurred during one of the operations.
     * @param {String} [arrayType='sparse'] The type of array to pass to the
     *  success handler. May be one of 'sparse', 'dense' or 'skip'. Defaults to
     *  'sparse'. This parameter specifies how to handle the situation if a get
     *  operation did not throw an error, but there was no matching object in
     *  the database. In most cases, 'sparse' provides the most desired
     *  behavior. See the examples for details.
     * @returns {IDBTransaction} The transaction used for this operation.
     * @example
     // given that there are two objects in the database with the keypath
     // values 1 and 2, and the call looks like this:
     myStore.getBatch([1, 5, 2], onError, function (data) { … }, arrayType);

     // this is what the `data` array will be like:

     // arrayType == 'sparse':
     // data is a sparse array containing two entries and having a length of 3:
       [Object, 2: Object]
         0: Object
         2: Object
         length: 3
         __proto__: Array[0]
     // calling forEach on data will result in the callback being called two
     // times, with the index parameter matching the index of the key in the
     // keyArray.

     // arrayType == 'dense':
     // data is a dense array containing three entries and having a length of 3,
     // where data[1] is of type undefined:
       [Object, undefined, Object]
         0: Object
         1: undefined
         2: Object
         length: 3
         __proto__: Array[0]
     // calling forEach on data will result in the callback being called three
     // times, with the index parameter matching the index of the key in the
     // keyArray, but the second call will have undefined as first argument.

     // arrayType == 'skip':
     // data is a dense array containing two entries and having a length of 2:
       [Object, Object]
         0: Object
         1: Object
         length: 2
         __proto__: Array[0]
     // calling forEach on data will result in the callback being called two
     // times, with the index parameter not matching the index of the key in the
     // keyArray.
     */
    getBatch: function (keyArray, onSuccess, onError, arrayType) {
      onError || (onError = defaultErrorHandler);
      onSuccess || (onSuccess = defaultSuccessHandler);
      arrayType || (arrayType = 'sparse');

      if (Object.prototype.toString.call(keyArray) != '[object Array]'){
        onError(new Error('keyArray argument must be of type Array.'));
      } else if (keyArray.length === 0) {
        return onSuccess([]);
      }

      var data = [];
      var count = keyArray.length;
      var called = false;
      var hasSuccess = false;
      var result = null;

      var batchTransaction = this.db.transaction([this.storeName] , this.consts.READ_ONLY);
      batchTransaction.oncomplete = function () {
        var callback = hasSuccess ? onSuccess : onError;
        callback(result);
      };
      batchTransaction.onabort = onError;
      batchTransaction.onerror = onError;

      var onItemSuccess = function (event) {
        if (event.target.result || arrayType == 'dense') {
          data.push(event.target.result);
        } else if (arrayType == 'sparse') {
          data.length++;
        }
        count--;
        if (count === 0) {
          called = true;
          hasSuccess = true;
          result = data;
        }
      };

      keyArray.forEach(function (key) {

        var onItemError = function (err) {
          called = true;
          result = err;
          onError(err);
          batchTransaction.abort();
        };

        var getRequest = batchTransaction.objectStore(this.storeName).get(key);
        getRequest.onsuccess = onItemSuccess;
        getRequest.onerror = onItemError;

      }, this);

      return batchTransaction;
    },

    /**
     * Fetches all entries in the store.
     *
     * @param {Function} [onSuccess] A callback that is called if the operation
     *  was successful. Will receive an array of objects.
     * @param {Function} [onError] A callback that will be called if an error
     *  occurred during the operation.
     * @returns {IDBTransaction} The transaction used for this operation.
     */
    getAll: function (onSuccess, onError) {
      onError || (onError = defaultErrorHandler);
      onSuccess || (onSuccess = defaultSuccessHandler);
      var getAllTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);
      var store = getAllTransaction.objectStore(this.storeName);
      if (store.getAll) {
        this._getAllNative(getAllTransaction, store, onSuccess, onError);
      } else {
        this._getAllCursor(getAllTransaction, store, onSuccess, onError);
      }

      return getAllTransaction;
    },

    /**
     * Implements getAll for IDB implementations that have a non-standard
     * getAll() method.
     *
     * @param {Object} getAllTransaction An open READ transaction.
     * @param {Object} store A reference to the store.
     * @param {Function} onSuccess A callback that will be called if the
     *  operation was successful.
     * @param {Function} onError A callback that will be called if an
     *  error occurred during the operation.
     * @private
     */
    _getAllNative: function (getAllTransaction, store, onSuccess, onError) {
      var hasSuccess = false,
          result = null;

      getAllTransaction.oncomplete = function () {
        var callback = hasSuccess ? onSuccess : onError;
        callback(result);
      };
      getAllTransaction.onabort = onError;
      getAllTransaction.onerror = onError;

      var getAllRequest = store.getAll();
      getAllRequest.onsuccess = function (event) {
        hasSuccess = true;
        result = event.target.result;
      };
      getAllRequest.onerror = onError;
    },

    /**
     * Implements getAll for IDB implementations that do not have a getAll()
     * method.
     *
     * @param {Object} getAllTransaction An open READ transaction.
     * @param {Object} store A reference to the store.
     * @param {Function} onSuccess A callback that will be called if the
     *  operation was successful.
     * @param {Function} onError A callback that will be called if an
     *  error occurred during the operation.
     * @private
     */
    _getAllCursor: function (getAllTransaction, store, onSuccess, onError) {
      var all = [],
          hasSuccess = false,
          result = null;

      getAllTransaction.oncomplete = function () {
        var callback = hasSuccess ? onSuccess : onError;
        callback(result);
      };
      getAllTransaction.onabort = onError;
      getAllTransaction.onerror = onError;

      var cursorRequest = store.openCursor();
      cursorRequest.onsuccess = function (event) {
        var cursor = event.target.result;
        if (cursor) {
          all.push(cursor.value);
          cursor['continue']();
        }
        else {
          hasSuccess = true;
          result = all;
        }
      };
      cursorRequest.onError = onError;
    },

    /**
     * Clears the store, i.e. deletes all entries in the store.
     *
     * @param {Function} [onSuccess] A callback that will be called if the
     *  operation was successful.
     * @param {Function} [onError] A callback that will be called if an
     *  error occurred during the operation.
     * @returns {IDBTransaction} The transaction used for this operation.
     */
    clear: function (onSuccess, onError) {
      onError || (onError = defaultErrorHandler);
      onSuccess || (onSuccess = defaultSuccessHandler);

      var hasSuccess = false,
          result = null;

      var clearTransaction = this.db.transaction([this.storeName], this.consts.READ_WRITE);
      clearTransaction.oncomplete = function () {
        var callback = hasSuccess ? onSuccess : onError;
        callback(result);
      };
      clearTransaction.onabort = onError;
      clearTransaction.onerror = onError;

      var clearRequest = clearTransaction.objectStore(this.storeName).clear();
      clearRequest.onsuccess = function (event) {
        hasSuccess = true;
        result = event.target.result;
      };
      clearRequest.onerror = onError;

      return clearTransaction;
    },

    /**
     * Checks if an id property needs to present on a object and adds one if
     * necessary.
     *
     * @param {Object} dataObj The data object that is about to be stored
     * @private
     */
    _addIdPropertyIfNeeded: function (dataObj) {
      if (typeof dataObj[this.keyPath] == 'undefined') {
        dataObj[this.keyPath] = this._insertIdCount++ + Date.now();
      }
    },

    /************
     * indexing *
     ************/

    /**
     * Returns a DOMStringList of index names of the store.
     *
     * @return {DOMStringList} The list of index names
     */
    getIndexList: function () {
      return this.store.indexNames;
    },

    /**
     * Checks if an index with the given name exists in the store.
     *
     * @param {String} indexName The name of the index to look for
     * @return {Boolean} Whether the store contains an index with the given name
     */
    hasIndex: function (indexName) {
      return this.store.indexNames.contains(indexName);
    },

    /**
     * Normalizes an object containing index data and assures that all
     * properties are set.
     *
     * @param {Object} indexData The index data object to normalize
     * @param {String} indexData.name The name of the index
     * @param {String} [indexData.keyPath] The key path of the index
     * @param {Boolean} [indexData.unique] Whether the index is unique
     * @param {Boolean} [indexData.multiEntry] Whether the index is multi entry
     */
    normalizeIndexData: function (indexData) {
      indexData.keyPath = indexData.keyPath || indexData.name;
      indexData.unique = !!indexData.unique;
      indexData.multiEntry = !!indexData.multiEntry;
    },

    /**
     * Checks if an actual index complies with an expected index.
     *
     * @param {Object} actual The actual index found in the store
     * @param {Object} expected An Object describing an expected index
     * @return {Boolean} Whether both index definitions are identical
     */
    indexComplies: function (actual, expected) {
      var complies = ['keyPath', 'unique', 'multiEntry'].every(function (key) {
        // IE10 returns undefined for no multiEntry
        if (key == 'multiEntry' && actual[key] === undefined && expected[key] === false) {
          return true;
        }
        // Compound keys
        if (key == 'keyPath' && Object.prototype.toString.call(expected[key]) == '[object Array]') {
          var exp = expected.keyPath;
          var act = actual.keyPath;

          // IE10 can't handle keyPath sequences and stores them as a string.
          // The index will be unusable there, but let's still return true if
          // the keyPath sequence matches.
          if (typeof act == 'string') {
            return exp.toString() == act;
          }

          // Chrome/Opera stores keyPath squences as DOMStringList, Firefox
          // as Array
          if ( ! (typeof act.contains == 'function' || typeof act.indexOf == 'function') ) {
            return false;
          }

          if (act.length !== exp.length) {
            return false;
          }

          for (var i = 0, m = exp.length; i<m; i++) {
            if ( ! ( (act.contains && act.contains(exp[i])) || act.indexOf(exp[i] !== -1) )) {
              return false;
            }
          }
          return true;
        }
        return expected[key] == actual[key];
      });
      return complies;
    },

    /**********
     * cursor *
     **********/

    /**
     * Iterates over the store using the given options and calling onItem
     * for each entry matching the options.
     *
     * @param {Function} onItem A callback to be called for each match
     * @param {Object} [options] An object defining specific options
     * @param {Object} [options.index=null] An IDBIndex to operate on
     * @param {String} [options.order=ASC] The order in which to provide the
     *  results, can be 'DESC' or 'ASC'
     * @param {Boolean} [options.autoContinue=true] Whether to automatically
     *  iterate the cursor to the next result
     * @param {Boolean} [options.filterDuplicates=false] Whether to exclude
     *  duplicate matches
     * @param {Object} [options.keyRange=null] An IDBKeyRange to use
     * @param {Boolean} [options.writeAccess=false] Whether grant write access
     *  to the store in the onItem callback
     * @param {Function} [options.onEnd=null] A callback to be called after
     *  iteration has ended
     * @param {Function} [options.onError=throw] A callback to be called
     *  if an error occurred during the operation.
     * @param {Number} [options.limit=Infinity] Limit the number of returned
     *  results to this number
     * @param {Number} [options.offset=0] Skip the provided number of results
     *  in the resultset
     * @returns {IDBTransaction} The transaction used for this operation.
     */
    iterate: function (onItem, options) {
      options = mixin({
        index: null,
        order: 'ASC',
        autoContinue: true,
        filterDuplicates: false,
        keyRange: null,
        writeAccess: false,
        onEnd: null,
        onError: defaultErrorHandler,
        limit: Infinity,
        offset: 0
      }, options || {});

      var directionType = options.order.toLowerCase() == 'desc' ? 'PREV' : 'NEXT';
      if (options.filterDuplicates) {
        directionType += '_NO_DUPLICATE';
      }

      var hasSuccess = false;
      var cursorTransaction = this.db.transaction([this.storeName], this.consts[options.writeAccess ? 'READ_WRITE' : 'READ_ONLY']);
      var cursorTarget = cursorTransaction.objectStore(this.storeName);
      if (options.index) {
        cursorTarget = cursorTarget.index(options.index);
      }
      var recordCount = 0;

      cursorTransaction.oncomplete = function () {
        if (!hasSuccess) {
          options.onError(null);
          return;
        }
        if (options.onEnd) {
          options.onEnd();
        } else {
          onItem(null);
        }
      };
      cursorTransaction.onabort = options.onError;
      cursorTransaction.onerror = options.onError;

      var cursorRequest = cursorTarget.openCursor(options.keyRange, this.consts[directionType]);
      cursorRequest.onerror = options.onError;
      cursorRequest.onsuccess = function (event) {
        var cursor = event.target.result;
        if (cursor) {
          if (options.offset) {
            cursor.advance(options.offset);
            options.offset = 0;
          } else {
            onItem(cursor.value, cursor, cursorTransaction);
            recordCount++;
            if (options.autoContinue) {
              if (recordCount + options.offset < options.limit) {
                cursor['continue']();
              } else {
                hasSuccess = true;
              }
            }
          }
        } else {
          hasSuccess = true;
        }
      };

      return cursorTransaction;
    },

    /**
     * Runs a query against the store and passes an array containing matched
     * objects to the success handler.
     *
     * @param {Function} onSuccess A callback to be called when the operation
     *  was successful.
     * @param {Object} [options] An object defining specific options
     * @param {Object} [options.index=null] An IDBIndex to operate on
     * @param {String} [options.order=ASC] The order in which to provide the
     *  results, can be 'DESC' or 'ASC'
     * @param {Boolean} [options.filterDuplicates=false] Whether to exclude
     *  duplicate matches
     * @param {Object} [options.keyRange=null] An IDBKeyRange to use
     * @param {Function} [options.onError=throw] A callback to be called
     *  if an error occurred during the operation.
     * @param {Number} [options.limit=Infinity] Limit the number of returned
     *  results to this number
     * @param {Number} [options.offset=0] Skip the provided number of results
     *  in the resultset
     * @returns {IDBTransaction} The transaction used for this operation.
     */
    query: function (onSuccess, options) {
      var result = [];
      options = options || {};
      options.autoContinue = true;
      options.writeAccess = false;
      options.onEnd = function () {
        onSuccess(result);
      };
      return this.iterate(function (item) {
        result.push(item);
      }, options);
    },

    /**
     *
     * Runs a query against the store, but only returns the number of matches
     * instead of the matches itself.
     *
     * @param {Function} onSuccess A callback to be called if the opration
     *  was successful.
     * @param {Object} [options] An object defining specific options
     * @param {Object} [options.index=null] An IDBIndex to operate on
     * @param {Object} [options.keyRange=null] An IDBKeyRange to use
     * @param {Function} [options.onError=throw] A callback to be called if an error
     *  occurred during the operation.
     * @returns {IDBTransaction} The transaction used for this operation.
     */
    count: function (onSuccess, options) {

      options = mixin({
        index: null,
        keyRange: null
      }, options || {});

      var onError = options.onError || defaultErrorHandler;

      var hasSuccess = false,
          result = null;

      var cursorTransaction = this.db.transaction([this.storeName], this.consts.READ_ONLY);
      cursorTransaction.oncomplete = function () {
        var callback = hasSuccess ? onSuccess : onError;
        callback(result);
      };
      cursorTransaction.onabort = onError;
      cursorTransaction.onerror = onError;

      var cursorTarget = cursorTransaction.objectStore(this.storeName);
      if (options.index) {
        cursorTarget = cursorTarget.index(options.index);
      }
      var countRequest = cursorTarget.count(options.keyRange);
      countRequest.onsuccess = function (evt) {
        hasSuccess = true;
        result = evt.target.result;
      };
      countRequest.onError = onError;

      return cursorTransaction;
    },

    /**************/
    /* key ranges */
    /**************/

    /**
     * Creates a key range using specified options. This key range can be
     * handed over to the count() and iterate() methods.
     *
     * Note: You must provide at least one or both of "lower" or "upper" value.
     *
     * @param {Object} options The options for the key range to create
     * @param {*} [options.lower] The lower bound
     * @param {Boolean} [options.excludeLower] Whether to exclude the lower
     *  bound passed in options.lower from the key range
     * @param {*} [options.upper] The upper bound
     * @param {Boolean} [options.excludeUpper] Whether to exclude the upper
     *  bound passed in options.upper from the key range
     * @param {*} [options.only] A single key value. Use this if you need a key
     *  range that only includes one value for a key. Providing this
     *  property invalidates all other properties.
     * @return {Object} The IDBKeyRange representing the specified options
     */
    makeKeyRange: function(options){
      /*jshint onecase:true */
      var keyRange,
          hasLower = typeof options.lower != 'undefined',
          hasUpper = typeof options.upper != 'undefined',
          isOnly = typeof options.only != 'undefined';

      switch(true){
        case isOnly:
          keyRange = this.keyRange.only(options.only);
          break;
        case hasLower && hasUpper:
          keyRange = this.keyRange.bound(options.lower, options.upper, options.excludeLower, options.excludeUpper);
          break;
        case hasLower:
          keyRange = this.keyRange.lowerBound(options.lower, options.excludeLower);
          break;
        case hasUpper:
          keyRange = this.keyRange.upperBound(options.upper, options.excludeUpper);
          break;
        default:
          throw new Error('Cannot create KeyRange. Provide one or both of "lower" or "upper" value, or an "only" value.');
      }

      return keyRange;

    }

  };

  /** helpers **/
  var empty = {};
  function mixin (target, source) {
    var name, s;
    for (name in source) {
      s = source[name];
      if (s !== empty[name] && s !== target[name]) {
        target[name] = s;
      }
    }
    return target;
  }

  IDBStore.prototype = proto;
  IDBStore.version = proto.version;

  return IDBStore;

}, this);

},{}],61:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],62:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],63:[function(require,module,exports){
/**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */

module.exports = function (obj) {
  return !!(obj != null &&
    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)
      (obj.constructor &&
      typeof obj.constructor.isBuffer === 'function' &&
      obj.constructor.isBuffer(obj))
    ))
}

},{}],64:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],65:[function(require,module,exports){
var Buffer = require('buffer').Buffer;

module.exports = isBuffer;

function isBuffer (o) {
  return Buffer.isBuffer(o)
    || /\[object (.+Array|Array.+)\]/.test(Object.prototype.toString.call(o));
}

},{"buffer":8}],66:[function(require,module,exports){
var encodings = require('./lib/encodings');

module.exports = Codec;

function Codec(opts){
  this.opts = opts || {};
  this.encodings = encodings;
}

Codec.prototype._encoding = function(encoding){
  if (typeof encoding == 'string') encoding = encodings[encoding];
  if (!encoding) encoding = encodings.id;
  return encoding;
};

Codec.prototype._keyEncoding = function(opts, batchOpts){
  return this._encoding(batchOpts && batchOpts.keyEncoding
    || opts && opts.keyEncoding
    || this.opts.keyEncoding);
};

Codec.prototype._valueEncoding = function(opts, batchOpts){
  return this._encoding(
    batchOpts && (batchOpts.valueEncoding || batchOpts.encoding)
    || opts && (opts.valueEncoding || opts.encoding)
    || (this.opts.valueEncoding || this.opts.encoding));
};

Codec.prototype.encodeKey = function(key, opts, batchOpts){
  return this._keyEncoding(opts, batchOpts).encode(key);
};

Codec.prototype.encodeValue = function(value, opts, batchOpts){
  return this._valueEncoding(opts, batchOpts).encode(value);
};

Codec.prototype.decodeKey = function(key, opts){
  return this._keyEncoding(opts).decode(key);
};

Codec.prototype.decodeValue = function(value, opts){
  return this._valueEncoding(opts).decode(value);
};

Codec.prototype.encodeBatch = function(ops, opts){
  var self = this;

  return ops.map(function(_op){
    var op = {
      type: _op.type,
      key: self.encodeKey(_op.key, opts, _op)
    };
    if (self.keyAsBuffer(opts, _op)) op.keyEncoding = 'binary';
    if (_op.prefix) op.prefix = _op.prefix;
    if ('value' in _op) {
      op.value = self.encodeValue(_op.value, opts, _op);
      if (self.valueAsBuffer(opts, _op)) op.valueEncoding = 'binary';
    }
    return op;
  });
};

var ltgtKeys = ['lt', 'gt', 'lte', 'gte', 'start', 'end'];

Codec.prototype.encodeLtgt = function(ltgt){
  var self = this;
  var ret = {};
  Object.keys(ltgt).forEach(function(key){
    ret[key] = ltgtKeys.indexOf(key) > -1
      ? self.encodeKey(ltgt[key], ltgt)
      : ltgt[key]
  });
  return ret;
};

Codec.prototype.createStreamDecoder = function(opts){
  var self = this;

  if (opts.keys && opts.values) {
    return function(key, value){
      return {
        key: self.decodeKey(key, opts),
        value: self.decodeValue(value, opts)
      };
    };
  } else if (opts.keys) {
    return function(key) {
      return self.decodeKey(key, opts);
    }; 
  } else if (opts.values) {
    return function(_, value){
      return self.decodeValue(value, opts);
    }
  } else {
    return function(){};
  }
};

Codec.prototype.keyAsBuffer = function(opts){
  return this._keyEncoding(opts).buffer;
};

Codec.prototype.valueAsBuffer = function(opts){
  return this._valueEncoding(opts).buffer;
};


},{"./lib/encodings":67}],67:[function(require,module,exports){
(function (Buffer){

exports.utf8 = exports['utf-8'] = {
  encode: function(data){
    return isBinary(data)
      ? data
      : String(data);
  },
  decode: identity,
  buffer: false,
  type: 'utf8'
};

exports.json = {
  encode: JSON.stringify,
  decode: JSON.parse,
  buffer: false,
  type: 'json'
};

exports.binary = {
  encode: function(data){
    return isBinary(data)
      ? data
      : new Buffer(data);      
  },
  decode: identity,
  buffer: true,
  type: 'binary'
};

exports.id = {
  encode: function(data){
    return data;
  },
  decode: function(data){
    return data;
  },
  buffer: false,
  type: 'id'
};

var bufferEncodings = [
  'hex',
  'ascii',
  'base64',
  'ucs2',
  'ucs-2',
  'utf16le',
  'utf-16le'
];

bufferEncodings.forEach(function(type){
  exports[type] = {
    encode: function(data){
      return isBinary(data)
        ? data
        : new Buffer(data, type);
    },
    decode: function(buffer){
      return buffer.toString(type);
    },
    buffer: true,
    type: type
  };
});

function identity(value){
  return value;
}

function isBinary(data){
  return data === undefined
    || data === null
    || Buffer.isBuffer(data);
}


}).call(this,require("buffer").Buffer)

},{"buffer":8}],68:[function(require,module,exports){
/* Copyright (c) 2012-2015 LevelUP contributors
 * See list at <https://github.com/rvagg/node-levelup#contributing>
 * MIT License
 * <https://github.com/rvagg/node-levelup/blob/master/LICENSE.md>
 */

var createError   = require('errno').create
  , LevelUPError  = createError('LevelUPError')
  , NotFoundError = createError('NotFoundError', LevelUPError)

NotFoundError.prototype.notFound = true
NotFoundError.prototype.status   = 404

module.exports = {
    LevelUPError        : LevelUPError
  , InitializationError : createError('InitializationError', LevelUPError)
  , OpenError           : createError('OpenError', LevelUPError)
  , ReadError           : createError('ReadError', LevelUPError)
  , WriteError          : createError('WriteError', LevelUPError)
  , NotFoundError       : NotFoundError
  , EncodingError       : createError('EncodingError', LevelUPError)
}

},{"errno":42}],69:[function(require,module,exports){
var inherits = require('inherits');
var Readable = require('readable-stream').Readable;
var extend = require('xtend');
var EncodingError = require('level-errors').EncodingError;

module.exports = ReadStream;
inherits(ReadStream, Readable);

function ReadStream(iterator, options){
  if (!(this instanceof ReadStream)) return new ReadStream(iterator, options);
  Readable.call(this, extend(options, {
    objectMode: true
  }));
  this._iterator = iterator;
  this._destroyed = false;
  this._decoder = null;
  if (options && options.decoder) this._decoder = options.decoder;
  this.on('end', this._cleanup.bind(this));
}

ReadStream.prototype._read = function(){
  var self = this;
  if (this._destroyed) return;

  this._iterator.next(function(err, key, value){
    if (self._destroyed) return;
    if (err) return self.emit('error', err);
    if (key === undefined && value === undefined) {
      self.push(null);
    } else {
      if (!self._decoder) return self.push({ key: key, value: value });

      try {
        var value = self._decoder(key, value);
      } catch (err) {
        self.emit('error', new EncodingError(err));
        self.push(null);
        return;
      }
      self.push(value);
    }
  });
};

ReadStream.prototype.destroy =
ReadStream.prototype._cleanup = function(){
  var self = this;
  if (this._destroyed) return;
  this._destroyed = true;

  this._iterator.end(function(err){
    if (err) return self.emit('error', err);
    self.emit('close');
  });
};


},{"inherits":62,"level-errors":68,"readable-stream":100,"xtend":131}],70:[function(require,module,exports){
(function (Buffer){
module.exports = Level

var IDB = require('idb-wrapper')
var AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN
var util = require('util')
var Iterator = require('./iterator')
var isBuffer = require('isbuffer')
var xtend = require('xtend')
var toBuffer = require('typedarray-to-buffer')

function Level(location) {
  if (!(this instanceof Level)) return new Level(location)
  if (!location) throw new Error("constructor requires at least a location argument")
  this.IDBOptions = {}
  this.location = location
}

util.inherits(Level, AbstractLevelDOWN)

Level.prototype._open = function(options, callback) {
  var self = this
    
  var idbOpts = {
    storeName: this.location,
    autoIncrement: false,
    keyPath: null,
    onStoreReady: function () {
      callback && callback(null, self.idb)
    }, 
    onError: function(err) {
      callback && callback(err)
    }
  }
  
  xtend(idbOpts, options)
  this.IDBOptions = idbOpts
  this.idb = new IDB(idbOpts)
}

Level.prototype._get = function (key, options, callback) {
  this.idb.get(key, function (value) {
    if (value === undefined) {
      // 'NotFound' error, consistent with LevelDOWN API
      return callback(new Error('NotFound'))
    }
    // by default return buffers, unless explicitly told not to
    var asBuffer = true
    if (options.asBuffer === false) asBuffer = false
    if (options.raw) asBuffer = false
    if (asBuffer) {
      if (value instanceof Uint8Array) value = toBuffer(value)
      else value = new Buffer(String(value))
    }
    return callback(null, value, key)
  }, callback)
}

Level.prototype._del = function(id, options, callback) {
  this.idb.remove(id, callback, callback)
}

Level.prototype._put = function (key, value, options, callback) {
  if (value instanceof ArrayBuffer) {
    value = toBuffer(new Uint8Array(value))
  }
  var obj = this.convertEncoding(key, value, options)
  if (Buffer.isBuffer(obj.value)) {
    obj.value = new Uint8Array(value.toArrayBuffer())
  }
  this.idb.put(obj.key, obj.value, function() { callback() }, callback)
}

Level.prototype.convertEncoding = function(key, value, options) {
  if (options.raw) return {key: key, value: value}
  if (value) {
    var stringed = value.toString()
    if (stringed === 'NaN') value = 'NaN'
  }
  var valEnc = options.valueEncoding
  var obj = {key: key, value: value}
  if (value && (!valEnc || valEnc !== 'binary')) {
    if (typeof obj.value !== 'object') {
      obj.value = stringed
    }
  }
  return obj
}

Level.prototype.iterator = function (options) {
  if (typeof options !== 'object') options = {}
  return new Iterator(this.idb, options)
}

Level.prototype._batch = function (array, options, callback) {
  var op
  var i
  var k
  var copiedOp
  var currentOp
  var modified = []
  
  if (array.length === 0) return setTimeout(callback, 0)
  
  for (i = 0; i < array.length; i++) {
    copiedOp = {}
    currentOp = array[i]
    modified[i] = copiedOp
    
    var converted = this.convertEncoding(currentOp.key, currentOp.value, options)
    currentOp.key = converted.key
    currentOp.value = converted.value

    for (k in currentOp) {
      if (k === 'type' && currentOp[k] == 'del') {
        copiedOp[k] = 'remove'
      } else {
        copiedOp[k] = currentOp[k]
      }
    }
  }

  return this.idb.batch(modified, function(){ callback() }, callback)
}

Level.prototype._close = function (callback) {
  this.idb.db.close()
  callback()
}

Level.prototype._approximateSize = function (start, end, callback) {
  var err = new Error('Not implemented')
  if (callback)
    return callback(err)

  throw err
}

Level.prototype._isBuffer = function (obj) {
  return Buffer.isBuffer(obj)
}

Level.destroy = function (db, callback) {
  if (typeof db === 'object') {
    var prefix = db.IDBOptions.storePrefix || 'IDBWrapper-'
    var dbname = db.location
  } else {
    var prefix = 'IDBWrapper-'
    var dbname = db
  }
  var request = indexedDB.deleteDatabase(prefix + dbname)
  request.onsuccess = function() {
    callback()
  }
  request.onerror = function(err) {
    callback(err)
  }
}

var checkKeyValue = Level.prototype._checkKeyValue = function (obj, type) {
  if (obj === null || obj === undefined)
    return new Error(type + ' cannot be `null` or `undefined`')
  if (obj === null || obj === undefined)
    return new Error(type + ' cannot be `null` or `undefined`')
  if (isBuffer(obj) && obj.byteLength === 0)
    return new Error(type + ' cannot be an empty ArrayBuffer')
  if (String(obj) === '')
    return new Error(type + ' cannot be an empty String')
  if (obj.length === 0)
    return new Error(type + ' cannot be an empty Array')
}

}).call(this,require("buffer").Buffer)

},{"./iterator":71,"abstract-leveldown":3,"buffer":8,"idb-wrapper":60,"isbuffer":65,"typedarray-to-buffer":121,"util":124,"xtend":77}],71:[function(require,module,exports){
var util = require('util')
var AbstractIterator  = require('abstract-leveldown').AbstractIterator
var ltgt = require('ltgt')

module.exports = Iterator

function Iterator (db, options) {
  if (!options) options = {}
  this.options = options
  AbstractIterator.call(this, db)
  this._order = options.reverse ? 'DESC': 'ASC'
  this._limit = options.limit
  this._count = 0
  this._done  = false
  var lower = ltgt.lowerBound(options)
  var upper = ltgt.upperBound(options)
  try {
    this._keyRange = lower || upper ? this.db.makeKeyRange({
      lower: lower,
      upper: upper,
      excludeLower: ltgt.lowerBoundExclusive(options),
      excludeUpper: ltgt.upperBoundExclusive(options)
    }) : null
  } catch (e) {
    // The lower key is greater than the upper key.
    // IndexedDB throws an error, but we'll just return 0 results.
    this._keyRangeError = true
  }
  this.callback = null
}

util.inherits(Iterator, AbstractIterator)

Iterator.prototype.createIterator = function() {
  var self = this

  self.iterator = self.db.iterate(function () {
    self.onItem.apply(self, arguments)
  }, {
    keyRange: self._keyRange,
    autoContinue: false,
    order: self._order,
    onError: function(err) { console.log('horrible error', err) },
  })
}

// TODO the limit implementation here just ignores all reads after limit has been reached
// it should cancel the iterator instead but I don't know how
Iterator.prototype.onItem = function (value, cursor, cursorTransaction) {
  if (!cursor && this.callback) {
    this.callback()
    this.callback = false
    return
  }
  var shouldCall = true

  if (!!this._limit && this._limit > 0 && this._count++ >= this._limit)
    shouldCall = false

  if (shouldCall) this.callback(false, cursor.key, cursor.value)
  if (cursor) cursor['continue']()
}

Iterator.prototype._next = function (callback) {
  if (!callback) return new Error('next() requires a callback argument')
  if (this._keyRangeError) return callback()
  if (!this._started) {
    this.createIterator()
    this._started = true
  }
  this.callback = callback
}

},{"abstract-leveldown":3,"ltgt":82,"util":124}],72:[function(require,module,exports){
var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

var isFunction = function (fn) {
	var isFunc = (typeof fn === 'function' && !(fn instanceof RegExp)) || toString.call(fn) === '[object Function]';
	if (!isFunc && typeof window !== 'undefined') {
		isFunc = fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt;
	}
	return isFunc;
};

module.exports = function forEach(obj, fn) {
	if (!isFunction(fn)) {
		throw new TypeError('iterator must be a function');
	}
	var i, k,
		isString = typeof obj === 'string',
		l = obj.length,
		context = arguments.length > 2 ? arguments[2] : null;
	if (l === +l) {
		for (i = 0; i < l; i++) {
			if (context === null) {
				fn(isString ? obj.charAt(i) : obj[i], i, obj);
			} else {
				fn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);
			}
		}
	} else {
		for (k in obj) {
			if (hasOwn.call(obj, k)) {
				if (context === null) {
					fn(obj[k], k, obj);
				} else {
					fn.call(context, obj[k], k, obj);
				}
			}
		}
	}
};


},{}],73:[function(require,module,exports){
module.exports = Object.keys || require('./shim');


},{"./shim":75}],74:[function(require,module,exports){
var toString = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toString.call(value);
	var isArguments = str === '[object Arguments]';
	if (!isArguments) {
		isArguments = str !== '[object Array]'
			&& value !== null
			&& typeof value === 'object'
			&& typeof value.length === 'number'
			&& value.length >= 0
			&& toString.call(value.callee) === '[object Function]';
	}
	return isArguments;
};


},{}],75:[function(require,module,exports){
(function () {
	"use strict";

	// modified from https://github.com/kriskowal/es5-shim
	var has = Object.prototype.hasOwnProperty,
		toString = Object.prototype.toString,
		forEach = require('./foreach'),
		isArgs = require('./isArguments'),
		hasDontEnumBug = !({'toString': null}).propertyIsEnumerable('toString'),
		hasProtoEnumBug = (function () {}).propertyIsEnumerable('prototype'),
		dontEnums = [
			"toString",
			"toLocaleString",
			"valueOf",
			"hasOwnProperty",
			"isPrototypeOf",
			"propertyIsEnumerable",
			"constructor"
		],
		keysShim;

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object',
			isFunction = toString.call(object) === '[object Function]',
			isArguments = isArgs(object),
			theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError("Object.keys called on a non-object");
		}

		if (isArguments) {
			forEach(object, function (value) {
				theKeys.push(value);
			});
		} else {
			var name,
				skipProto = hasProtoEnumBug && isFunction;

			for (name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(name);
				}
			}
		}

		if (hasDontEnumBug) {
			var ctor = object.constructor,
				skipConstructor = ctor && ctor.prototype === object;

			forEach(dontEnums, function (dontEnum) {
				if (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {
					theKeys.push(dontEnum);
				}
			});
		}
		return theKeys;
	};

	module.exports = keysShim;
}());


},{"./foreach":72,"./isArguments":74}],76:[function(require,module,exports){
module.exports = hasKeys

function hasKeys(source) {
    return source !== null &&
        (typeof source === "object" ||
        typeof source === "function")
}

},{}],77:[function(require,module,exports){
var Keys = require("object-keys")
var hasKeys = require("./has-keys")

module.exports = extend

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        if (!hasKeys(source)) {
            continue
        }

        var keys = Keys(source)

        for (var j = 0; j < keys.length; j++) {
            var name = keys[j]
            target[name] = source[name]
        }
    }

    return target
}

},{"./has-keys":76,"object-keys":73}],78:[function(require,module,exports){
/* Copyright (c) 2012-2015 LevelUP contributors
 * See list at <https://github.com/level/levelup#contributing>
 * MIT License
 * <https://github.com/level/levelup/blob/master/LICENSE.md>
 */

var util          = require('./util')
  , WriteError    = require('level-errors').WriteError

  , getOptions    = util.getOptions
  , dispatchError = util.dispatchError

function Batch (levelup, codec) {
  this._levelup = levelup
  this._codec = codec
  this.batch = levelup.db.batch()
  this.ops = []
  this.length = 0
}

Batch.prototype.put = function (key_, value_, options) {
  options = getOptions(options)

  var key   = this._codec.encodeKey(key_, options)
    , value = this._codec.encodeValue(value_, options)

  try {
    this.batch.put(key, value)
  } catch (e) {
    throw new WriteError(e)
  }
  this.ops.push({ type : 'put', key : key, value : value })
  this.length++

  return this
}

Batch.prototype.del = function (key_, options) {
  options = getOptions(options)

  var key = this._codec.encodeKey(key_, options)

  try {
    this.batch.del(key)
  } catch (err) {
    throw new WriteError(err)
  }
  this.ops.push({ type : 'del', key : key })
  this.length++

  return this
}

Batch.prototype.clear = function () {
  try {
    this.batch.clear()
  } catch (err) {
    throw new WriteError(err)
  }

  this.ops = []
  this.length = 0
  return this
}

Batch.prototype.write = function (callback) {
  var levelup = this._levelup
    , ops     = this.ops

  try {
    this.batch.write(function (err) {
      if (err)
        return dispatchError(levelup, new WriteError(err), callback)
      levelup.emit('batch', ops)
      if (callback)
        callback()
    })
  } catch (err) {
    throw new WriteError(err)
  }
}

module.exports = Batch

},{"./util":80,"level-errors":68}],79:[function(require,module,exports){
(function (process){
/* Copyright (c) 2012-2015 LevelUP contributors
 * See list at <https://github.com/level/levelup#contributing>
 * MIT License
 * <https://github.com/level/levelup/blob/master/LICENSE.md>
 */

var EventEmitter        = require('events').EventEmitter
  , inherits            = require('util').inherits
  , deprecate           = require('util').deprecate
  , extend              = require('xtend')
  , prr                 = require('prr')
  , DeferredLevelDOWN   = require('deferred-leveldown')
  , IteratorStream      = require('level-iterator-stream')

  , errors              = require('level-errors')
  , WriteError          = errors.WriteError
  , ReadError           = errors.ReadError
  , NotFoundError       = errors.NotFoundError
  , OpenError           = errors.OpenError
  , EncodingError       = errors.EncodingError
  , InitializationError = errors.InitializationError

  , util                = require('./util')
  , Batch               = require('./batch')
  , Codec               = require('level-codec')

  , getOptions          = util.getOptions
  , defaultOptions      = util.defaultOptions
  , getLevelDOWN        = util.getLevelDOWN
  , dispatchError       = util.dispatchError
  , isDefined           = util.isDefined

function getCallback (options, callback) {
  return typeof options == 'function' ? options : callback
}

// Possible LevelUP#_status values:
//  - 'new'     - newly created, not opened or closed
//  - 'opening' - waiting for the database to be opened, post open()
//  - 'open'    - successfully opened the database, available for use
//  - 'closing' - waiting for the database to be closed, post close()
//  - 'closed'  - database has been successfully closed, should not be
//                 used except for another open() operation

function LevelUP (location, options, callback) {
  if (!(this instanceof LevelUP))
    return new LevelUP(location, options, callback)

  var error

  EventEmitter.call(this)
  this.setMaxListeners(Infinity)

  if (typeof location == 'function') {
    options = typeof options == 'object' ? options : {}
    options.db = location
    location = null
  } else if (typeof location == 'object' && typeof location.db == 'function') {
    options = location
    location = null
  }


  if (typeof options == 'function') {
    callback = options
    options  = {}
  }

  if ((!options || typeof options.db != 'function') && typeof location != 'string') {
    error = new InitializationError(
        'Must provide a location for the database')
    if (callback) {
      return process.nextTick(function () {
        callback(error)
      })
    }
    throw error
  }

  options      = getOptions(options)
  this.options = extend(defaultOptions, options)
  this._codec = new Codec(this.options)
  this._status = 'new'
  // set this.location as enumerable but not configurable or writable
  prr(this, 'location', location, 'e')

  this.open(callback)
}

inherits(LevelUP, EventEmitter)

LevelUP.prototype.open = function (callback) {
  var self = this
    , dbFactory
    , db

  if (this.isOpen()) {
    if (callback)
      process.nextTick(function () { callback(null, self) })
    return this
  }

  if (this._isOpening()) {
    return callback && this.once(
        'open'
      , function () { callback(null, self) }
    )
  }

  this.emit('opening')

  this._status = 'opening'
  this.db      = new DeferredLevelDOWN(this.location)
  dbFactory    = this.options.db || getLevelDOWN()
  db           = dbFactory(this.location)

  db.open(this.options, function (err) {
    if (err) {
      return dispatchError(self, new OpenError(err), callback)
    } else {
      self.db.setDb(db)
      self.db = db
      self._status = 'open'
      if (callback)
        callback(null, self)
      self.emit('open')
      self.emit('ready')
    }
  })
}

LevelUP.prototype.close = function (callback) {
  var self = this

  if (this.isOpen()) {
    this._status = 'closing'
    this.db.close(function () {
      self._status = 'closed'
      self.emit('closed')
      if (callback)
        callback.apply(null, arguments)
    })
    this.emit('closing')
    this.db = new DeferredLevelDOWN(this.location)
  } else if (this._status == 'closed' && callback) {
    return process.nextTick(callback)
  } else if (this._status == 'closing' && callback) {
    this.once('closed', callback)
  } else if (this._isOpening()) {
    this.once('open', function () {
      self.close(callback)
    })
  }
}

LevelUP.prototype.isOpen = function () {
  return this._status == 'open'
}

LevelUP.prototype._isOpening = function () {
  return this._status == 'opening'
}

LevelUP.prototype.isClosed = function () {
  return (/^clos/).test(this._status)
}

function maybeError(db, options, callback) {
  if (!db._isOpening() && !db.isOpen()) {
    dispatchError(
        db
      , new ReadError('Database is not open')
      , callback
    )
    return true
  }
}

function writeError (db, message, callback) {
  dispatchError(
      db
     , new WriteError(message)
     , callback
  )
}

function readError (db, message, callback) {
  dispatchError(
      db
     , new ReadError(message)
     , callback
  )
}


LevelUP.prototype.get = function (key_, options, callback) {
  var self = this
    , key

  callback = getCallback(options, callback)

  if (maybeError(this, options, callback))
    return

  if (key_ === null || key_ === undefined || 'function' !== typeof callback)
    return readError(this
      , 'get() requires key and callback arguments', callback)

  options = util.getOptions(options)
  key = this._codec.encodeKey(key_, options)

  options.asBuffer = this._codec.valueAsBuffer(options)

  this.db.get(key, options, function (err, value) {
    if (err) {
      if ((/notfound/i).test(err) || err.notFound) {
        err = new NotFoundError(
            'Key not found in database [' + key_ + ']', err)
      } else {
        err = new ReadError(err)
      }
      return dispatchError(self, err, callback)
    }
    if (callback) {
      try {
        value = self._codec.decodeValue(value, options)
      } catch (e) {
        return callback(new EncodingError(e))
      }
      callback(null, value)
    }
  })
}

LevelUP.prototype.put = function (key_, value_, options, callback) {
  var self = this
    , key
    , value

  callback = getCallback(options, callback)

  if (key_ === null || key_ === undefined)
    return writeError(this, 'put() requires a key argument', callback)

  if (maybeError(this, options, callback))
    return

  options = getOptions(options)
  key     = this._codec.encodeKey(key_, options)
  value   = this._codec.encodeValue(value_, options)

  this.db.put(key, value, options, function (err) {
    if (err) {
      return dispatchError(self, new WriteError(err), callback)
    } else {
      self.emit('put', key_, value_)
      if (callback)
        callback()
    }
  })
}

LevelUP.prototype.del = function (key_, options, callback) {
  var self = this
    , key

  callback = getCallback(options, callback)

  if (key_ === null || key_ === undefined)
    return writeError(this, 'del() requires a key argument', callback)

  if (maybeError(this, options, callback))
    return

  options = getOptions(options)
  key     = this._codec.encodeKey(key_, options)

  this.db.del(key, options, function (err) {
    if (err) {
      return dispatchError(self, new WriteError(err), callback)
    } else {
      self.emit('del', key_)
      if (callback)
        callback()
    }
  })
}

LevelUP.prototype.batch = function (arr_, options, callback) {
  var self = this
    , keyEnc
    , valueEnc
    , arr

  if (!arguments.length)
    return new Batch(this, this._codec)

  callback = getCallback(options, callback)

  if (!Array.isArray(arr_))
    return writeError(this, 'batch() requires an array argument', callback)

  if (maybeError(this, options, callback))
    return

  options  = getOptions(options)
  arr      = self._codec.encodeBatch(arr_, options)
  arr      = arr.map(function (op) {
    if (!op.type && op.key !== undefined && op.value !== undefined)
      op.type = 'put'
    return op
  })

  this.db.batch(arr, options, function (err) {
    if (err) {
      return dispatchError(self, new WriteError(err), callback)
    } else {
      self.emit('batch', arr_)
      if (callback)
        callback()
    }
  })
}

LevelUP.prototype.approximateSize = deprecate(function (start_, end_, options, callback) {   
  var self = this    
    , start    
    , end    
   
  callback = getCallback(options, callback)    
   
  options = getOptions(options)    
   
  if (start_ === null || start_ === undefined    
        || end_ === null || end_ === undefined || 'function' !== typeof callback)    
    return readError(this, 'approximateSize() requires start, end and callback arguments', callback)   
   
  start = this._codec.encodeKey(start_, options)   
  end   = this._codec.encodeKey(end_, options)   
   
  this.db.approximateSize(start, end, function (err, size) {   
    if (err) {   
      return dispatchError(self, new OpenError(err), callback)   
    } else if (callback) {   
      callback(null, size)   
    }    
  })   
}, 'db.approximateSize() is deprecated. Use db.db.approximateSize() instead')

LevelUP.prototype.readStream =
LevelUP.prototype.createReadStream = function (options) {
  options = extend( {keys: true, values: true}, this.options, options)

  options.keyEncoding   = options.keyEncoding
  options.valueEncoding = options.valueEncoding

  options = this._codec.encodeLtgt(options);
  options.keyAsBuffer   = this._codec.keyAsBuffer(options)
  options.valueAsBuffer = this._codec.valueAsBuffer(options)

  if ('number' !== typeof options.limit)
    options.limit = -1

  return new IteratorStream(this.db.iterator(options), extend(options, {
    decoder: this._codec.createStreamDecoder(options)
  }))
}

LevelUP.prototype.keyStream =
LevelUP.prototype.createKeyStream = function (options) {
  return this.createReadStream(extend(options, { keys: true, values: false }))
}

LevelUP.prototype.valueStream =
LevelUP.prototype.createValueStream = function (options) {
  return this.createReadStream(extend(options, { keys: false, values: true }))
}

LevelUP.prototype.toString = function () {
  return 'LevelUP'
}

function utilStatic (name) {
  return function (location, callback) {
    getLevelDOWN()[name](location, callback || function () {})
  }
}

module.exports         = LevelUP
module.exports.errors  = require('level-errors')
module.exports.destroy = deprecate(
    utilStatic('destroy')
  , 'levelup.destroy() is deprecated. Use leveldown.destroy() instead'
)
module.exports.repair  = deprecate(
    utilStatic('repair')
  , 'levelup.repair() is deprecated. Use leveldown.repair() instead'
)


}).call(this,require('_process'))

},{"./batch":78,"./util":80,"_process":92,"deferred-leveldown":21,"events":44,"level-codec":66,"level-errors":68,"level-iterator-stream":69,"prr":93,"util":124,"xtend":131}],80:[function(require,module,exports){
/* Copyright (c) 2012-2015 LevelUP contributors
 * See list at <https://github.com/level/levelup#contributing>
 * MIT License
 * <https://github.com/level/levelup/blob/master/LICENSE.md>
 */

var extend         = require('xtend')
  , LevelUPError   = require('level-errors').LevelUPError
  , format         = require('util').format
  , defaultOptions = {
        createIfMissing : true
      , errorIfExists   : false
      , keyEncoding     : 'utf8'
      , valueEncoding   : 'utf8'
      , compression     : true
    }

  , leveldown

function getOptions (options) {
  if (typeof options == 'string')
    options = { valueEncoding: options }
  if (typeof options != 'object')
    options = {}
  return options
}

function getLevelDOWN () {
  if (leveldown)
    return leveldown

  var requiredVersion  = require('../package.json').devDependencies.leveldown
    , leveldownVersion

  try {
    leveldownVersion = require('leveldown/package').version
  } catch (e) {
    throw requireError(e)
  }

  if (!require('semver').satisfies(leveldownVersion, requiredVersion)) {
    throw new LevelUPError(
        'Installed version of LevelDOWN ('
      + leveldownVersion
      + ') does not match required version ('
      + requiredVersion
      + ')'
    )
  }

  try {
    return leveldown = require('leveldown')
  } catch (e) {
    throw requireError(e)
  }
}

function requireError (e) {
  var template = 'Failed to require LevelDOWN (%s). Try `npm install leveldown` if it\'s missing'
  return new LevelUPError(format(template, e.message))
}

function dispatchError (db, error, callback) {
  typeof callback == 'function' ? callback(error) : db.emit('error', error)
}

function isDefined (v) {
  return typeof v !== 'undefined'
}

module.exports = {
    defaultOptions  : defaultOptions
  , getOptions      : getOptions
  , getLevelDOWN    : getLevelDOWN
  , dispatchError   : dispatchError
  , isDefined       : isDefined
}

},{"../package.json":81,"level-errors":68,"leveldown":7,"leveldown/package":7,"semver":7,"util":124,"xtend":131}],81:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "levelup@~1.3.0",
      "/Users/chr/dev/thesis/node_modules/level-packager"
    ]
  ],
  "_from": "levelup@>=1.3.0 <1.4.0",
  "_id": "levelup@1.3.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/levelup",
  "_nodeVersion": "4.2.2",
  "_npmUser": {
    "email": "ralphtheninja@riseup.net",
    "name": "ralphtheninja"
  },
  "_npmVersion": "3.5.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "levelup",
    "raw": "levelup@~1.3.0",
    "rawSpec": "~1.3.0",
    "scope": null,
    "spec": ">=1.3.0 <1.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/level-packager"
  ],
  "_resolved": "https://registry.npmjs.org/levelup/-/levelup-1.3.1.tgz",
  "_shasum": "8030758bb1b1dafdb71bfb55fff0caa2740cb846",
  "_shrinkwrap": null,
  "_spec": "levelup@~1.3.0",
  "_where": "/Users/chr/dev/thesis/node_modules/level-packager",
  "browser": {
    "leveldown": false,
    "leveldown/package": false,
    "semver": false
  },
  "bugs": {
    "url": "https://github.com/level/levelup/issues"
  },
  "contributors": [
    {
      "name": "Julian Gruber",
      "email": "julian@juliangruber.com",
      "url": "https://github.com/juliangruber"
    },
    {
      "name": "Rod Vagg",
      "email": "r@va.gg",
      "url": "https://github.com/rvagg"
    },
    {
      "name": "Jake Verbaten",
      "email": "raynos2@gmail.com",
      "url": "https://github.com/raynos"
    },
    {
      "name": "Dominic Tarr",
      "email": "dominic.tarr@gmail.com",
      "url": "https://github.com/dominictarr"
    },
    {
      "name": "Max Ogden",
      "email": "max@maxogden.com",
      "url": "https://github.com/maxogden"
    },
    {
      "name": "Lars-Magnus Skog",
      "email": "ralphtheninja@riseup.net",
      "url": "https://github.com/ralphtheninja"
    },
    {
      "name": "David Björklund",
      "email": "david.bjorklund@gmail.com",
      "url": "https://github.com/kesla"
    },
    {
      "name": "John Chesley",
      "email": "john@chesl.es",
      "url": "https://github.com/chesles/"
    },
    {
      "name": "Paolo Fragomeni",
      "email": "paolo@async.ly",
      "url": "https://github.com/hij1nx"
    },
    {
      "name": "Anton Whalley",
      "email": "anton.whalley@nearform.com",
      "url": "https://github.com/No9"
    },
    {
      "name": "Matteo Collina",
      "email": "matteo.collina@gmail.com",
      "url": "https://github.com/mcollina"
    },
    {
      "name": "Pedro Teixeira",
      "email": "pedro.teixeira@gmail.com",
      "url": "https://github.com/pgte"
    },
    {
      "name": "James Halliday",
      "email": "mail@substack.net",
      "url": "https://github.com/substack"
    },
    {
      "name": "Jarrett Cruger",
      "email": "jcrugzz@gmail.com",
      "url": "https://github.com/jcrugzz"
    }
  ],
  "dependencies": {
    "deferred-leveldown": "~1.2.1",
    "level-codec": "~6.1.0",
    "level-errors": "~1.0.3",
    "level-iterator-stream": "~1.3.0",
    "prr": "~1.0.1",
    "semver": "~5.1.0",
    "xtend": "~4.0.0"
  },
  "description": "Fast & simple storage - a Node.js-style LevelDB wrapper",
  "devDependencies": {
    "async": "~1.5.0",
    "bustermove": "~1.0.0",
    "delayed": "~1.0.1",
    "faucet": "~0.0.1",
    "leveldown": "^1.1.0",
    "memdown": "~1.1.0",
    "msgpack-js": "~0.3.0",
    "referee": "~1.2.0",
    "rimraf": "~2.4.3",
    "slow-stream": "0.0.4",
    "tap": "~2.3.1",
    "tape": "~4.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "8030758bb1b1dafdb71bfb55fff0caa2740cb846",
    "tarball": "http://registry.npmjs.org/levelup/-/levelup-1.3.1.tgz"
  },
  "gitHead": "40bd66872974140c79a74d9411b992ddffa926a4",
  "homepage": "https://github.com/level/levelup",
  "keywords": [
    "database",
    "db",
    "json",
    "leveldb",
    "storage",
    "store",
    "stream"
  ],
  "license": "MIT",
  "main": "lib/levelup.js",
  "maintainers": [
    {
      "name": "rvagg",
      "email": "rod@vagg.org"
    },
    {
      "name": "ralphtheninja",
      "email": "ralphtheninja@riseup.net"
    },
    {
      "name": "juliangruber",
      "email": "julian@juliangruber.com"
    }
  ],
  "name": "levelup",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/level/levelup.git"
  },
  "scripts": {
    "test": "tape test/*-test.js | faucet"
  },
  "version": "1.3.1"
}

},{}],82:[function(require,module,exports){
(function (Buffer){

exports.compare = function (a, b) {

  if(Buffer.isBuffer(a)) {
    var l = Math.min(a.length, b.length)
    for(var i = 0; i < l; i++) {
      var cmp = a[i] - b[i]
      if(cmp) return cmp
    }
    return a.length - b.length
  }

  return a < b ? -1 : a > b ? 1 : 0
}

function has(obj, key) {
  return Object.hasOwnProperty.call(obj, key)
}

// to be compatible with the current abstract-leveldown tests
// nullish or empty strings.
// I could use !!val but I want to permit numbers and booleans,
// if possible.

function isDef (val) {
  return val !== undefined && val !== ''
}

function has (range, name) {
  return Object.hasOwnProperty.call(range, name)
}

function hasKey(range, name) {
  return Object.hasOwnProperty.call(range, name) && name
}

var lowerBoundKey = exports.lowerBoundKey = function (range) {
    return (
       hasKey(range, 'gt')
    || hasKey(range, 'gte')
    || hasKey(range, 'min')
    || (range.reverse ? hasKey(range, 'end') : hasKey(range, 'start'))
    || undefined
    )
}

var lowerBound = exports.lowerBound = function (range) {
  var k = lowerBoundKey(range)
  return k && range[k]
}

exports.lowerBoundInclusive = function (range) {
  return has(range, 'gt') ? false : true
}

exports.upperBoundInclusive =
  function (range) {
    return has(range, 'lt') || !range.minEx ? false : true
  }

var lowerBoundExclusive = exports.lowerBoundExclusive =
  function (range) {
    return has(range, 'gt') || range.minEx ? true : false
  }

var upperBoundExclusive = exports.upperBoundExclusive =
  function (range) {
    return has(range, 'lt') ? true : false
  }

var upperBoundKey = exports.upperBoundKey = function (range) {
    return (
       hasKey(range, 'lt')
    || hasKey(range, 'lte')
    || hasKey(range, 'max')
    || (range.reverse ? hasKey(range, 'start') : hasKey(range, 'end'))
    || undefined
    )
}

var upperBound = exports.upperBound = function (range) {
  var k = upperBoundKey(range)
  return k && range[k]
}

function id (e) { return e }

exports.toLtgt = function (range, _range, map, lower, upper) {
  _range = _range || {}
  map = map || id
  var defaults = arguments.length > 3
  var lb = exports.lowerBoundKey(range)
  var ub = exports.upperBoundKey(range)
  if(lb) {
    if(lb === 'gt') _range.gt = map(range.gt, false)
    else            _range.gte = map(range[lb], false)
  }
  else if(defaults)
    _range.gte = map(lower, false)

  if(ub) {
    if(ub === 'lt') _range.lt = map(range.lt, true)
    else            _range.lte = map(range[ub], true)
  }
  else if(defaults)
    _range.lte = map(upper, true)

  if(range.reverse != null)
    _range.reverse = !!range.reverse

  //if range was used mutably
  //(in level-sublevel it's part of an options object
  //that has more properties on it.)
  if(has(_range, 'max'))   delete _range.max
  if(has(_range, 'min'))   delete _range.min
  if(has(_range, 'start')) delete _range.start
  if(has(_range, 'end'))   delete _range.end

  return _range
}

exports.contains = function (range, key, compare) {
  compare = compare || exports.compare

  var lb = lowerBound(range)
  if(isDef(lb)) {
    var cmp = compare(key, lb)
    if(cmp < 0 || (cmp === 0 && lowerBoundExclusive(range)))
      return false
  }

  var ub = upperBound(range)
  if(isDef(ub)) {
    var cmp = compare(key, ub)
    if(cmp > 0 || (cmp === 0) && upperBoundExclusive(range))
      return false
  }

  return true
}

exports.filter = function (range, compare) {
  return function (key) {
    return exports.contains(range, key, compare)
  }
}

}).call(this,{"isBuffer":require("../is-buffer/index.js")})

},{"../is-buffer/index.js":63}],83:[function(require,module,exports){
var entities = require('entities');
var times = require('whisk/times');

function createChar(x) {
  return function() {
    return x;
  }
}

function getUrl(node) {
  var href = node.href;
  if (node.title) {
    href += ' "' + node.title + '"';
  }

  return href;
}

var generators = {
  heading: function(node) {
    return times(node.level).map(createChar('#')).join('') + ' ' + node.text.map(writeNode).join(' ') + '\n\n';
  },

  paragraph: function(node) {
    return node.text.map(writeNode).join('') + '\n\n';
  },

  strong: function(node) {
    return '**' + node.text.map(writeNode).join('') + '**';
  },

  em: function(node) {
    return '_' + node.text.map(writeNode).join('') + '_';
  },

  link: function(node) {
    var href = getUrl(node);

    if (typeof node.text == 'string' || (node.text instanceof String)) {
      return '<' + href + '>';
    }

    return '[' + node.text.map(writeNode).join('') + '](' + href + ')';
  },

  image: function(node) {
    var href = getUrl(node);

    return '![' + node.text + '](' + href + ')';
  },

  list: function (node, index, ast) {
    return (function list(node, ind) {
      return node.body.map(function (item, c) {
        var charPrefix = node.ordered ? ((c+1) + '. ') : '* ';
        return '\n' + ind + charPrefix + item.text.map(function (node) {
          if (typeof node === 'string') { return node; }
          if (node.type !== 'list') { return writeNode(node); }
          return list(node, ind + '  ');
        }).join('')
      }).join('')
    })(node, '').slice(1) + ((index !== ast.length-1) ? '\n\n\n' : '');
  },

  blockquote: function(node) {
    return '> ' + node.quote.map(writeNode);
  },

  code: function(node) {
    return '```' + (node.lang || '') + '\n' + node.code + '\n' + '```' + '\n\n';
  },

  codespan: function (node) {
    return '`' + node.text + '`';
  },

  table: function(node) {
    return [
      node.header.map(writeNode),
      node.header.map(writeTableHeaderLine).join(''),
      node.body.map(writeNode).join('\n')
    ].join('\n') + '\n\n';
  },

  tablerow: function(node) {
    return '| ' + node.content.map(writeNode).join(' | ') + ' |';
  },

  tablecell: function(node) {
    return node.content.map(writeNode).join('');
  },

  html: function(node) {
    return node.html.map(writeNode).join('') + '\n';
  },
  hr: function (node, index, ast) {
    return '---' + ((index !== ast.length-1) ? '\n\n' : '');
  }
};


function writeNode(node, index, ast) {
  var handler = generators[node.type];

  if (typeof node == 'string' || (node instanceof String)) {
    return entities.decodeHTML(node);
  }

  if (typeof handler == 'function') {
    return handler(node, index, ast);
  }

  return '';
}

function writeTableHeaderLine(node) {
  return '| ' + node.content.map(function(cell) {
    var headerLen = cell.content.reduce(function(memo, item) {
      return (memo || 0) + (item.length ? item.length : 0);
    }, 0);
    var header = times(headerLen).map(createChar('-')).join('');

    switch ((cell.flags || {}).align) {
      case 'left': {
        header = ':' + header.slice(1);
        break;
      }

      case 'right': {
        header = header.slice(0, -1) + ':';
        break;
      }

      case 'center': {
        header = ':' + header.slice(1, -1) + ':';
        break;
      }
    }

    return header;
  }).join(' | ') + ' |';
}

module.exports = function(ast) {
  return ast.map(writeNode).join('');
};

},{"entities":33,"whisk/times":130}],84:[function(require,module,exports){
(function (global){
/**
 * marked - a markdown parser
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 */

;(function() {

/**
 * Block-Level Grammar
 */

var block = {
  newline: /^\n+/,
  code: /^( {4}[^\n]+\n*)+/,
  fences: noop,
  hr: /^( *[-*_]){3,} *(?:\n+|$)/,
  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
  nptable: noop,
  lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
  blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
  list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
  html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
  table: noop,
  paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
  text: /^[^\n]+/
};

block.bullet = /(?:[*+-]|\d+\.)/;
block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
block.item = replace(block.item, 'gm')
  (/bull/g, block.bullet)
  ();

block.list = replace(block.list)
  (/bull/g, block.bullet)
  ('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')
  ('def', '\\n+(?=' + block.def.source + ')')
  ();

block.blockquote = replace(block.blockquote)
  ('def', block.def)
  ();

block._tag = '(?!(?:'
  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
  + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';

block.html = replace(block.html)
  ('comment', /<!--[\s\S]*?-->/)
  ('closed', /<(tag)[\s\S]+?<\/\1>/)
  ('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
  (/tag/g, block._tag)
  ();

block.paragraph = replace(block.paragraph)
  ('hr', block.hr)
  ('heading', block.heading)
  ('lheading', block.lheading)
  ('blockquote', block.blockquote)
  ('tag', '<' + block._tag)
  ('def', block.def)
  ();

/**
 * Normal Block Grammar
 */

block.normal = merge({}, block);

/**
 * GFM Block Grammar
 */

block.gfm = merge({}, block.normal, {
  fences: /^ *(`{3,}|~{3,}) *(\S+)? *\n([\s\S]+?)\s*\1 *(?:\n+|$)/,
  paragraph: /^/
});

block.gfm.paragraph = replace(block.paragraph)
  ('(?!', '(?!'
    + block.gfm.fences.source.replace('\\1', '\\2') + '|'
    + block.list.source.replace('\\1', '\\3') + '|')
  ();

/**
 * GFM + Tables Block Grammar
 */

block.tables = merge({}, block.gfm, {
  nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
  table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
});

/**
 * Block Lexer
 */

function Lexer(options) {
  this.tokens = [];
  this.tokens.links = {};
  this.options = options || marked.defaults;
  this.rules = block.normal;

  if (this.options.gfm) {
    if (this.options.tables) {
      this.rules = block.tables;
    } else {
      this.rules = block.gfm;
    }
  }
}

/**
 * Expose Block Rules
 */

Lexer.rules = block;

/**
 * Static Lex Method
 */

Lexer.lex = function(src, options) {
  var lexer = new Lexer(options);
  return lexer.lex(src);
};

/**
 * Preprocessing
 */

Lexer.prototype.lex = function(src) {
  src = src
    .replace(/\r\n|\r/g, '\n')
    .replace(/\t/g, '    ')
    .replace(/\u00a0/g, ' ')
    .replace(/\u2424/g, '\n');

  return this.token(src, true);
};

/**
 * Lexing
 */

Lexer.prototype.token = function(src, top, bq) {
  var src = src.replace(/^ +$/gm, '')
    , next
    , loose
    , cap
    , bull
    , b
    , item
    , space
    , i
    , l;

  while (src) {
    // newline
    if (cap = this.rules.newline.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[0].length > 1) {
        this.tokens.push({
          type: 'space'
        });
      }
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      cap = cap[0].replace(/^ {4}/gm, '');
      this.tokens.push({
        type: 'code',
        text: !this.options.pedantic
          ? cap.replace(/\n+$/, '')
          : cap
      });
      continue;
    }

    // fences (gfm)
    if (cap = this.rules.fences.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'code',
        lang: cap[2],
        text: cap[3],
        fenced: true
      });
      continue;
    }

    // heading
    if (cap = this.rules.heading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[1].length,
        text: cap[2]
      });
      continue;
    }

    // table no leading pipe (gfm)
    if (top && (cap = this.rules.nptable.exec(src))) {
      src = src.substring(cap[0].length);

      item = {
        type: 'table',
        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3].replace(/\n$/, '').split('\n')
      };

      for (i = 0; i < item.align.length; i++) {
        if (/^ *-+: *$/.test(item.align[i])) {
          item.align[i] = 'right';
        } else if (/^ *:-+: *$/.test(item.align[i])) {
          item.align[i] = 'center';
        } else if (/^ *:-+ *$/.test(item.align[i])) {
          item.align[i] = 'left';
        } else {
          item.align[i] = null;
        }
      }

      for (i = 0; i < item.cells.length; i++) {
        item.cells[i] = item.cells[i].split(/ *\| */);
      }

      this.tokens.push(item);

      continue;
    }

    // lheading
    if (cap = this.rules.lheading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[2] === '=' ? 1 : 2,
        text: cap[1]
      });
      continue;
    }

    // hr
    if (cap = this.rules.hr.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'hr'
      });
      continue;
    }

    // blockquote
    if (cap = this.rules.blockquote.exec(src)) {
      src = src.substring(cap[0].length);

      this.tokens.push({
        type: 'blockquote_start'
      });

      cap = cap[0].replace(/^ *> ?/gm, '');

      // Pass `top` to keep the current
      // "toplevel" state. This is exactly
      // how markdown.pl works.
      this.token(cap, top, true);

      this.tokens.push({
        type: 'blockquote_end'
      });

      continue;
    }

    // list
    if (cap = this.rules.list.exec(src)) {
      src = src.substring(cap[0].length);
      bull = cap[2];

      this.tokens.push({
        type: 'list_start',
        ordered: bull.length > 1
      });

      // Get each top-level item.
      cap = cap[0].match(this.rules.item);

      next = false;
      l = cap.length;
      i = 0;

      for (; i < l; i++) {
        item = cap[i];

        // Remove the list item's bullet
        // so it is seen as the next token.
        space = item.length;
        item = item.replace(/^ *([*+-]|\d+\.) +/, '');

        // Outdent whatever the
        // list item contains. Hacky.
        if (~item.indexOf('\n ')) {
          space -= item.length;
          item = !this.options.pedantic
            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
            : item.replace(/^ {1,4}/gm, '');
        }

        // Determine whether the next list item belongs here.
        // Backpedal if it does not belong in this list.
        if (this.options.smartLists && i !== l - 1) {
          b = block.bullet.exec(cap[i + 1])[0];
          if (bull !== b && !(bull.length > 1 && b.length > 1)) {
            src = cap.slice(i + 1).join('\n') + src;
            i = l - 1;
          }
        }

        // Determine whether item is loose or not.
        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
        // for discount behavior.
        loose = next || /\n\n(?!\s*$)/.test(item);
        if (i !== l - 1) {
          next = item.charAt(item.length - 1) === '\n';
          if (!loose) loose = next;
        }

        this.tokens.push({
          type: loose
            ? 'loose_item_start'
            : 'list_item_start'
        });

        // Recurse.
        this.token(item, false, bq);

        this.tokens.push({
          type: 'list_item_end'
        });
      }

      this.tokens.push({
        type: 'list_end'
      });

      continue;
    }

    // html
    if (cap = this.rules.html.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: this.options.sanitize
          ? 'paragraph'
          : 'html',
        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',
        text: cap[0]
      });
      continue;
    }

    // def
    if ((!bq && top) && (cap = this.rules.def.exec(src))) {
      src = src.substring(cap[0].length);
      this.tokens.links[cap[1].toLowerCase()] = {
        href: cap[2],
        title: cap[3]
      };
      continue;
    }

    // table (gfm)
    if (top && (cap = this.rules.table.exec(src))) {
      src = src.substring(cap[0].length);

      item = {
        type: 'table',
        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
      };

      for (i = 0; i < item.align.length; i++) {
        if (/^ *-+: *$/.test(item.align[i])) {
          item.align[i] = 'right';
        } else if (/^ *:-+: *$/.test(item.align[i])) {
          item.align[i] = 'center';
        } else if (/^ *:-+ *$/.test(item.align[i])) {
          item.align[i] = 'left';
        } else {
          item.align[i] = null;
        }
      }

      for (i = 0; i < item.cells.length; i++) {
        item.cells[i] = item.cells[i]
          .replace(/^ *\| *| *\| *$/g, '')
          .split(/ *\| */);
      }

      this.tokens.push(item);

      continue;
    }

    // top-level paragraph
    if (top && (cap = this.rules.paragraph.exec(src))) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'paragraph',
        text: cap[1].charAt(cap[1].length - 1) === '\n'
          ? cap[1].slice(0, -1)
          : cap[1]
      });
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      // Top-level should never reach here.
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'text',
        text: cap[0]
      });
      continue;
    }

    if (src) {
      throw new
        Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return this.tokens;
};

/**
 * Inline-Level Grammar
 */

var inline = {
  escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
  autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
  url: noop,
  tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
  link: /^!?\[(inside)\]\(href\)/,
  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
  code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
  br: /^ {2,}\n(?!\s*$)/,
  del: noop,
  text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
};

inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;

inline.link = replace(inline.link)
  ('inside', inline._inside)
  ('href', inline._href)
  ();

inline.reflink = replace(inline.reflink)
  ('inside', inline._inside)
  ();

/**
 * Normal Inline Grammar
 */

inline.normal = merge({}, inline);

/**
 * Pedantic Inline Grammar
 */

inline.pedantic = merge({}, inline.normal, {
  strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
});

/**
 * GFM Inline Grammar
 */

inline.gfm = merge({}, inline.normal, {
  escape: replace(inline.escape)('])', '~|])')(),
  url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
  del: /^~~(?=\S)([\s\S]*?\S)~~/,
  text: replace(inline.text)
    (']|', '~]|')
    ('|', '|https?://|')
    ()
});

/**
 * GFM + Line Breaks Inline Grammar
 */

inline.breaks = merge({}, inline.gfm, {
  br: replace(inline.br)('{2,}', '*')(),
  text: replace(inline.gfm.text)('{2,}', '*')()
});

/**
 * Inline Lexer & Compiler
 */

function InlineLexer(links, options) {
  this.options = options || marked.defaults;
  this.links = links;
  this.rules = inline.normal;
  this.renderer = this.options.renderer || new Renderer;
  this.renderer.options = this.options;

  if (!this.links) {
    throw new
      Error('Tokens array requires a `links` property.');
  }

  if (this.options.gfm) {
    if (this.options.breaks) {
      this.rules = inline.breaks;
    } else {
      this.rules = inline.gfm;
    }
  } else if (this.options.pedantic) {
    this.rules = inline.pedantic;
  }
}

/**
 * Expose Inline Rules
 */

InlineLexer.rules = inline;

/**
 * Static Lexing/Compiling Method
 */

InlineLexer.output = function(src, links, options) {
  var inline = new InlineLexer(links, options);
  return inline.output(src);
};

/**
 * Lexing/Compiling
 */

InlineLexer.prototype.output = function(src) {
  var out = this.renderer.newSequence()
    , link
    , text
    , href
    , cap;

  while (src) {
    // escape
    if (cap = this.rules.escape.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(cap[1]);
      continue;
    }

    // autolink
    if (cap = this.rules.autolink.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[2] === '@') {
        text = cap[1].charAt(6) === ':'
          ? this.mangle(cap[1].substring(7))
          : this.mangle(cap[1]);
        href = this.mangle('mailto:') + text;
      } else {
        text = escape(cap[1]);
        href = text;
      }
      out = out.concat(this.renderer.link(href, null, text));
      continue;
    }

    // url (gfm)
    if (!this.inLink && (cap = this.rules.url.exec(src))) {
      src = src.substring(cap[0].length);
      text = escape(cap[1]);
      href = text;
      out = out.concat(this.renderer.link(href, null, text));
      continue;
    }

    // tag
    if (cap = this.rules.tag.exec(src)) {
      if (!this.inLink && /^<a /i.test(cap[0])) {
        this.inLink = true;
      } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
        this.inLink = false;
      }
      src = src.substring(cap[0].length);
      out = out.concat(this.options.sanitize
        ? escape(cap[0])
        : cap[0]);
      continue;
    }

    // link
    if (cap = this.rules.link.exec(src)) {
      src = src.substring(cap[0].length);
      this.inLink = true;
      out = out.concat(this.outputLink(cap, {
        href: cap[2],
        title: cap[3]
      }));
      this.inLink = false;
      continue;
    }

    // reflink, nolink
    if ((cap = this.rules.reflink.exec(src))
        || (cap = this.rules.nolink.exec(src))) {
      src = src.substring(cap[0].length);
      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = this.links[link.toLowerCase()];
      if (!link || !link.href) {
        out = out.concat(cap[0].charAt(0));
        src = cap[0].substring(1) + src;
        continue;
      }
      this.inLink = true;
      out = out.concat(this.outputLink(cap, link));
      this.inLink = false;
      continue;
    }

    // strong
    if (cap = this.rules.strong.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(this.renderer.strong(this.output(cap[2] || cap[1])));
      continue;
    }

    // em
    if (cap = this.rules.em.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(this.renderer.em(this.output(cap[2] || cap[1])));
      continue;
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(this.renderer.codespan(escape(cap[2], true)));
      continue;
    }

    // br
    if (cap = this.rules.br.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(this.renderer.br());
      continue;
    }

    // del (gfm)
    if (cap = this.rules.del.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(this.renderer.del(this.output(cap[1])));
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(escape(this.smartypants(cap[0])));
      continue;
    }

    if (src) {
      throw new
        Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return out;
};

/**
 * Compile Link
 */

InlineLexer.prototype.outputLink = function(cap, link) {
  var href = escape(link.href)
    , title = link.title ? escape(link.title) : null;

  return cap[0].charAt(0) !== '!'
    ? this.renderer.link(href, title, this.output(cap[1]))
    : this.renderer.image(href, title, escape(cap[1]));
};

/**
 * Smartypants Transformations
 */

InlineLexer.prototype.smartypants = function(text) {
  if (!this.options.smartypants) return text;
  return text
    // em-dashes
    .replace(/--/g, '\u2014')
    // opening singles
    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
    // closing singles & apostrophes
    .replace(/'/g, '\u2019')
    // opening doubles
    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
    // closing doubles
    .replace(/"/g, '\u201d')
    // ellipses
    .replace(/\.{3}/g, '\u2026');
};

/**
 * Mangle Links
 */

InlineLexer.prototype.mangle = function(text) {
  var out = ''
    , l = text.length
    , i = 0
    , ch;

  for (; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = 'x' + ch.toString(16);
    }
    out += '&#' + ch + ';';
  }

  return out;
};

/**
 * Renderer
 */

function Renderer(options) {
  this.options = options || {};
}

Renderer.prototype.code = function(code, lang, escaped, fenced) {
  if (this.options.highlight) {
    var out = this.options.highlight(code, lang);
    if (out != null && out !== code) {
      escaped = true;
      code = out;
    }
  }

  if (!lang) {
    return '<pre><code>'
      + (escaped ? code : escape(code, true))
      + '\n</code></pre>';
  }

  return '<pre><code class="'
    + this.options.langPrefix
    + escape(lang, true)
    + '">'
    + (escaped ? code : escape(code, true))
    + '\n</code></pre>\n';
};

Renderer.prototype.blockquote = function(quote) {
  return '<blockquote>\n' + quote + '</blockquote>\n';
};

Renderer.prototype.html = function(html) {
  return html;
};

Renderer.prototype.heading = function(text, level, raw) {
  return '<h'
    + level
    + ' id="'
    + this.options.headerPrefix
    + raw.toLowerCase().replace(/[^\w]+/g, '-')
    + '">'
    + text
    + '</h'
    + level
    + '>\n';
};

Renderer.prototype.hr = function() {
  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
};

Renderer.prototype.list = function(body, ordered) {
  var type = ordered ? 'ol' : 'ul';
  return '<' + type + '>\n' + body + '</' + type + '>\n';
};

Renderer.prototype.listitem = function(text) {
  return '<li>' + text + '</li>\n';
};

Renderer.prototype.paragraph = function(text) {
  return '<p>' + text + '</p>\n';
};

Renderer.prototype.table = function(header, body) {
  return '<table>\n'
    + '<thead>\n'
    + header
    + '</thead>\n'
    + '<tbody>\n'
    + body
    + '</tbody>\n'
    + '</table>\n';
};

Renderer.prototype.tablerow = function(content) {
  return '<tr>\n' + content + '</tr>\n';
};

Renderer.prototype.tablecell = function(content, flags) {
  var type = flags.header ? 'th' : 'td';
  var tag = flags.align
    ? '<' + type + ' style="text-align:' + flags.align + '">'
    : '<' + type + '>';
  return tag + content + '</' + type + '>\n';
};

// span level renderer
Renderer.prototype.strong = function(text) {
  return '<strong>' + text + '</strong>';
};

Renderer.prototype.em = function(text) {
  return '<em>' + text + '</em>';
};

Renderer.prototype.codespan = function(text) {
  return '<code>' + text + '</code>';
};

Renderer.prototype.br = function() {
  return this.options.xhtml ? '<br/>' : '<br>';
};

Renderer.prototype.del = function(text) {
  return '<del>' + text + '</del>';
};

Renderer.prototype.link = function(href, title, text) {
  if (this.options.sanitize) {
    try {
      var prot = decodeURIComponent(unescape(href))
        .replace(/[^\w:]/g, '')
        .toLowerCase();
    } catch (e) {
      return '';
    }
    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
      return '';
    }
  }
  var out = '<a href="' + href + '"';
  if (title) {
    out = out.concat(' title="' + title + '"');
  }
  out = out.concat('>' + text + '</a>');
  return out;
};

Renderer.prototype.image = function(href, title, text) {
  var out = '<img src="' + href + '" alt="' + text + '"';
  if (title) {
    out = out.concat(' title="' + title + '"');
  }
  out = out.concat(this.options.xhtml ? '/>' : '>');
  return out;
};

/**
 * Parsing & Compiling
 */

function Parser(options) {
  this.tokens = [];
  this.token = null;
  this.options = options || marked.defaults;
  this.options.renderer = this.options.renderer || new Renderer;
  this.renderer = this.options.renderer;
  this.renderer.options = this.options;
}

/**
 * Static Parse Method
 */

Parser.parse = function(src, options, renderer) {
  var parser = new Parser(options, renderer);
  return parser.parse(src);
};

/**
 * Parse Loop
 */

Parser.prototype.parse = function(src) {
  this.inline = new InlineLexer(src.links, this.options, this.renderer);
  this.tokens = src.reverse();

  var out = this.renderer.newSequence();
  while (this.next()) {
    out = out.concat(this.tok());
  }

  return out;
};

/**
 * Next Token
 */

Parser.prototype.next = function() {
  return this.token = this.tokens.pop();
};

/**
 * Preview Next Token
 */

Parser.prototype.peek = function() {
  return this.tokens[this.tokens.length - 1] || 0;
};

/**
 * Parse Text Tokens
 */

Parser.prototype.parseText = function() {
  var body = this.token.text;

  while (this.peek().type === 'text') {
    body = body.concat('\n' + this.next().text);
  }

  return this.inline.output(body);
};

/**
 * Parse Current Token
 */

Parser.prototype.tok = function() {
  switch (this.token.type) {
    case 'space': {
      return '';
    }
    case 'hr': {
      return this.renderer.hr();
    }
    case 'heading': {
      return this.renderer.heading(
        this.inline.output(this.token.text),
        this.token.depth,
        this.token.text);
    }
    case 'code': {
      return this.renderer.code(this.token.text,
        this.token.lang,
        this.token.escaped,
        !!this.token.fenced);
    }
    case 'table': {
      var header = this.renderer.newSequence()
        , body = this.renderer.newSequence()
        , i
        , row
        , cell
        , flags
        , j;

      // header
      cell = this.renderer.newSequence();
      for (i = 0; i < this.token.header.length; i++) {
        flags = { header: true, align: this.token.align[i] };
        cell = cell.concat(this.renderer.tablecell(
          this.inline.output(this.token.header[i]),
          { header: true, align: this.token.align[i] }
        ));
      }
      header = header.concat(this.renderer.tablerow(cell));

      for (i = 0; i < this.token.cells.length; i++) {
        row = this.token.cells[i];

        cell = this.renderer.newSequence();
        for (j = 0; j < row.length; j++) {
          cell = cell.concat(this.renderer.tablecell(
            this.inline.output(row[j]),
            { header: false, align: this.token.align[j] }
          ));
        }

        body = body.concat(this.renderer.tablerow(cell));
      }
      return this.renderer.table(header, body);
    }
    case 'blockquote_start': {
      var body = this.renderer.newSequence();

      while (this.next().type !== 'blockquote_end') {
        body = body.concat(this.tok());
      }

      return this.renderer.blockquote(body);
    }
    case 'list_start': {
      var body = this.renderer.newSequence()
        , ordered = this.token.ordered;

      while (this.next().type !== 'list_end') {
        body = body.concat(this.tok());
      }

      return this.renderer.list(body, ordered);
    }
    case 'list_item_start': {
      var body = this.renderer.newSequence();

      while (this.next().type !== 'list_item_end') {
        body = body.concat(this.token.type === 'text'
          ? this.parseText()
          : this.tok());
      }

      return this.renderer.listitem(body);
    }
    case 'loose_item_start': {
      var body = this.renderer.newSequence();

      while (this.next().type !== 'list_item_end') {
        body = body.concat(this.tok());
      }

      return this.renderer.listitem(body);
    }
    case 'html': {
      var html = !this.token.pre && !this.options.pedantic
        ? this.inline.output(this.token.text)
        : this.token.text;
      return this.renderer.html(html);
    }
    case 'paragraph': {
      return this.renderer.paragraph(this.inline.output(this.token.text));
    }
    case 'text': {
      return this.renderer.paragraph(this.parseText());
    }
  }
};

/**
 * Helpers
 */

function escape(html, encode) {
  return html
    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

function unescape(html) {
  return html.replace(/&([#\w]+);/g, function(_, n) {
    n = n.toLowerCase();
    if (n === 'colon') return ':';
    if (n.charAt(0) === '#') {
      return n.charAt(1) === 'x'
        ? String.fromCharCode(parseInt(n.substring(2), 16))
        : String.fromCharCode(+n.substring(1));
    }
    return '';
  });
}

function replace(regex, opt) {
  regex = regex.source;
  opt = opt || '';
  return function self(name, val) {
    if (!name) return new RegExp(regex, opt);
    val = val.source || val;
    val = val.replace(/(^|[^\[])\^/g, '$1');
    regex = regex.replace(name, val);
    return self;
  };
}

function noop() {}
noop.exec = noop;

function merge(obj) {
  var i = 1
    , target
    , key;

  for (; i < arguments.length; i++) {
    target = arguments[i];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }

  return obj;
}


/**
 * Marked
 */

function marked(src, opt, callback) {
  if (callback || typeof opt === 'function') {
    if (!callback) {
      callback = opt;
      opt = null;
    }

    opt = merge({}, marked.defaults, opt || {});

    var highlight = opt.highlight
      , tokens
      , pending
      , i = 0;

    try {
      tokens = Lexer.lex(src, opt)
    } catch (e) {
      return callback(e);
    }

    pending = tokens.length;

    var done = function(err) {
      if (err) {
        opt.highlight = highlight;
        return callback(err);
      }

      var out;

      try {
        out = Parser.parse(tokens, opt);
      } catch (e) {
        err = e;
      }

      opt.highlight = highlight;

      return err
        ? callback(err)
        : callback(null, out);
    };

    if (!highlight || highlight.length < 3) {
      return done();
    }

    delete opt.highlight;

    if (!pending) return done();

    for (; i < tokens.length; i++) {
      (function(token) {
        if (token.type !== 'code') {
          return --pending || done();
        }
        return highlight(token.text, token.lang, function(err, code) {
          if (err) return done(err);
          if (code == null || code === token.text) {
            return --pending || done();
          }
          token.text = code;
          token.escaped = true;
          --pending || done();
        });
      })(tokens[i]);
    }

    return;
  }
  try {
    if (opt) opt = merge({}, marked.defaults, opt);
    return Parser.parse(Lexer.lex(src, opt), opt);
  } catch (e) {
    e.message = e.message.concat("\nPlease report this to https://github.com/chjj/marked.");
    if (((opt || marked.defaults)).silent) {
      return '<p>An error occured:</p><pre>'
        + escape(e.message + '', true)
        + '</pre>';
    }
    throw e;
  }
}

/**
 * Options
 */

marked.options =
marked.setOptions = function(opt) {
  merge(marked.defaults, opt);
  return marked;
};

marked.defaults = {
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: false,
  smartLists: false,
  silent: false,
  highlight: null,
  langPrefix: 'lang-',
  smartypants: false,
  headerPrefix: '',
  renderer: new Renderer,
  xhtml: false
};

/**
 * Expose
 */

marked.Parser = Parser;
marked.parser = Parser.parse;

marked.Renderer = Renderer;

marked.Lexer = Lexer;
marked.lexer = Lexer.lex;

marked.InlineLexer = InlineLexer;
marked.inlineLexer = InlineLexer.output;

marked.parse = marked;

if (typeof module !== 'undefined' && typeof exports === 'object') {
  module.exports = marked;
} else if (typeof define === 'function' && define.amd) {
  define(function() { return marked; });
} else {
  this.marked = marked;
}

}).call(function() {
  return this || (typeof window !== 'undefined' ? window : global);
}());


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],85:[function(require,module,exports){
'use strict';

var marked = require('./gen/marked-mod');

// Alias marked's default renderer as HtmlRenderer.
var HtmlRenderer = marked.Renderer;

// Monkey-patch the HTML renderer with the `newSequence` function, which
// is required by our modified version of marked.
HtmlRenderer.prototype.newSequence = function() {
  return '';
};

// The AstBuilder is a renderer that produces an abstract syntax tree
// representing the structure of the Markdown source.
function AstBuilder() {
}

AstBuilder.prototype.newSequence = function() {
  return [];
};

var handlerArgs = {
  code: ['code', 'lang', 'escaped', 'fenced'],
  blockquote: ['quote'],
  html: ['html'],
  heading: ['text', 'level', 'raw'],
  hr: [],
  list: ['body', 'ordered'],
  listitem: ['text'],
  paragraph: ['text'],
  table: ['header', 'body'],
  tablerow: ['content'],
  tablecell: ['content', 'flags'],
  strong: ['text'],
  em: ['text'],
  codespan: ['text'],
  br: [],
  del: ['text'],
  link: ['href', 'title', 'text'],
  image: ['href', 'title', 'text']
};

function isObject(obj) {
  var type = typeof obj;
  return type === 'function' || type === 'object' && !!obj;
}

function isArray(obj) {
  return Object.prototype.toString.call(obj) === '[object Array]';
}

function map(arr, fn) {
  var result = [];
  for (var i = 0; i < arr.length; ++i) {
    result.push(fn(arr[i], i));
  }
  return result;
}

// Returns a handler function which just returns an object which captures the
// values of all the arguments to the handler function.
function makeHandler(type, args) {
  return function() {
    var result = { type: type };
    for (var i = 0; i < args.length; ++i) {
      result[args[i]] = arguments[i];
    }
    return result;
  };
}

for (var k in handlerArgs) {
  AstBuilder.prototype[k] = makeHandler(k, handlerArgs[k]);
}

function parse(text) {
  return marked(text, {
    renderer: new AstBuilder()
  });
}

function render(node, renderer) {
  if (!isObject(node))
    return node;

  // Render all of the children.
  var results = isArray(node) ? [] : {};
  for (var key in node) {
    if (node.hasOwnProperty(key))
      results[key] = render(node[key], renderer);
  }

  if (isArray(node))
    return results.join('');

  // Splat the results object onto the appropriate handler in the renderer.
  var handlerFn = renderer[node.type];
  if (!handlerFn) throw new Error("Missing handler for '" + node.type + "'");

  var args = map(handlerArgs[node.type], function(argName) {
    return results[argName];
  });
  return handlerFn.apply(renderer, args);
}

module.exports = {
  _marked: marked,
  parse: parse,
  render: function(tree, renderer) {
    return render(tree, renderer || new HtmlRenderer());
  },
  AstBuilder: AstBuilder
};

},{"./gen/marked-mod":84}],86:[function(require,module,exports){
var crel = require('crel'),
    doc = require('doc-js'),
    defaultCss = require('defaultcss');

defaultCss('modal-component', '.modal-component{position:fixed;top:0;bottom:0;left:0;right:0;}.modal-component .content{background:white}');

module.exports = function(fastn, component, type, settings, children){
    var lastShowTime;

    component.extend('_generic', settings, children);

    component._type = 'modal';
    component._attachChildren = false;
    component.render = function(){
        component.element = document.createTextNode('');

        component.modalElement = crel('div', {'class':'modal-component'},
            component.containerElement = component.contentElement = crel('div', {'class':'content'})
        );

        component.emit('render');

        var handler = function(event){
            if(
                component.show() &&
                component.closable() &&
                !doc(event.target).closest(component.contentElement)
            ){
                component.show(false);
            }
        };

        document.addEventListener('click', handler, true);

        component.on('destroy', function(){
            document.removeEventListener('click', handler, true);
            updateShow(false);
        });

        return component;
    };
    component._insert = function(element, index){
        if(!component.contentElement){
            return;
        }

        if(component.contentElement.childNodes[index] === element){
            return;
        }

        component.contentElement.insertBefore(element, component.contentElement.childNodes[index]);
    };

    var timeout;
    function waitForAnimation(callback){
        if(timeout){
            clearTimeout(timeout);
        }

        // Allow hide timeout for animations
        timeout = setTimeout(callback, settings.animationTime || 0);
    }

    var state = 'hidden';
    function setModalState(newState){
        doc(component.modalElement).removeClass(state).addClass(newState);
        state = newState;
        component.emit('state', state);
    }

    var contentChild;

    function clearContentChild(){
        if(contentChild){
            component.remove(contentChild);
            contentChild.destroy();
            contentChild = null;
        }
    }

    function updateShow(show){
        if(!component.element){
            return;
        }

        if(show){
            lastShowTime = Date.now();

            clearContentChild();

            if(component._settings.content){
                contentChild = fastn.toComponent(component._settings.content(component.scope()));
                component.insert(contentChild);
            }

            if(!component.modalElement.parentNode){
                crel(document.body, component.modalElement);
            }

            setModalState('showing');

            waitForAnimation(function(){
                setModalState('shown');
            });
        }else{
            setModalState('hiding');

            waitForAnimation(function(){
                setModalState('hidden');

                if(component.modalElement.parentNode){
                    component.modalElement.parentNode.removeChild(component.modalElement);
                }

                clearContentChild();
            });
        }
    }

    component.setProperty('show');
    component.setProperty('closable');
    component.closable(true);
    component.show.updater(updateShow);

    return component;
};

module.exports.expectedComponents = ['text', '_generic', 'list', 'templater'];

},{"crel":14,"defaultcss":19,"doc-js":28}],87:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = '' + str;
  if (str.length > 10000) return;
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],88:[function(require,module,exports){
"use strict";

/* global module, define */

function mapEach(map, operation){
  var keys = map.keys();
  var next;
  while(!(next = keys.next()).done) {
    operation(map.get(next.value), next.value, map);
  }
}

var Multimap = (function() {
  var mapCtor;
  if (typeof Map !== 'undefined') {
    mapCtor = Map;

    if (!Map.prototype.keys) {
      Map.prototype.keys = function() {
        var keys = [];
        this.forEach(function(item, key) {
          keys.push(key);
        });
        return keys;
      };
    }
  }

  function Multimap(iterable) {
    var self = this;

    self._map = mapCtor;

    if (Multimap.Map) {
      self._map = Multimap.Map;
    }

    self._ = self._map ? new self._map() : {};

    if (iterable) {
      iterable.forEach(function(i) {
        self.set(i[0], i[1]);
      });
    }
  }

  /**
   * @param {Object} key
   * @return {Array} An array of values, undefined if no such a key;
   */
  Multimap.prototype.get = function(key) {
    return this._map ? this._.get(key) : this._[key];
  };

  /**
   * @param {Object} key
   * @param {Object} val...
   */
  Multimap.prototype.set = function(key, val) {
    var args = Array.prototype.slice.call(arguments);

    key = args.shift();

    var entry = this.get(key);
    if (!entry) {
      entry = [];
      if (this._map)
        this._.set(key, entry);
      else
        this._[key] = entry;
    }

    Array.prototype.push.apply(entry, args);
    return this;
  };

  /**
   * @param {Object} key
   * @param {Object=} val
   * @return {boolean} true if any thing changed
   */
  Multimap.prototype.delete = function(key, val) {
    if (!this.has(key))
      return false;

    if (arguments.length == 1) {
      this._map ? (this._.delete(key)) : (delete this._[key]);
      return true;
    } else {
      var entry = this.get(key);
      var idx = entry.indexOf(val);
      if (idx != -1) {
        entry.splice(idx, 1);
        return true;
      }
    }

    return false;
  };

  /**
   * @param {Object} key
   * @param {Object=} val
   * @return {boolean} whether the map contains 'key' or 'key=>val' pair
   */
  Multimap.prototype.has = function(key, val) {
    var hasKey = this._map ? this._.has(key) : this._.hasOwnProperty(key);

    if (arguments.length == 1 || !hasKey)
      return hasKey;

    var entry = this.get(key) || [];
    return entry.indexOf(val) != -1;
  };


  /**
   * @return {Array} all the keys in the map
   */
  Multimap.prototype.keys = function() {
    if (this._map)
      return makeIterator(this._.keys());

    return makeIterator(Object.keys(this._));
  };

  /**
   * @return {Array} all the values in the map
   */
  Multimap.prototype.values = function() {
    var vals = [];
    this.forEachEntry(function(entry) {
      Array.prototype.push.apply(vals, entry);
    });

    return makeIterator(vals);
  };

  /**
   *
   */
  Multimap.prototype.forEachEntry = function(iter) {
    mapEach(this, iter);
  };

  Multimap.prototype.forEach = function(iter) {
    var self = this;
    self.forEachEntry(function(entry, key) {
      entry.forEach(function(item) {
        iter(item, key, self);
      });
    });
  };


  Multimap.prototype.clear = function() {
    if (this._map) {
      this._.clear();
    } else {
      this._ = {};
    }
  };

  Object.defineProperty(
    Multimap.prototype,
    "size", {
      configurable: false,
      enumerable: true,
      get: function() {
        var total = 0;

        mapEach(this, function(value){
          total += value.length;
        });

        return total;
      }
    });

  var safariNext;

  try{
    safariNext = new Function('iterator', 'makeIterator', 'var keysArray = []; for(var key of iterator){keysArray.push(key);} return makeIterator(keysArray).next;');
  }catch(error){
    // for of not implemented;
  }

  function makeIterator(iterator){
    if(Array.isArray(iterator)){
      var nextIndex = 0;

      return {
        next: function(){
          return nextIndex < iterator.length ?
            {value: iterator[nextIndex++], done: false} :
          {done: true};
        }
      };
    }

    // Only an issue in safari
    if(!iterator.next && safariNext){
      iterator.next = safariNext(iterator, makeIterator);
    }

    return iterator;
  }

  return Multimap;
})();


if(typeof exports === 'object' && module && module.exports)
  module.exports = Multimap;
else if(typeof define === 'function' && define.amd)
  define(function() { return Multimap; });

},{}],89:[function(require,module,exports){
var supportedTypes = ['text', 'search', 'tel', 'url', 'password'];

module.exports = function(element){
    return !!(element.setSelectionRange && ~supportedTypes.indexOf(element.type));
};

},{}],90:[function(require,module,exports){
'use strict';
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function ToObject(val) {
	if (val == null) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function ownEnumerableKeys(obj) {
	var keys = Object.getOwnPropertyNames(obj);

	if (Object.getOwnPropertySymbols) {
		keys = keys.concat(Object.getOwnPropertySymbols(obj));
	}

	return keys.filter(function (key) {
		return propIsEnumerable.call(obj, key);
	});
}

module.exports = Object.assign || function (target, source) {
	var from;
	var keys;
	var to = ToObject(target);

	for (var s = 1; s < arguments.length; s++) {
		from = arguments[s];
		keys = ownEnumerableKeys(Object(from));

		for (var i = 0; i < keys.length; i++) {
			to[keys[i]] = from[keys[i]];
		}
	}

	return to;
};

},{}],91:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn) {
  var args = new Array(arguments.length - 1);
  var i = 0;
  while (i < args.length) {
    args[i++] = arguments[i];
  }
  process.nextTick(function afterTick() {
    fn.apply(null, args);
  });
}

}).call(this,require('_process'))

},{"_process":92}],92:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],93:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"dup":43}],94:[function(require,module,exports){
/*!
	query-string
	Parse and stringify URL query strings
	https://github.com/sindresorhus/query-string
	by Sindre Sorhus
	MIT License
*/
(function () {
	'use strict';
	var queryString = {};

	queryString.parse = function (str) {
		if (typeof str !== 'string') {
			return {};
		}

		str = str.trim().replace(/^(\?|#)/, '');

		if (!str) {
			return {};
		}

		return str.trim().split('&').reduce(function (ret, param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			var key = parts[0];
			var val = parts[1];

			key = decodeURIComponent(key);
			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (!ret.hasOwnProperty(key)) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}

			return ret;
		}, {});
	};

	queryString.stringify = function (obj) {
		return obj ? Object.keys(obj).map(function (key) {
			var val = obj[key];

			if (Array.isArray(val)) {
				return val.map(function (val2) {
					return encodeURIComponent(key) + '=' + encodeURIComponent(val2);
				}).join('&');
			}

			return encodeURIComponent(key) + '=' + encodeURIComponent(val);
		}).join('&') : '';
	};

	if (typeof define === 'function' && define.amd) {
		define(function() { return queryString; });
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = queryString;
	} else {
		self.queryString = queryString;
	}
})();

},{}],95:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))

},{"./_stream_readable":97,"./_stream_writable":99,"_process":92,"core-util-is":12,"inherits":62}],96:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":98,"core-util-is":12,"inherits":62}],97:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = false;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // In streams that never have any data, and do push(null) right away,
  // the consumer can miss the 'end' event if they do some I/O before
  // consuming the stream.  So, we don't emit('end') until some reading
  // happens.
  this.calledRead = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (typeof chunk === 'string' && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null || chunk === undefined) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) {
        state.buffer.unshift(chunk);
      } else {
        state.reading = false;
        state.buffer.push(chunk);
      }

      if (state.needReadable)
        emitReadable(stream);

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  var state = this._readableState;
  state.calledRead = true;
  var nOrig = n;
  var ret;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    ret = null;

    // In cases where the decoder did not receive enough data
    // to produce a full chunk, then immediately received an
    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
    // howMuchToRead will see this and coerce the amount to
    // read to zero (because it's looking at the length of the
    // first <Buffer > in state.buffer), and we'll end up here.
    //
    // This can only happen via state.decoder -- no other venue
    // exists for pushing a zero-length chunk into state.buffer
    // and triggering this behavior. In this case, we return our
    // remaining data and end the stream, if appropriate.
    if (state.length > 0 && state.decoder) {
      ret = fromList(n, state);
      state.length -= ret.length;
    }

    if (state.length === 0)
      endReadable(this);

    return ret;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;

  // if we currently have less than the highWaterMark, then also read some
  if (state.length - n <= state.highWaterMark)
    doRead = true;

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading)
    doRead = false;

  if (doRead) {
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read called its callback synchronously, then `reading`
  // will be false, and we need to re-evaluate how much data we
  // can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we happened to read() exactly the remaining amount in the
  // buffer, and the EOF has been seen at this point, then make sure
  // that we emit 'end' on the very next tick.
  if (state.ended && !state.endEmitted && state.length === 0)
    endReadable(this);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // if we've ended and we have some data left, then emit
  // 'readable' now to make sure it gets picked up.
  if (state.length > 0)
    emitReadable(stream);
  else
    endReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (state.emittedReadable)
    return;

  state.emittedReadable = true;
  if (state.sync)
    process.nextTick(function() {
      emitReadable_(stream);
    });
  else
    emitReadable_(stream);
}

function emitReadable_(stream) {
  stream.emit('readable');
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    if (readable !== src) return;
    cleanup();
  }

  function onend() {
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (!dest._writableState || dest._writableState.needDrain)
      ondrain();
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    // the handler that waits for readable events after all
    // the data gets sucked out in flow.
    // This would be easier to follow with a .once() handler
    // in flow(), but that is too slow.
    this.on('readable', pipeOnReadable);

    state.flowing = true;
    process.nextTick(function() {
      flow(src);
    });
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var dest = this;
    var state = src._readableState;
    state.awaitDrain--;
    if (state.awaitDrain === 0)
      flow(src);
  };
}

function flow(src) {
  var state = src._readableState;
  var chunk;
  state.awaitDrain = 0;

  function write(dest, i, list) {
    var written = dest.write(chunk);
    if (false === written) {
      state.awaitDrain++;
    }
  }

  while (state.pipesCount && null !== (chunk = src.read())) {

    if (state.pipesCount === 1)
      write(state.pipes, 0, null);
    else
      forEach(state.pipes, write);

    src.emit('data', chunk);

    // if anyone needs a drain, then we have to wait for that.
    if (state.awaitDrain > 0)
      return;
  }

  // if every destination was unpiped, either before entering this
  // function, or in the while loop, then stop flowing.
  //
  // NB: This is a pretty rare edge case.
  if (state.pipesCount === 0) {
    state.flowing = false;

    // if there were data event listeners added, then switch to old mode.
    if (EE.listenerCount(src, 'data') > 0)
      emitDataEvents(src);
    return;
  }

  // at this point, no one needed a drain, so we just ran out of data
  // on the next readable event, start it over again.
  state.ranOut = true;
}

function pipeOnReadable() {
  if (this._readableState.ranOut) {
    this._readableState.ranOut = false;
    flow(this);
  }
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data' && !this._readableState.flowing)
    emitDataEvents(this);

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        this.read(0);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  emitDataEvents(this);
  this.read(0);
  this.emit('resume');
};

Readable.prototype.pause = function() {
  emitDataEvents(this, true);
  this.emit('pause');
};

function emitDataEvents(stream, startPaused) {
  var state = stream._readableState;

  if (state.flowing) {
    // https://github.com/isaacs/readable-stream/issues/16
    throw new Error('Cannot switch to old mode now.');
  }

  var paused = startPaused || false;
  var readable = false;

  // convert to an old-style stream.
  stream.readable = true;
  stream.pipe = Stream.prototype.pipe;
  stream.on = stream.addListener = Stream.prototype.on;

  stream.on('readable', function() {
    readable = true;

    var c;
    while (!paused && (null !== (c = stream.read())))
      stream.emit('data', c);

    if (c === null) {
      readable = false;
      stream._readableState.needReadable = true;
    }
  });

  stream.pause = function() {
    paused = true;
    this.emit('pause');
  };

  stream.resume = function() {
    paused = false;
    if (readable)
      process.nextTick(function() {
        stream.emit('readable');
      });
    else
      this.read(0);
    this.emit('resume');
  };

  // now make it start, just in case it hadn't already.
  stream.emit('readable');
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    //if (state.objectMode && util.isNullOrUndefined(chunk))
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (typeof stream[i] === 'function' &&
        typeof this[i] === 'undefined') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted && state.calledRead) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))

},{"_process":92,"buffer":8,"core-util-is":12,"events":44,"inherits":62,"isarray":64,"stream":107,"string_decoder/":119}],98:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  var ts = this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('finish', function() {
    if ('function' === typeof this._flush)
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var rs = stream._readableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":95,"core-util-is":12,"inherits":62}],99:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb))
    ret = writeOrBuffer(this, state, chunk, encoding, cb);

  return ret;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      cb(er);
    });
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished && !state.bufferProcessing && state.buffer.length)
      clearBuffer(stream, state);

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  cb();
  if (finished)
    finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  for (var c = 0; c < state.buffer.length; c++) {
    var entry = state.buffer[c];
    var chunk = entry.chunk;
    var encoding = entry.encoding;
    var cb = entry.callback;
    var len = state.objectMode ? 1 : chunk.length;

    doWrite(stream, state, len, chunk, encoding, cb);

    // if we didn't call the onwrite immediately, then
    // it means that we need to wait until it does.
    // also, that means that the chunk and cb are currently
    // being processed, so move the buffer counter past them.
    if (state.writing) {
      c++;
      break;
    }
  }

  state.bufferProcessing = false;
  if (c < state.buffer.length)
    state.buffer = state.buffer.slice(c);
  else
    state.buffer.length = 0;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (typeof chunk !== 'undefined' && chunk !== null)
    this.write(chunk, encoding);

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    state.finished = true;
    stream.emit('finish');
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))

},{"./_stream_duplex":95,"_process":92,"buffer":8,"core-util-is":12,"inherits":62,"stream":107}],100:[function(require,module,exports){
var Stream = require('stream'); // hack to fix a circular dependency issue when used with browserify
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":95,"./lib/_stream_passthrough.js":96,"./lib/_stream_readable.js":97,"./lib/_stream_transform.js":98,"./lib/_stream_writable.js":99,"stream":107}],101:[function(require,module,exports){
module.exports = function intersect(arrayA, arrayB, intersector){
    var results = [];

    function innerCheck(aItem){
        for (var i = 0; i < arrayB.length; i++) {
            if(
                (intersector && intersector(aItem, arrayB[i])) ||
                (!intersector && aItem === arrayB[i])
            ){
                results.push(aItem);
            }
        }
    }

    for (var i = 0; i < arrayA.length; i++) {
        innerCheck(arrayA[i]);
    }

    return results;
};
},{}],102:[function(require,module,exports){
var intersect = require('./intersect'),
    arrayProto = [],
    absolutePath = /^.+?\:\/\//g,
    formatRegex = /\{.*?\}/g,
    keysRegex = /\{(.*?)\}/g,
    nonNameKey = /^_(.*)$/,
    sanitiseRegex = /[#-.\[\]-^?]/g;

function sanitise(string){
    return string.replace(sanitiseRegex, '\\$&');
}

function isRestKey(key){
    return key.match(/^.*?\.\.\.$/);
}

function isRestToken(token){
    return token.match(/^{.*?(?:\.\.\.)|(?:\\\.\\\.\\\.)}$/);
}

function formatString(string, values) {
    values || (values = {});

    return string.replace(/{(.+?)}/g, function (match, key) {
        if(isRestKey(key)){
            key = key.slice(0,-3);
        }
        return (values[key] === undefined || values[key] === null) ? '' : values[key];
    });
}

function resolve(rootPath, path){
    if(!path){
        return rootPath;
    }
    if(path.match(absolutePath)){
        return path;
    }
    return rootPath + path;
}

function Router(routes, location){
    if(!location){
        location = window.location;
    }

    this.location = location;
    this.basePath  = location.protocol + '//' + location.host;
    this.routes = routes;
    this.homeRoute = 'home';
}

function scanRoutes(routes, fn){
    var route,
        routeKey,
        result;

    for(var key in routes){
        if(key.charAt(0) === '_'){
            continue;
        }

        // Scan children first
        result = scanRoutes(routes[key], fn);
        if(result != null){
            return result;
        }
        // Scan current route
        result = fn(routes[key], key);
        if(result != null){
            return result;
        }
    }
}

Router.prototype.currentPath = function(){
    return this.location.href;
};

Router.prototype.details = function(url){
    var router = this;

    if(url == null){
        url = this.currentPath();
    }

    return scanRoutes(this.routes, function(route, routeName){
        var urls = Array.isArray(route._url) ? route._url : [route._url],
            bestMatch,
            mostMatches = 0;

        for(var i = 0; i < urls.length; i++){
            var routeKey = router.resolve(router.basePath, urls[i]),
                regex = '^' + sanitise(routeKey).replace(formatRegex, function(item){
                    if(isRestToken(item)){
                        return '(.*?)';
                    }
                    return '([^/]*?)';
                }) + '$',
                match = url.match(regex);

            if(match && match.length > mostMatches){
                mostMatches = match.length;
                bestMatch = routeKey;
            }
        }

        if(bestMatch == null){
            return;
        }

        return {
            path: url,
            name: routeName,
            template: bestMatch
        };
    });
};

Router.prototype.info = function(name){
    var router = this;

    return scanRoutes(this.routes, function(route, routeName){
        if(routeName !== name){
            return;
        }

        var info = {
            name: routeName
        };

        for(var key in route){
            var keyNameMatch = key.match(nonNameKey);
            if(keyNameMatch){
                info[keyNameMatch[1]] = route[key];
            }
        }

        return info;
    });
};

Router.prototype.find = function(url){
    var details = this.details(url);

    return details && details.name;
};

Router.prototype.upOneName = function(name){
    if(!name){
        return;
    }

    return scanRoutes(this.routes, function(route, routeName){
        if(name in route){
            return routeName;
        }
    }) || this.homeRoute;
};

Router.prototype.upOne = function(path){
    if(path === undefined){
        path = this.currentPath();
    }

    return this.drill(path, this.upOneName(this.find(path)));
};

function cleanTokens(token){
    return token.slice(1,-1);
}

Router.prototype.getRouteTemplate = function(name, values){
    var keys = values && typeof values === 'object' && Object.keys(values) || [],
        routeTemplate = scanRoutes(this.routes, function(route, routeName){
        if(name === routeName){
            var result = {
                route: route
            };

            if(!Array.isArray(route._url)){
                result.template = route._url;
                return result;
            }

            var urlsByDistance = route._url.slice().sort(function(urlA, urlB){
                var keysA = (urlA.match(keysRegex) || []).map(cleanTokens),
                    keysB = (urlB.match(keysRegex) || []).map(cleanTokens),
                    commonAKeys = intersect(keysA, keys),
                    commonBKeys = intersect(keysB, keys),
                    aDistance = Math.abs(commonAKeys.length - keys.length),
                    bDistance = Math.abs(commonBKeys.length - keys.length);

                return aDistance - bDistance;
            });

            result.template = urlsByDistance[0] || route._url[0];

            return result;
        }
    });

    if(!routeTemplate){
        return;
    }

    routeTemplate.template = this.resolve(this.basePath, routeTemplate.template);

    return routeTemplate;
};

Router.prototype.getTemplate = function(name, values){
    return this.getRouteTemplate(name, values).template;
};

function getDefaults(defaults, result){
    for(var key in defaults){
        var defaultValue = defaults[key];

        if(typeof defaultValue === 'function'){
            defaultValue = defaultValue();
        }

        result[key] || (result[key] = defaultValue);
    }

    return result;
}

Router.prototype.get = function(name, values){
    var routeTemplate = this.getRouteTemplate(name, values);

    if(!routeTemplate){
        return null;
    }

    values || (values = {});

    if(routeTemplate.route._defaults){
        getDefaults(routeTemplate.route._defaults, values);
    }

    var serialise = routeTemplate.route._serialise;

    var resolvedValues = {};

    for(var valuesKey in values) {
        var value = values[valuesKey];
        resolvedValues[valuesKey] = serialise ?
            serialise(valuesKey, value) :
            value;
    }

    return formatString(routeTemplate.template, resolvedValues);
};

Router.prototype.isIn = function(childName, parentName){
    var currentRoute = childName,
        lastRoute;

    while(currentRoute !== lastRoute && currentRoute !== parentName){
        lastRoute = currentRoute;
        currentRoute = this.upOneName(currentRoute);
    }

    return currentRoute === parentName;
};

Router.prototype.isRoot = function(name){
    return name in this.routes;
};

Router.prototype.values = function(path){
    var details = this.details.apply(this, arguments),
        result = {},
        keys,
        values;

    if(details == null || details.template == null){
        return;
    }

    keys = details.template.match(keysRegex);
    values = details.path.match('^' + sanitise(details.template).replace(formatRegex, '(.*?)') + '$');

    var info = this.info(details.name);

    if(keys && values){
        keys = keys.map(function(key){
            if(isRestToken(key)){
                return key.slice(1,-4);
            }
            return key.slice(1,-1);
        });

        values = values.slice(1);

        for(var i = 0; i < keys.length; i++){
            var value = values[i];

            if(info.deserialise) {
                value = info.deserialise(keys[i], value);
            }
            result[keys[i]] = value;
        }

        getDefaults(info.defaults, result);
    }

    return result;
};

Router.prototype.drill = function(url, route, newValues){
    if(url == null){
        url = this.currentPath();
    }


    var getArguments = this.values(url);

    if(newValues){
        for(var key in newValues){
            getArguments[key] = newValues[key];
        }
    }

    return this.get(route, getArguments);
};

Router.prototype.resolve = resolve;

module.exports = Router;

},{"./intersect":101}],103:[function(require,module,exports){
module.exports = function isSame(a, b){
    if(a === b){
        return true;
    }

    if(
        typeof a !== typeof b ||
        typeof a === 'object' &&
        !(a instanceof Date && b instanceof Date)
    ){
        return false;
    }

    return String(a) === String(b);
};
},{}],104:[function(require,module,exports){
var naturalSelection = require('natural-selection');

module.exports = function(element, value){
    var canSet = naturalSelection(element) && element === document.activeElement;

    if (canSet) {
        var start = element.selectionStart,
            end = element.selectionEnd;

        element.value = value;
        element.setSelectionRange(start, end);
    } else {
        element.value = value;
    }
};

},{"natural-selection":89}],105:[function(require,module,exports){
module.exports = Object.setPrototypeOf || ({__proto__:[]} instanceof Array ? setProtoOf : mixinProperties);

function setProtoOf(obj, proto) {
	obj.__proto__ = proto;
}

function mixinProperties(obj, proto) {
	for (var prop in proto) {
		obj[prop] = proto[prop];
	}
}

},{}],106:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter,
    queryString = require('query-string');

function tryParseJson(data){
    try{
        return JSON.parse(data);
    }catch(error){
        return error;
    }
}

function timeout(){
   this.request.abort();
   this.emit('timeout');
}

function Ajax(settings){
    var queryStringData,
        ajax = this;

    if(typeof settings === 'string'){
        settings = {
            url: settings
        };
    }

    if(typeof settings !== 'object'){
        settings = {};
    }

    ajax.settings = settings;
    ajax.request = new XMLHttpRequest();
    ajax.settings.method = ajax.settings.method || 'get';

    if(ajax.settings.cors){
        if ('withCredentials' in ajax.request) {
            ajax.request.withCredentials = !!settings.withCredentials;
        } else if (typeof XDomainRequest !== 'undefined') {
            // XDomainRequest only exists in IE, and is IE's way of making CORS requests.
            ajax.request = new XDomainRequest();
        } else {
            // Otherwise, CORS is not supported by the browser.
            ajax.emit('error', new Error('Cors is not supported by this browser'));
        }
    }

    if(ajax.settings.cache === false){
        ajax.settings.data = ajax.settings.data || {};
        ajax.settings.data._ = new Date().getTime();
    }

    if(ajax.settings.method.toLowerCase() === 'get' && typeof ajax.settings.data === 'object'){
        var urlParts = ajax.settings.url.split('?');

        queryStringData = queryString.parse(urlParts[1]);

        for(var key in ajax.settings.data){
            queryStringData[key] = ajax.settings.data[key];
        }

        ajax.settings.url = urlParts[0] + '?' + queryString.stringify(queryStringData);
        ajax.settings.data = null;
    }

    ajax.request.addEventListener('progress', function(event){
        ajax.emit('progress', event);
    }, false);

    ajax.request.addEventListener('load', function(event){
        var data = event.target.responseText;

        if(ajax.settings.dataType && ajax.settings.dataType.toLowerCase() === 'json'){
            if(data === ''){
                data = undefined;
            }else{
                data = tryParseJson(data);
                if(data instanceof Error){
                    ajax.emit('error', event, data);
                    return;
                }
            }
        }

        if(event.target.status >= 400){
            ajax.emit('error', event, data);
        } else {
            ajax.emit('success', event, data);
        }

    }, false);

    ajax.request.addEventListener('error', function(event){
        ajax.emit('error', event);
    }, false);

    ajax.request.addEventListener('abort', function(event){
        ajax.emit('error', event, new Error('Connection Aborted'));
        ajax.emit('abort', event);
    }, false);

    ajax.request.addEventListener('loadend', function(event){
        clearTimeout(this._requestTimeout);
        ajax.emit('complete', event);
    }, false);

    ajax.request.open(ajax.settings.method || 'get', ajax.settings.url, true);

    // Set default headers
    if(ajax.settings.contentType !== false){
        ajax.request.setRequestHeader('Content-Type', ajax.settings.contentType || 'application/json; charset=utf-8');
    }
    if(ajax.settings.requestedWith !== false) {
        ajax.request.setRequestHeader('X-Requested-With', ajax.settings.requestedWith || 'XMLHttpRequest');
    }
    if(ajax.settings.auth){
        ajax.request.setRequestHeader('Authorization', ajax.settings.auth);
    }

    // Set custom headers
    for(var headerKey in ajax.settings.headers){
        ajax.request.setRequestHeader(headerKey, ajax.settings.headers[headerKey]);
    }

    if(ajax.settings.processData !== false && ajax.settings.dataType === 'json'){
        ajax.settings.data = JSON.stringify(ajax.settings.data);
    }
}

Ajax.prototype = Object.create(EventEmitter.prototype);

Ajax.prototype.send = function(){
    this._requestTimeout = setTimeout(
        timeout.bind(this),
        this.settings.timeout || 120000
    );
    this.request.send(this.settings.data && this.settings.data);
};

module.exports = Ajax;

},{"events":44,"query-string":94}],107:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":44,"inherits":62,"readable-stream/duplex.js":109,"readable-stream/passthrough.js":115,"readable-stream/readable.js":116,"readable-stream/transform.js":117,"readable-stream/writable.js":118}],108:[function(require,module,exports){
arguments[4][9][0].apply(exports,arguments)
},{"dup":9}],109:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":110}],110:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":112,"./_stream_writable":114,"core-util-is":12,"inherits":62,"process-nextick-args":91}],111:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":113,"core-util-is":12,"inherits":62}],112:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events');

/*<replacement>*/
var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = undefined;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

var Duplex;
function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

var Duplex;
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended) return 0;

  if (state.objectMode) return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
  }

  if (n <= 0) return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended) state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var _i = 0; _i < len; _i++) {
      dests[_i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1) return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && !this._readableState.endEmitted) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0) return null;

  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode) ret = '';else ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'))

},{"./_stream_duplex":110,"_process":92,"buffer":8,"core-util-is":12,"events":44,"inherits":62,"isarray":108,"process-nextick-args":91,"string_decoder/":119,"util":7}],113:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er) {
      done(stream, er);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er) {
  if (er) return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":110,"core-util-is":12,"inherits":62}],114:[function(require,module,exports){
(function (process){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

var Duplex;
function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // create the two objects needed to store the corked requests
  // they are not a linked list, as no new elements are inserted in there
  this.corkedRequestsFree = new CorkedRequest(this);
  this.corkedRequestsFree.next = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

var Duplex;
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
        afterWrite(stream, state, finished, cb);
      }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    state.corkedRequestsFree = holder.next;
    holder.next = null;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
}).call(this,require('_process'))

},{"./_stream_duplex":110,"_process":92,"buffer":8,"core-util-is":12,"events":44,"inherits":62,"process-nextick-args":91,"util-deprecate":122}],115:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":111}],116:[function(require,module,exports){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":110,"./lib/_stream_passthrough.js":111,"./lib/_stream_readable.js":112,"./lib/_stream_transform.js":113,"./lib/_stream_writable.js":114}],117:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":113}],118:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":114}],119:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":8}],120:[function(require,module,exports){
var cpjax = require('cpjax'),
    iconCache = {};

module.exports = function(options){

    if(!options){
        throw 'iconComponent must be initialised with options';
    }
    if(!options.resolvePath){
        throw 'iconComponent must be passed a resolvePath function in options';
    }

    return function(fastn, component, type, settings, children){
        settings.tagName = 'i';

        component.extend('_generic', settings, children);

        function setImage(svg){
            if(!component.element){ // Componant has been destroyed
                return;
            }

            component.element.innerHTML = svg;
        }

        function updateName(){
            var name = component.name();

            if(!component.element || !name){
                return;
            }

            var path = options.resolvePath(name);

            if(path in iconCache){
                if(typeof iconCache[path] === 'function'){
                    iconCache[path](setImage);
                }else{
                    setImage(iconCache[path]);
                }
                return;
            }

            iconCache[path] = function(callback){
                iconCache[path].callbacks.push(callback);
            };
            iconCache[path].callbacks = [];
            iconCache[path](setImage);

            cpjax(options.resolvePath(name), function(error, svg){
                if(error){
                    setImage(null);
                    return;
                }

                iconCache[path].callbacks.forEach(function(callback){
                    callback(svg);
                });

                iconCache[path] = svg;
            });
        }

        component.setProperty('name', fastn.property('', updateName));

        return component;
    };
};

module.exports.expectedComponents = ['_generic'];
},{"cpjax":13}],121:[function(require,module,exports){
(function (Buffer){
/**
 * Convert a typed array to a Buffer without a copy
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install typedarray-to-buffer`
 */

module.exports = function (arr) {
  if (typeof Buffer._augment === 'function' && Buffer.TYPED_ARRAY_SUPPORT) {
    // If `Buffer` is from the `buffer` module and this browser supports typed arrays,
    // then augment it with all the `Buffer` methods.
    return Buffer._augment(arr)
  } else {
    // Otherwise, fallback to creating a `Buffer` with a copy.
    return new Buffer(arr)
  }
}

}).call(this,require("buffer").Buffer)

},{"buffer":8}],122:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],123:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],124:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":123,"_process":92,"inherits":62}],125:[function(require,module,exports){
var clone = require('clone'),
    deepEqual = require('deep-equal');

function keysAreDifferent(keys1, keys2){
    if(keys1 === keys2){
        return;
    }
    if(!keys1 || !keys2 || keys1.length !== keys2.length){
        return true;
    }
    for(var i = 0; i < keys1.length; i++){
        if(!~keys2.indexOf(keys1[i])){
            return true;
        }
    }
}

function getKeys(value){
    if(!value || typeof value !== 'object'){
        return;
    }

    return Object.keys(value);
}

function WhatChanged(value, changesToTrack){
    this._changesToTrack = {};

    if(changesToTrack == null){
        changesToTrack = 'value type keys structure reference';
    }

    if(typeof changesToTrack !== 'string'){
        throw 'changesToTrack must be of type string';
    }

    changesToTrack = changesToTrack.split(' ');

    for (var i = 0; i < changesToTrack.length; i++) {
        this._changesToTrack[changesToTrack[i]] = true;
    };

    this.update(value);
}
WhatChanged.prototype.update = function(value){
    var result = {},
        changesToTrack = this._changesToTrack,
        newKeys = getKeys(value);

    if('value' in changesToTrack && value+'' !== this._lastReference+''){
        result.value = true;
    }
    if(
        'type' in changesToTrack && typeof value !== typeof this._lastValue ||
        (value === null || this._lastValue === null) && this.value !== this._lastValue // typeof null === 'object'
    ){
        result.type = true;
    }
    if('keys' in changesToTrack && keysAreDifferent(this._lastKeys, getKeys(value))){
        result.keys = true;
    }

    if(value !== null && typeof value === 'object' || typeof value === 'function'){
        var lastValue = this._lastValue;

        if('shallowStructure' in changesToTrack && (!lastValue || typeof lastValue !== 'object' || Object.keys(value).some(function(key, index){
            return value[key] !== lastValue[key];
        }))){
            result.shallowStructure = true;
        }
        if('structure' in changesToTrack && !deepEqual(value, lastValue)){
            result.structure = true;
        }
        if('reference' in changesToTrack && value !== this._lastReference){
            result.reference = true;
        }
    }

    this._lastValue = 'structure' in changesToTrack ? clone(value) : 'shallowStructure' in changesToTrack ? clone(value, true, 1): value;
    this._lastReference = value;
    this._lastKeys = newKeys;

    return result;
};

module.exports = WhatChanged;
},{"clone":11,"deep-equal":126}],126:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":127,"./lib/keys.js":128}],127:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],128:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],129:[function(require,module,exports){
/**
  ## range

  Create an array of elements from x -> y (inclusive)

  <<< examples/range.js

**/
module.exports = function(start) {
  // default the start to 0
  start = start || 0;

  function rangeTo(end) {
    var x = start;
    var items = [];
    var counter = 0;

    while (x <= end) {
      items[counter++] = x++;
    }

    return items;
  }

  return arguments[1] !== undefined ? rangeTo(arguments[1]) : rangeTo;
};
},{}],130:[function(require,module,exports){
/**
  ## times

  Create an element of arrays that can be iterated over n times:

  <<< examples/times.js

**/

module.exports = require('./range')(1);

},{"./range":129}],131:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],132:[function(require,module,exports){
var createActivityRouter = require("activity-router"),
    routes = require("./routes"),
    fastn = require("../../fastn");

var activityRouter = createActivityRouter(routes),
    activitiesModel =  new fastn.Model({
        activities: []
    }),
    activitiesBinding = fastn.binding('activities|*').attach(activitiesModel);

function updateInfo(route){
    fastn.Model.set(route, '_info', activityRouter.router.info(route.name));
}

activitiesModel.on('.|**', function(activityData){
    // console.log('activitiesModel: ',activityData);
});

// Change the default home page name to be 'index'
activityRouter.homeRoute = 'home';

activityRouter.on('add', function(activity, index){
    updateInfo(activity);
    activitiesModel.push('activities', activity);
});

activityRouter.on('update', function(activity, index){
    activitiesModel.update('activities.' + index, activity);
});

activityRouter.on('replace', function(activity, index){
    updateInfo(activity);
    activitiesModel.set('activities.' + index, activity);
});

activityRouter.on('remove', function(activity, index){
    activitiesModel.remove('activities', index);
});

activityRouter.binding = activitiesBinding;

activityRouter.init();

module.exports = activityRouter;
},{"../../fastn":141,"./routes":133,"activity-router":5}],133:[function(require,module,exports){
module.exports = {
    home:{
         _url: '/',
         _title: 'Home'
    },
    doc:{
         _url: 'doc/{_id}',
         _title: 'Document'
    },
    editor:{
         _url: '{_id}/editor',
         _title: 'Editor'
    }
};
},{}],134:[function(require,module,exports){
var fastn = require("../fastn"),
    marked = require("marked-ast"),
    toMarkdown = require("marked-ast-markdown"),
    debug = require("debug")('tutorme:app.doc'),
    session = require("./session"),
    db = require("./localPersistence"),
    localSettings = {},
    cpjax = require("cpjax"),
    offline = true,
    docModel = new fastn.Model({
        docs : [],
        currentHeadings: []
    });

// debugging
docModel.on('currentDoc|**', function(data){
    console.log('docModel change',data);
});

function getDocument(id, callback){
    if (offline){
        db.getDocuments( localSettings, function(error, data){ 
            docModel.set('currentDoc', JSON.parse(data.value));
        });
    }
    else {
        cpjax({
            url:'/documents/' + id,
            dataType: 'json',
            headers:{
                authorization: session.getToken()
            }
        }, callback);
    }    
}

function getDocuments(){
    if (offline){
        db.getDocuments( localSettings, function(error, data){ 
            docModel.push('docs', JSON.parse(data.value));
        });
    }
    else { 
        cpjax({
            url:'/documents',
            dataType: 'json',
            headers:{
                authorization: session.getToken()
            }
        }, function(error, data){
            if(error){
                return;
            }
            docModel.set('documents', data)
        });
    }
}

getDocuments();

function createDocument(callback){
    console.log('getData',getData());
    cpjax({
        url:'/documents',
        method: 'POST',
        dataType: 'json',
        data: getData(),
        headers:{
            authorization: session.getToken()
        }
    }, callback);
}

function save (action, callback){
    if ( action == 'create' ) { 
        createDocument(function(error, document){
            console.log('created Document.id',document.id);
            callback( null, document.id);
        })
    } else if (action == 'update'){
        updateDocument( function(error, document){
            console.log('updated Document.id',document.id);
            callback( null, document.id);
        })  
    } 
}


// var content = fs.readFileSync(__dirname + '/test.md', 'utf8');

function updateDoc(content){
    var ast = marked.parse(content);
    

    docModel.update('currentDoc.ast', ast);
}

function getCurrentDoc(){
    return toMarkdown(docModel.get('currentDoc.ast'));
}


function clearCurrentDoc(){
    docModel.set('currentHeadings', []);
    docModel.set('currentCitations', []);
    docModel.set('currentDoc', []);
}

function setCurrentDoc(id){
    


    docModel.set('currentHeadings', []);
    docModel.set('currentCitations', []);
    // docModel.set('references', []);
    
    if (offline){
        db.getDocument( id, function(error, data){ 
            var dat = JSON.parse(data);
            var ast = [];
            ast = dat.ast;
            for ( i in ast ){
                if ( ast[i]['type'] == 'heading' && ast[i]['level'] == 1 ){
                    console.log('heading',ast[i], ast[i]['type']);
                    var heading = ast[i]['text'][0];
                    docModel.push('currentHeadings', heading );        
                }
                if ( ast[i]['type'] == 'cite' ){
                    var citation = ast[i]['text'][1][0]['text'];
                    // console.log('cite',ast[i]['text'][1][0]['text']);
                    docModel.push('currentCitations', citation );        
                }
                
                
            }
            docModel.set('currentDoc', JSON.parse(data));
        });
    }
}



// var ast = marked.parse(content);
// var html = marked.render(ast);

// con

// // console.log('html', html);
// console.log('ast', ast);

module.exports = {
    docModel : docModel,
    getCurrentDoc: getCurrentDoc,
    setCurrentDoc: setCurrentDoc,
    clearCurrentDoc:clearCurrentDoc
}
},{"../fastn":141,"./localPersistence":136,"./session":139,"cpjax":13,"debug":17,"marked-ast":85,"marked-ast-markdown":83}],135:[function(require,module,exports){
module.exports = {
    doc : require("./doc.js"),
    time : require("./time.js"),
    activityRouter : require("./activityRouter")
    // ,
    // localPersistence : require('./localPersistence')
}
},{"./activityRouter":132,"./doc.js":134,"./time.js":140}],136:[function(require,module,exports){
var levelup = require("levelup"),
    leveljs = require("level-js"),
    db = levelup('theses', { db: leveljs } ) ;
    refDB = levelup('references', { db: leveljs } ) ;

var ref = require("./references.json");

refDB.batch(ref, function (error, response) {
   if (error) {console.log('done refDB',error);}
})

var data = require("./setupData");

db.batch(data, function (error, response) {
   if (error) {console.log('done',data);}
})

function getDocument( id, callback ){ 
    db.get(id, callback);
};

function getDocuments( settings, callback ){ 
    db.createReadStream({'limit': 20})
        .on('data', function ( data ){
            callback(null,data);
        })
        .on('error', function (err) {
            callback(err,null);
        })
        .on('end', function () {});
};

function getReferences( settings, callback  ){ 
    refDB.createReadStream({'limit': 100})
        .on('data', function ( data ){
            // console.log(data)
            callback(null,data);
        })
        .on('error', function (err) {
            
        })
        .on('end', function () {});
};



module.exports = {
  getDocument: getDocument,
  getDocuments: getDocuments,
  getReferences: getReferences
}
},{"./references.json":137,"./setupData":138,"level-js":70,"levelup":79}],137:[function(require,module,exports){
module.exports=[{"key":"http://zotero.org/users/39885/items/22BVFR8Q","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/22BVFR8Q","type":"book","title":"Systems engineering with SysML/UML: modeling, analysis, design","publisher":"Morgan Kaufmann","number-of-pages":"320","source":"Google Books","abstract":"UML, the Universal Modeling Language, was the first language designed to fulfill the requirement for \"universality.\" However, it is a software-specific language, and does not support the needs of engineers designing from the broader systems-based perspective. Therefore, SysML was created. It has been steadily gaining popularity, and many companies, especially in the heavily-regulated Defense, Automotive, Aerospace, Medical Device and Telecomms industries, are already using SysML, or are plannning to switch over to it in the near future. However, little information is currently available on the market regarding SysML. Its use is just on the crest of becoming a widespread phenomenon, and so thousands of software engineers are now beginning to look for training and resources. The proposed book will provide an introduction to SysML, and instruction on how to implement it, for all these new users. *The first available book on SysML in English *Insider information! The author is a member of the SysML working group and has written sections of the specification *Special focus comparing SysML and UML, and explaining how both can work together","ISBN":"978-0-12-374274-2","shortTitle":"Systems engineering with SysML/UML","language":"en","author":[{"family":"Weilkiens","given":"Tim"}],"issued":{"date-parts":[["2007"]]}}},{"key":"http://zotero.org/users/39885/items/23C6DXD8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/23C6DXD8","type":"article-journal","title":"A tool for use in making land management decisions involving tidal Marshland","container-title":"Coastal Zone Management Journal","page":"65-74","volume":"1","issue":"1","source":"Taylor and Francis+NEJM","abstract":"This paper outlines a rationale and technique for putting a cash value on the ecological values of a tidal marsh. The summation of calculated values for individual components of the system approaches a total “life support”; value based on the primary productivity of the marsh. Using this value, an analysis is made of the cost of highway construction through coastal marshes which takes into consideration the marshland destroyed. The analysis suggests that, except for cases of very shallow spoil removal, bridging is cheaper and ecologically preferable to filled roadway construction.","URL":"http://dx.doi.org/10.1080/08920757309361667","DOI":"10.1080/08920757309361667","ISSN":"0090-8339","author":[{"family":"Pope","given":"R. M."},{"family":"Gosselink","given":"James G."}],"issued":{"date-parts":[["1973",9,1]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/23CXZJWB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/23CXZJWB","type":"webpage","title":"Corrado Giannantoni: A Modern-Day Newton","URL":"http://findarticles.com/p/articles/mi_qa5457/is_200804/ai_n25500186?tag=content;col1","shortTitle":"Corrado Giannantoni","author":[{"family":"Adolphson","given":"Donald L"}],"issued":{"date-parts":[["2008",4,1]]},"accessed":{"date-parts":[["2008",7,10]]}}},{"key":"http://zotero.org/users/39885/items/244PTSS7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/244PTSS7","type":"article-journal","title":"A quantitative description of membrane current and its application to conduction and excitation in nerve","container-title":"The Journal of Physiology","page":"500-544","volume":"117","issue":"4","source":"PubMed Central","URL":"http://www.ncbi.nlm.nih.gov/pmc/articles/PMC1392413/","ISSN":"0022-3751","note":"PMID: 12991237\nPMCID: PMC1392413","journalAbbreviation":"J Physiol","author":[{"family":"Hodgkin","given":"A. L."},{"family":"Huxley","given":"A. F."}],"issued":{"date-parts":[["1952",8,28]]},"accessed":{"date-parts":[["2016",2,24]]},"PMID":"12991237","PMCID":"PMC1392413"}},{"key":"http://zotero.org/users/39885/items/25GBJC6N","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/25GBJC6N","type":"webpage","title":"Cutting Green Tape Streamlining Major Oil and Gas Project Environmental Approvals Processes in Australia.","container-title":"AUSTRALIAN PETROLEUM PRODUCERS & EXPLORERS ASSOCIATION LIMITED","URL":"http://www.appea.com.au/tags/green-tape/","author":[{"literal":"APPEA"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",11,10]]}}},{"key":"http://zotero.org/users/39885/items/26UPGW72","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/26UPGW72","type":"article-journal","title":"Simulation of the water cycle in Biosphere 2","container-title":"Ecological Engineering","page":"301-311","volume":"13","issue":"1–4","source":"ScienceDirect","abstract":"The budget of water flows and storages in Biosphere 2 was drawn in energy systems language to generate equations for a simple simulation model. Using data by others for calibration and a seasonal variation of sunlight, main features of the seasonal water cycle were analyzed. The model result coincided with the observed patterns of seasonal variation in the water level of primary storage. Primary storage was more affected by changes in water management, while other storages were mostly controlled by sunlight energy. A stable isotope model of water species simulated the trends in isotopic fractionation in agreement with observations. Isotopic compositions of the reservoirs reached steady state and were close to the measured values.","URL":"http://www.sciencedirect.com/science/article/pii/S0925857498001062","DOI":"10.1016/S0925-8574(98)00106-2","ISSN":"0925-8574","journalAbbreviation":"Ecological Engineering","author":[{"family":"Kang","given":"Daeseok"}],"issued":{"date-parts":[["1999",6]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/27EPHPSN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/27EPHPSN","type":"article-journal","title":"Consequences of small storage capacity in nannoplankton pertinent to measurelncnt of primary production in tropical waters","container-title":"J. Marine Res","page":"191-198","volume":"21","call-number":"0000","author":[{"family":"Odum","given":"HT"},{"family":"Beyers","given":"RJ"},{"family":"Armstrong","given":"NE"}],"issued":{"date-parts":[["1963"]]}}},{"key":"http://zotero.org/users/39885/items/295NRBGK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/295NRBGK","type":"interview","title":"On the future of hydrology","author":[{"family":"Heweston","given":"Peter"}],"issued":{"date-parts":[["2010"]]}}},{"key":"http://zotero.org/users/39885/items/29T5GS58","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/29T5GS58","type":"book","title":"Leibniz and the natural world: activity, passivity, and corporeal substances in Leibniz's philosophy","collection-title":"The new synthese historical library","publisher":"Springer","publisher-place":"Dordrecht, the Netherlands","volume":"58.","number-of-pages":"1 online resource (xiii, 293 p.)","source":"UQ Library Search, Summon 2.0","event-place":"Dordrecht, the Netherlands","abstract":"In the present book, Pauline Phemister argues against traditional Anglo-American interpretations of Leibniz as an idealist who conceives ultimate reality as a plurality of mind-like immaterial beings and for whom physical bodies are ultimately unreal and our perceptions of them illusory. Re-reading the texts without the prior assumption of idealism allows the more material aspects of Leibniz's metaphysics to emerge. Leibniz is found to advance a synthesis of idealism and materialism. His ontology posits indivisible, living, animal-like corporeal substances as the real metaphysical constituents of the universe; his epistemology combines sense-experience and reason; and his ethics fuses confused perceptions and insensible appetites with distinct perceptions and rational choice. In the light of his sustained commitment to the reality of bodies, Phemister re-examines his dynamics, the doctrine of pre-established harmony and his views on freedom. The image of Leibniz as a rationalist philosopher who values activity and reason over passivity and sense-experience is replaced by the one of a philosopher who recognises that, in the created world, there can only be activity if there is also passivity; minds, souls and forms if there is also matter; good if there is evil; perfection if there is imperfection.","URL":"http://ezproxy.library.uq.edu.au/login?url=http://dx.doi.org/10.1007/1-4020-3401-6","ISBN":"978-1-4020-3401-5","call-number":"B2598 .P54 2005eb","shortTitle":"Leibniz and the natural world","language":"English","author":[{"family":"Phemister","given":"Pauline"}],"issued":{"date-parts":[["2005"]]},"accessed":{"date-parts":[["2016",2,3]]}}},{"key":"http://zotero.org/users/39885/items/2DTD5MTK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2DTD5MTK","type":"chapter","title":"Enmergy in ecosystems","container-title":"Environmental Monographs and Symposia","publisher":"John Wiley","page":"337-369","call-number":"0047","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1986"]]}}},{"key":"http://zotero.org/users/39885/items/2EQAEUNX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2EQAEUNX","type":"article-journal","title":"The Dynamic Interactions among Beliefs, Role Metaphors, and Teaching Practices: A Case Study of Teacher Change.","container-title":"Science Education","page":"185-99","volume":"75","issue":"2","source":"ERIC","ISSN":"ISSN-0036-8326","call-number":"0160","shortTitle":"The Dynamic Interactions among Beliefs, Role Metaphors, and Teaching Practices","journalAbbreviation":"Science Education","author":[{"family":"Briscoe","given":"Carol"}],"issued":{"date-parts":[["1991"]]}}},{"key":"http://zotero.org/users/39885/items/2F3MRZJ4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2F3MRZJ4","type":"book","title":"Perl best practices","publisher":"O'Reilly","publisher-place":"Sebastopol  CA","edition":"1st ed.","event-place":"Sebastopol  CA","ISBN":"978-0-596-00173-5","author":[{"family":"Conway","given":"Damian"}],"issued":{"date-parts":[["2005"]]}}},{"key":"http://zotero.org/users/39885/items/2G5Z9E37","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2G5Z9E37","type":"book","title":"The Tools of Regulation","publisher":"Federation Press","source":"arrow.monash.edu.au","abstract":"1 ed.","URL":"http://arrow.monash.edu.au/vital/access/manager/Repository/monash:68361","ISBN":"978-1-86287-802-0","language":"eng","author":[{"family":"Freiberg","given":"Arie"}],"issued":{"date-parts":[["2010"]]},"accessed":{"date-parts":[["2015",10,7]]}}},{"key":"http://zotero.org/users/39885/items/2GIACRDH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2GIACRDH","type":"article-journal","title":"Universally valid reformulation of the Heisenberg uncertainty principle on noise and disturbance in measurement","container-title":"Physical Review A","page":"042105","volume":"67","issue":"4","source":"APS","abstract":"The Heisenberg uncertainty principle states that the product of the noise in a position measurement and the momentum disturbance caused by that measurement should be no less than the limit set by Planck’s constant ħ/2 as demonstrated by Heisenberg’s thought experiment using a γ-ray microscope. Here it is shown that this common assumption is not universally true: a universally valid trade-off relation between the noise and the disturbance has an additional correlation term, which is redundant when the intervention brought by the measurement is independent of the measured object, but which allows the noise-disturbance product much below Planck’s constant when the intervention is dependent. A model of measuring interaction with dependent intervention shows that Heisenberg’s lower bound for the noise-disturbance product is violated even by a nearly nondisturbing precise position measurement. An experimental implementation is also proposed to realize the above model in the context of optical quadrature measurement with currently available linear optical devices.","URL":"http://link.aps.org/doi/10.1103/PhysRevA.67.042105","DOI":"10.1103/PhysRevA.67.042105","journalAbbreviation":"Phys. Rev. A","author":[{"family":"Ozawa","given":"Masanao"}],"issued":{"date-parts":[["2003",4,11]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/2HQW6ZT4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2HQW6ZT4","type":"book","title":"Keywords: A Vocabulary of Culture and Society","publisher":"fontana","edition":"Rev Sub","source":"Amazon.com","ISBN":"0-19-520469-7","call-number":"2984","shortTitle":"Keywords","author":[{"family":"Williams","given":"Raymond"}],"issued":{"date-parts":[["1976"]]}}},{"key":"http://zotero.org/users/39885/items/2IDBEASJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2IDBEASJ","type":"article-journal","title":"Perception of Risk","container-title":"Science","collection-title":"New Series","page":"280-285","volume":"236","issue":"4799","source":"JSTOR","abstract":"Studies of risk perception examine the judgments people make when they are asked to characterize and evaluate hazardous activities and technologies. This research aims to aid risk analysis and policy-making by (i) providing a basis for understanding and anticipating public responses to hazards and (ii) improving the communication of risk information among lay people, technical experts, and decision-makers. This work assumes that those who promote and regulate health and safety need to understand how people think about and respond to risk. Without such understanding, well-intended policies may be ineffective.","URL":"http://www.jstor.org/stable/1698637","ISSN":"0036-8075","journalAbbreviation":"Science","author":[{"family":"Slovic","given":"Paul"}],"issued":{"date-parts":[["1987",4,17]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/2IWHF938","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2IWHF938","type":"article-journal","title":"Emergy Synthesis 8 ∼ Emergy and environmental accounting: Theories, applications, and methodologies","container-title":"Ecological Modelling","collection-title":"Emergy Synthesis 8 ∼ Emergy and Environmental Accounting: Theories, Applications, and Methodologies","page":"1-3","volume":"315","source":"ScienceDirect","URL":"http://www.sciencedirect.com/science/article/pii/S0304380015003816","DOI":"10.1016/j.ecolmodel.2015.08.018","ISSN":"0304-3800","shortTitle":"Emergy Synthesis 8 ∼ Emergy and environmental accounting","journalAbbreviation":"Ecological Modelling","author":[{"family":"Brown","given":"Mark T."},{"family":"Campbell","given":"Daniel E."},{"family":"Tilley","given":"David R."}],"issued":{"date-parts":[["2015",11,10]]},"accessed":{"date-parts":[["2015",12,15]]}}},{"key":"http://zotero.org/users/39885/items/2IXM8RHR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2IXM8RHR","type":"post-weblog","title":"Gut: Hosted Open Data Filet Knives","container-title":"Open Web programmer","URL":"http://maxogden.com/gut-hosted-open-data-filets.html","shortTitle":"HTTP Unix pipes for Open Data","author":[{"family":"Ogden","given":"Max"}],"accessed":{"date-parts":[["2015",6,22]]}}},{"key":"http://zotero.org/users/39885/items/2M5JAXTG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2M5JAXTG","type":"article-journal","title":"'Potatoes Made of Oil': Eugene and Howard Odum and the Origins and Limits of American Agroecology","container-title":"Environment and History","page":"209-238","volume":"3","issue":"2","call-number":"0006","shortTitle":"'Potatoes Made of Oil'","author":[{"family":"Madison","given":"M. G."}],"issued":{"date-parts":[["1997"]]}}},{"key":"http://zotero.org/users/39885/items/2MTDP4F5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2MTDP4F5","type":"paper-conference","title":"Toward the sensor network macroscope","container-title":"Proceedings of the 6th ACM international symposium on Mobile ad hoc networking and computing  - MobiHoc '05","publisher-place":"Urbana-Champaign, IL, USA","page":"1-1","source":"CrossRef","event":"the 6th ACM international symposium","event-place":"Urbana-Champaign, IL, USA","URL":"http://portal.acm.org/citation.cfm?doid=1062689.1062690","DOI":"10.1145/1062689.1062690","author":[{"family":"Culler","given":"David E."}],"issued":{"date-parts":[["2005"]]},"accessed":{"date-parts":[["2011",7,4]]}}},{"key":"http://zotero.org/users/39885/items/2RHE48Z5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2RHE48Z5","type":"book","title":"TAFE accounting : to trial balance","publisher":"Thomson","publisher-place":"Southbank  Vic.","edition":"8th ed.","event-place":"Southbank  Vic.","ISBN":"978-0-17-010828-7","author":[{"family":"Yates","given":"Lindsay"}],"issued":{"date-parts":[["2003"]]}}},{"key":"http://zotero.org/users/39885/items/2SGQN8QN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2SGQN8QN","type":"book","title":"Circuit Analysis Demystified","publisher":"McGraw-Hill Education","publisher-place":"New York","number-of-pages":"288","edition":"1 edition","source":"Amazon","event-place":"New York","ISBN":"978-0-07-148898-3","language":"English","issued":{"date-parts":[["2007",11,26]]}}},{"key":"http://zotero.org/users/39885/items/2SNHN3BJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2SNHN3BJ","type":"book","title":"Risk - A Multidisciplinary Introduction","publisher":"Springer","publisher-place":"Cham ; New York","number-of-pages":"476","edition":"2014 edition","source":"Amazon.com","event-place":"Cham ; New York","abstract":"This is a unique book addressing the integration of risk methodology from various fields. It will stimulate intellectual debate and communication across disciplines, promote better risk management practices and contribute to the development of risk management methodologies. Individual chapters explain fundamental risk models and measurement, and address risk and security issues from diverse areas such as finance and insurance, the health sciences, life sciences, engineering and information science. Integrated Risk Sciences is an emerging discipline that considers risks in different fields, aiming at a common language, and at sharing and improving methods developed in different fields. Readers should have a Bachelor degree and have taken at least one basic university course in statistics and probability. The main goal of the book is to provide basic knowledge on risk and security in a common language; the authors have taken particular care to ensure that all content can readily be understood by doctoral students and researchers across disciplines. Each chapter provides simple case studies and examples, open research questions and discussion points, and a selected bibliography inviting readers to further study.","ISBN":"978-3-319-04485-9","language":"English","editor":[{"family":"Klüppelberg","given":"Claudia"},{"family":"Straub","given":"Daniel"},{"family":"Welpe","given":"Isabell M."}],"issued":{"date-parts":[["2014",2,28]]}}},{"key":"http://zotero.org/users/39885/items/2SZJMDWJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2SZJMDWJ","type":"webpage","title":"Using Economic Capital To Determine Risk","container-title":"Investopedia","abstract":"Discover how banks and financial institutions use economic capital to enhance risk management.","URL":"http://www.investopedia.com/articles/economics/08/economic-capital.asp","author":[{"family":"Investopedia","given":""}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",8,27]]}}},{"key":"http://zotero.org/users/39885/items/2TVPZUJD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2TVPZUJD","type":"article-journal","title":"Introduction to Special Issue on New Studies in EROI (Energy Return on Investment)","container-title":"Sustainability","page":"1773-1777","volume":"3","source":"CrossRef","URL":"http://www.mdpi.com/2071-1050/3/10/1773/","DOI":"10.3390/su3101773","ISSN":"2071-1050","author":[{"family":"Hall","given":"Charles A.S."}],"issued":{"date-parts":[["2011",10,7]]},"accessed":{"date-parts":[["2011",10,14]]}}},{"key":"http://zotero.org/users/39885/items/2V27G3VQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2V27G3VQ","type":"article","title":"Groundwater risks associated with coal seam gas development in the Surat and southern Bowen basins - Final Report","publisher":"WorleyParsons Resource & Energy","URL":"https://www.dnrm.qld.gov.au/__data/assets/pdf_file/0013/106015/act-5-groundwater-risks-report-text.pdf","author":[{"family":"Beckers","given":"Jos"},{"family":"Cook","given":"Troy"},{"family":"Butcher","given":"Adam"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",3,10]]}}},{"key":"http://zotero.org/users/39885/items/2VAXNNA9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2VAXNNA9","type":"article-journal","title":"Hydrogeologic electric analog computers","container-title":"Hydrology Division, American Association of Civil Engineers","page":"67–91","volume":"89","source":"Google Scholar","author":[{"family":"Walton","given":"William C."},{"family":"Prickett","given":"Thomas A."}],"issued":{"date-parts":[["1963"]]}}},{"key":"http://zotero.org/users/39885/items/2W6EINVD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2W6EINVD","type":"article-journal","title":"A Rigourous Mathematical Framework for Computing a Sustainability Ratio: the Emergy","container-title":"Journal of Environmental Informatics","page":"75-89","source":"CrossRef","URL":"http://www.iseis.org/jei/abstract.asp?no=201200222","DOI":"10.3808/jei.201200222","ISSN":"17262135, 16848799","shortTitle":"A Rigourous Mathematical Framework for Computing a Sustainability Ratio","author":[{"family":"Corre","given":"O. Le"}],"issued":{"date-parts":[["2012",12]]},"accessed":{"date-parts":[["2015",2,1]]}}},{"key":"http://zotero.org/users/39885/items/2W8FZH63","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2W8FZH63","type":"article","title":"Onshore Oil and Gas Guiding Principles","publisher":"Northern Territory Government","URL":"https://onshoregas.nt.gov.au/__data/assets/pdf_file/0008/181745/Oil-and-Gas-guiding-principles-booklet.pdf","author":[{"family":"NTG","given":""}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",12,11]]}}},{"key":"http://zotero.org/users/39885/items/2WZ3D2ZI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2WZ3D2ZI","type":"chapter","title":"Business Intelligence and Enterprise Interoperability: Literature Review","container-title":"Enterprise Interoperability","publisher":"John Wiley & Sons, Inc.","page":"385-394","source":"Wiley Online Library","abstract":"The main purpose of this chapter is to present the wide range of business purposes and enterprise interoperability approaches as reported in recent Business Intelligence (BI) literature. The collected articles are from international databases including IEEE conference, Proquest, Ebscohost, Emerald and Science Direct, published from 2000 to 2011. The main findings suggest that achieving effective and efficient decision-making is the most common business purpose. This is associated with the wide use of BI to extract information from ERP systems. Extracting, Transformation and Loading (ETL) is the most used technology indicating its crucial role in realizing integration. Data mining is the most mentioned approach within BI projects which may be related to it being the earlier name commonly used to represent BI. The chapter provides a useful dataset to discuss future research topics in the Enterprise Interoperability community.\n\n\nControlled Vocabulary Terms\n\ncompetitive intelligence; interoperability","URL":"http://onlinelibrary.wiley.com/doi/10.1002/9781118561942.ch55/summary","ISBN":"978-1-118-56194-2","shortTitle":"Business Intelligence and Enterprise Interoperability","language":"en","author":[{"family":"Binobaid","given":"S."},{"family":"Fan","given":"I."}],"editor":[{"family":"Zelm","given":"rtin"},{"family":"Sanchis","given":"Raquel"},{"family":"Poler","given":"Raul"},{"family":"Doumeingts","given":"Guy"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/2X3JKUIG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2X3JKUIG","type":"book","title":"The geometry of René Descartes : [with a facsimile of the first edition]","publisher":"Dover Publications","publisher-place":"New York","event-place":"New York","ISBN":"978-0-486-60068-0","call-number":"0039","author":[{"family":"Descartes","given":"René"}],"issued":{"date-parts":[["1954"]]}}},{"key":"http://zotero.org/users/39885/items/2ZJUA9NA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/2ZJUA9NA","type":"article-journal","title":"European soil sampling guidelines for soil pollution studies","container-title":"Science of The Total Environment","page":"51-62","volume":"264","issue":"1–2","source":"ScienceDirect","abstract":"The soil sampling guidelines used in European countries (ESSG), as kindly provided by the national institutions which participated in the project, have been recorded, studied, evaluated and presented in this paper. The aim has been to ascertain what soil sampling guidelines exist in Europe; to detect similarities and differences (comparable results), advantages and deficiencies; to identify incompatible strategies and evaluate how methodologies might affect data quality; to investigate sources of deviations or uncertainties; to improve comparability and representativeness of soil sampling; to investigate the need for harmonised sampling guidelines; and to develop suggestions for standard operating procedures (SOP). Soil sampling guidelines throughout Europe differ as to whether they are applied by law, or used throughout the country. In some countries these are ISO/DIS related or based (ISO 10381-1, 1995; ISO 10381-2, 1995), or are produced by a scientific society or a standardisation body. As far as sampling strategy is concerned, not all sampling guidelines clearly describe the sampling scale, the specifications for contamination risk precautions, the sampling plan and protocol structure and the pre-analysis treatment of the soil samples. The purpose for sampling, in descending order of frequency, is soil pollution, soil fertilisation, general soil monitoring, background risk assessment, or else it is not specified. The majority of countries do not sample the top organic matter separately. Sampling depth is either related to the morphogenetic horizon or to ad hoc sampling depth, which is not specified in all cases. They suggest mass- and volume-related soil sampling, while the sampling pattern is not presented in all national guidelines. The criteria for area, site, unit, sub-unit, and point selection are mainly based on pedology and land use, following the history and pre-screening information or geology, or is site related. Some guidelines suggest the division of sampling units into sub-units. The sampling pattern is mainly grid sampling, grid and random sampling, or not mentioned. Sampling density inside the sampling unit either varies greatly or it is not mentioned, while the size of the sampling unit varies widely. Most guidelines require the collection of composite instead of simple samples, while some prefer sampling soil profiles. In the European SSG many technical details and steps are either not defined or vary, while in the pre-analysis treatment quality assurance (QA) and quality control (QC) approaches are used either both in the lab and in the field, or only in the field, or are not mentioned. The common points and the points in which harmonisation could be started or achieved are discussed.","URL":"http://www.sciencedirect.com/science/article/pii/S0048969700006112","DOI":"10.1016/S0048-9697(00)00611-2","ISSN":"0048-9697","journalAbbreviation":"Science of The Total Environment","author":[{"family":"Theocharopoulos","given":"S. P"},{"family":"Wagner","given":"G"},{"family":"Sprengart","given":"J"},{"family":"Mohr","given":"M. -E"},{"family":"Desaules","given":"A"},{"family":"Muntau","given":"H"},{"family":"Christou","given":"M"},{"family":"Quevauviller","given":"P"}],"issued":{"date-parts":[["2001",1,8]]},"accessed":{"date-parts":[["2015",9,20]]}}},{"key":"http://zotero.org/users/39885/items/32AJVBWI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/32AJVBWI","type":"book","title":"Steps to an Ecology of Mind: Collected Essays in Anthropology, Psychiatry, Evolution, and Epistemology 1st (first) edition","source":"Amazon","shortTitle":"Steps to an Ecology of Mind","author":[{"family":"Bateson","given":"Gregory"}]}},{"key":"http://zotero.org/users/39885/items/348ACXVB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/348ACXVB","type":"book","title":"Introduction to C++ for Financial Engineers: An Object-Oriented Approach","publisher":"Wiley","publisher-place":"Chichester, England ; Hoboken, NJ","number-of-pages":"438","edition":"1 edition","source":"Amazon.com","event-place":"Chichester, England ; Hoboken, NJ","abstract":"This book introduces the reader to the C++ programming language and how to use it to write applications in quantitative finance (QF) and related areas. No previous knowledge of C or C++ is required -- experience with VBA, Matlab or other programming language is sufficient. The book adopts an incremental approach; starting from basic principles then moving on to advanced complex techniques and then to real-life applications in financial engineering. There are five major parts in the book:C++ fundamentals and object-oriented thinking in QFAdvanced object-oriented features such as inheritance and polymorphismTemplate programming and the Standard Template Library (STL)An introduction to GOF design patterns and their applications in QF ApplicationsThe kinds of applications include binomial and trinomial methods, Monte Carlo simulation, advanced trees, partial differential equations and finite difference methods.This book includes a companion website with all source code and many useful C++ classes that you can use in your own applications. Examples, test cases and applications are directly relevant to QF.This book is the perfect companion to Daniel J. Duffy’s book Financial Instrument Pricing using C++ (Wiley 2004, 0470855096 / 9780470021620)","ISBN":"978-0-470-01538-4","shortTitle":"Introduction to C++ for Financial Engineers","language":"English","author":[{"family":"Duffy","given":"Daniel J."}],"issued":{"date-parts":[["2006",12,14]]}}},{"key":"http://zotero.org/users/39885/items/34K5PAFB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/34K5PAFB","type":"article","title":"Submission on the Draft National Harmonised Regulatory Framework for Coal Seam Gas 2012","publisher":"Australian Network of Environmental Defender’s Offices","URL":"http://www.scer.gov.au/files/2013/03/ANEnviromentalDefendersOffice.pdf","author":[{"family":"ANEDO","given":"Australian Network of Environmental Defender’s Offices"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/377VHQJ3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/377VHQJ3","type":"book","title":"Heavy metals in the environment: using wetlands for their removal","publisher":"Lewis Publishers","number-of-pages":"344","source":"Google Books","abstract":"Much of the convenience of modern life resides in sheet metal, the cowling shield of most machines and appliances. However, the load that this takes off human shoulders has to be carried elsewhere, and the Earth has borne the burden. Many of us woke up to the environmental cost when over a century of industrialization finally surpassed the capacity of nature to assimilate it. International in scope, Heavy Metals in the Environment: Using Wetlands for Their Removal discusses wetland functions and heavy metal contamination. It addresses such questions as: Can systems powered by sunlight handle toxins more effectively than systems running on fossil fuel? At what scale and by what means do we define efficiency? These questions resonate increasingly with a number of global challenges. As inescapable as climate change, you can no longer avoid airborne toxins, acid rain, and polluted water by moving away from them. When the time comes to rely less on fossil fuel-based technology, how will we clean up the aftermath of toxic misadventures? Written by a leader in the growing field of ecological engineering, Heavy Metals in the Environment: Using Wetlands for Their Removal presents scientific studies that illustrate how natural systems use wetlands to adapt to changes in the ecosystem. It focuses primarily on lead, one of the first materials used by developing civilizations and a metal used heavily in the industrial era. The goal: to achieve a better understanding of how natural systems use wetlands to adapt to wastes.","ISBN":"978-1-56670-401-4","shortTitle":"Heavy metals in the environment","language":"en","author":[{"family":"Odum","given":"Howard Thomas"}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/37R5Q3T7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/37R5Q3T7","type":"article-journal","title":"The Fracking Revolution: Shale Gas as a Case Study in Innovation Policy","container-title":"Emory Law Journal","volume":"64","issue":"3","source":"Google Scholar","URL":"http://papers.ssrn.com/sol3/Papers.cfm?abstract_id=2548080","shortTitle":"The Fracking Revolution","author":[{"family":"Golden","given":"John M."},{"family":"Wiseman","given":"Hannah Jacobs"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",2,4]]}}},{"key":"http://zotero.org/users/39885/items/3BFVH787","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3BFVH787","type":"article-journal","title":"Bilirubin injury to neurons: Contribution of oxidative stress and rescue by glycoursodeoxycholic acid","container-title":"NeuroToxicology","page":"259-269","volume":"29","issue":"2","abstract":"It is well established that high levels of unconjugated bilirubin (UCB) can be toxic to the central nervous system, and oxidative stress is emerging as a relevant event in the mechanisms of UCB encephalopathy. In contrast, the hydrophilic bile acid, ursodeoxycholic acid (UDCA), has been reported as a cytoprotective and antioxidant molecule. In this study, we investigated if exposure of rat neurons in primary culture to clinically relevant concentrations of UCB leads to oxidative injury. The contribution of oxidative stress in UCB neurotoxicity was further investigated by examining whether the reduction of NO production by NAME, an inhibitor of nitric oxide synthase, prevents the disruption of the redox status and neuronal damage. Moreover, we evaluated the ability of glycoursodeoxycholic acid (GUDCA), the most relevant conjugated derivative in the serum of patients treated with UDCA, to abrogate the UCB-induced oxidative damage. Cultured rat neurons were incubated with 50 or 100 μM UCB in the presence of 100 μM human serum albumin, alone or in combination with 100 μM NAME or with 50 μM GUDCA, for 4 h at 37 °C. Protein carbonyls, 4-hydroxy-2-nonenal-protein adducts, intracellular glutathione content and cell death were determined. The results obtained showed that UCB induces protein oxidation and lipid peroxidation, while diminishes the thiol antioxidant defences, events that were correlated with the extent of cell death. Moreover, these events were counteracted by NAME and abrogated in the presence of GUDCA. Collectively, this study shows that oxidative stress is one of the pathways associated with neuronal viability impairment by UCB, and that GUDCA significantly prevents such effects from occurring. These findings corroborate the antioxidant properties of the bile acid and point to a new therapeutic approach for UCB-induced neurotoxicity due to oxidative stress. Keywords: Cell death; Glycoursodeoxycholic acid; Oxidative stress; Neurons; Unconjugated bilirubin","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6W81-4R5HNKR-2&_user=10&_rdoc=1&_fmt=&_orig=search&_sort=d&view=c&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=b75b5a6f59d15f77a30808bf94dda03d","DOI":"10.1016/j.neuro.2007.11.002","call-number":"0011","shortTitle":"Bilirubin injury to neurons","author":[{"family":"Brito","given":"Maria A."},{"family":"Lima","given":"Sílvia"},{"family":"Fern","given":"Adelaide"},{"family":"es","given":""},{"family":"Falcão","given":"Ana S."},{"family":"Silva","given":"Rui F.M."},{"family":"Butterfield","given":"D. Allan"},{"family":"Brites","given":"Dora"}],"issued":{"date-parts":[["2008",3]]},"accessed":{"date-parts":[["2009",6,10]]}}},{"key":"http://zotero.org/users/39885/items/3BRFM7PW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3BRFM7PW","type":"article-journal","title":"Community engagement and social licence to operate","container-title":"Impact Assessment and Project Appraisal","page":"188–197","volume":"32","issue":"3","source":"Google Scholar","URL":"http://www.tandfonline.com/doi/abs/10.1080/14615517.2014.927108","author":[{"family":"Dare","given":"Melanie"},{"family":"Schirmer","given":"Jacki"},{"family":"Vanclay","given":"Frank"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/3BUIXGQ3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3BUIXGQ3","type":"article-journal","title":"Information theory as the basis for thermostatics and thermodynamics","container-title":"Journal of Applied Mechanics","page":"1–8","volume":"28","issue":"1","source":"Google Scholar","URL":"http://appliedmechanics.asmedigitalcollection.asme.org/article.aspx?articleid=1394355","author":[{"family":"Tribus","given":"Myron"}],"issued":{"date-parts":[["1961"]]},"accessed":{"date-parts":[["2015",3,27]]}}},{"key":"http://zotero.org/users/39885/items/3CC2UMTK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3CC2UMTK","type":"article-journal","title":"Natural selection and rational decision: two concepts of optimization","container-title":"Journal of Evolutionary Economics","page":"417-435","volume":"19","issue":"3","source":"link.springer.com.ezproxy.library.uq.edu.au","abstract":"There are two different kinds of optimization: “selection” and “rationality” optimization. Selection optimization characterizes competition in human and nonhuman societies sharing the same market or niche. “Rationality optimization”, on the other hand, characterizes human and nonhuman decision making processes. The two kinds of optimization generate the same result: agents end up behaving efficiently. Nonetheless, we should not downplay the differences between the two kinds of optimization. Otherwise, we would fail to capture the role of rationality in the development of the organism and possibly its implication for evolution.","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/article/10.1007/s00191-008-0120-x","DOI":"10.1007/s00191-008-0120-x","ISSN":"0936-9937, 1432-1386","shortTitle":"Natural selection and rational decision","journalAbbreviation":"J Evol Econ","language":"en","author":[{"family":"Khalil","given":"Elias L."}],"issued":{"date-parts":[["2008",9,10]]},"accessed":{"date-parts":[["2016",2,29]]}}},{"key":"http://zotero.org/users/39885/items/3EDBZ9PU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3EDBZ9PU","type":"article-journal","title":"Analog Computer","container-title":"American Journal of Physics","page":"ix-x","volume":"30","issue":"5","source":"scitation.aip.org","abstract":"Scitation is the online home of leading journals and conference proceedings from AIP Publishing and AIP Member Societies","URL":"http://scitation.aip.org/content/aapt/journal/ajp/30/5/10.1119/1.1942047","DOI":"10.1119/1.1942047","ISSN":"0002-9505, 1943-2909","author":[{"family":"Stabler","given":"H. P."}],"issued":{"date-parts":[["1962",5,1]]},"accessed":{"date-parts":[["2015",2,19]]}}},{"key":"http://zotero.org/users/39885/items/3EMMT9MC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3EMMT9MC","type":"article-journal","title":"On the History of Industrial Metabolism","container-title":"2003), Perspectives on Industrial Ecology, Sheffield, UK, Greenleaf Publishing","page":"35-45","call-number":"0022","author":[{"family":"Fischer-Kowalski","given":"M."}],"issued":{"date-parts":[["2003"]]}}},{"key":"http://zotero.org/users/39885/items/3ES3DW5T","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3ES3DW5T","type":"book","title":"Budgeting : a practical approach","publisher":"Prentice Hall","publisher-place":"Frenchs Forest  N.S.W.","event-place":"Frenchs Forest  N.S.W.","ISBN":"978-0-7339-7385-7","author":[{"family":"National Institute of Accountants (Australia)","given":""}],"issued":{"date-parts":[["2005"]]}}},{"key":"http://zotero.org/users/39885/items/3H9477Q7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3H9477Q7","type":"book","title":"The Great Transformation: The Political and Economic Origins of Our Time","publisher":"Beacon Press","publisher-place":"Boston, MA","number-of-pages":"360","edition":"2 edition","source":"Amazon","event-place":"Boston, MA","ISBN":"978-0-8070-5643-1","shortTitle":"The Great Transformation","language":"English","author":[{"family":"Polanyi","given":"Karl"}],"issued":{"date-parts":[["2001",3,28]]}}},{"key":"http://zotero.org/users/39885/items/3HK7GRCV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3HK7GRCV","type":"article-magazine","title":"Node.js: Using JavaScript to Build High-Performance Network Programs","container-title":"IEEE Internet Computing","page":"80-83","volume":"14","issue":"6","source":"IEEE Computer Society","ISSN":"1089-7801","shortTitle":"Node.js","author":[{"family":"Tilkov","given":"Stefan"},{"family":"Vinoski","given":"Steve"}],"issued":{"date-parts":[["2010"]]}}},{"key":"http://zotero.org/users/39885/items/3JH55T53","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3JH55T53","type":"article-journal","title":"Ethanol production from biomass: Analysis of process efficiency and sustainability","container-title":"Biomass and Bioenergy","page":"411-418","volume":"11","issue":"5","source":"ScienceDirect","abstract":"Bioethanol production from agricultural raw materials can be carried out to produce liquid fuels and reduce CO2 emissions from the combustion of fossil fuels and hence its impact on climate. Crop production and transformation processes have been investigated by the traditional energy and carbon analyses and the more recent emergy analysis. The latter is able to account for, on the same basis, both renewable and non-renewable inputs, including goods and labour involved in a process.\n\nThe combination of such analyses provides a deeper insight into the problems of converting biomass to fuel. In particular it is shown that emergy analysis can evaluate long-term sustainability and comparisons of emergy-based indices can be used to compare efficiency and environmental input between various production systems.","URL":"http://www.sciencedirect.com/science/article/pii/S0961953496000372","DOI":"10.1016/S0961-9534(96)00037-2","ISSN":"0961-9534","shortTitle":"Ethanol production from biomass","journalAbbreviation":"Biomass and Bioenergy","author":[{"family":"Bastianoni","given":"Simone"},{"family":"Marchettini","given":"Nadia"}],"issued":{"date-parts":[["1996"]]},"accessed":{"date-parts":[["2015",2,8]]}}},{"key":"http://zotero.org/users/39885/items/3KEK8PHR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3KEK8PHR","type":"article","title":"Military Standard - Procedures for performing a failure mode effects and criticality analysis","publisher":"United States Department of Defence","URL":"https://src.alionscience.com/pdf/MIL-STD-1629RevA.pdf","shortTitle":"MIL-STD-1629RevA","author":[{"family":"U.S.DoD","given":""}],"issued":{"date-parts":[["1980"]]},"accessed":{"date-parts":[["2015",3,20]]}}},{"key":"http://zotero.org/users/39885/items/3MIDIWVG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3MIDIWVG","type":"book","title":"Eco-Logic: Logic-Based Approaches to Ecological Modeling","publisher":"The MIT Press","ISBN":"0-262-18143-6","call-number":"0061","shortTitle":"Eco-Logic","author":[{"family":"Robertson","given":"David"},{"family":"Bundy","given":"Alan"},{"family":"Meutzelfeldt","given":"Robert"},{"family":"Haggith","given":"Mandy"},{"family":"Uschold","given":"Michael"}],"issued":{"date-parts":[["1991",2,4]]}}},{"key":"http://zotero.org/users/39885/items/3NBWMNAU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3NBWMNAU","type":"article-journal","title":"Biological risks for neurological abnormalities associated with hyperbilirubinemia","container-title":"Journal of Perinatology","page":"S8-S13","call-number":"0003","author":[{"family":"Brites","given":"D."},{"family":"Fernandes","given":"A."},{"family":"Falcão","given":"A. S."},{"family":"Gordo","given":"A. C."},{"family":"Silva","given":"R. F. M."},{"family":"Brito","given":"M. A."}],"issued":{"date-parts":[["2009"]]}}},{"key":"http://zotero.org/users/39885/items/3ND7TNR8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3ND7TNR8","type":"article-journal","title":"A unitary Neo-Piagetian/Neo-Eriksonian model of development: Fundamental assumptions and meta-issues","container-title":"New Ideas in Psychology","page":"241-249","volume":"30","issue":"2","source":"ScienceDirect","abstract":"The article briefly reviews a stage model of change in human development that integrates a Neo-Piagetian model and a Neo-Eriksonian model into one unitary stage model across the lifespan (as presented in Young, 2011). The model suggests a generic model of stages in change. The article explores the fundamental assumptions underlying the model as well as considering meta-issues. The article adds to the book by describing the Neo-Eriksonian stages as reflections of a social “participatory” process. It adds to the change process in development by describing it as possibly reflecting “punctuated disequilibrium.” Finally, it adds a “multiple psychodynamics” model.","URL":"http://www.sciencedirect.com/science/article/pii/S0732118X11000717","DOI":"10.1016/j.newideapsych.2011.11.002","ISSN":"0732-118X","shortTitle":"A unitary Neo-Piagetian/Neo-Eriksonian model of development","journalAbbreviation":"New Ideas in Psychology","author":[{"family":"Young","given":"Gerald"}],"issued":{"date-parts":[["2012",8]]},"accessed":{"date-parts":[["2016",2,24]]}}},{"key":"http://zotero.org/users/39885/items/3Q3QPCJW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3Q3QPCJW","type":"book","title":"rSCA: An R Package for Stepwise Cluster Analysis","version":"2.1","source":"R-Packages","abstract":"This package implements a statistical tool for modeling multivariate relationships using a stepwise cluster analysis (SCA) method.","URL":"https://cran.r-project.org/web/packages/rSCA/index.html","shortTitle":"rSCA","author":[{"family":"Wang","given":"Xiuquan"}],"issued":{"date-parts":[["2014",5,10]]},"accessed":{"date-parts":[["2015",9,20]]}}},{"key":"http://zotero.org/users/39885/items/3QBA5IJI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3QBA5IJI","type":"article-journal","title":"Towards a cross-domain interoperable framework for natural hazards and disaster risk reduction information","container-title":"Natural Hazards","page":"1545-1563","volume":"78","issue":"3","source":"link.springer.com","URL":"http://link.springer.com/article/10.1007/s11069-015-1786-7","DOI":"10.1007/s11069-015-1786-7","ISSN":"0921-030X, 1573-0840","journalAbbreviation":"Nat Hazards","language":"en","author":[{"family":"Tomas","given":"Robert"},{"family":"Harrison","given":"Matthew"},{"family":"Barredo","given":"José I."},{"family":"Thomas","given":"Florian"},{"family":"Isidro","given":"Miguel Llorente"},{"family":"Pfeiffer","given":"Manuela"},{"family":"Čerba","given":"Otakar"}],"issued":{"date-parts":[["2015",5,21]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/3QZFXIBG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3QZFXIBG","type":"paper-conference","title":"Streamline, standardize or specialize?  Frameworks for regulation of unconventional gas in Australia","container-title":"APPEA","author":[{"family":"Brockett","given":"R."}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",8,21]]}}},{"key":"http://zotero.org/users/39885/items/3RMP5JIK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3RMP5JIK","type":"paper-conference","title":"Natural selection for least action","container-title":"Proceedings of the Royal Society of London A: Mathematical, Physical and Engineering Sciences","publisher":"The Royal Society","page":"3055–3070","volume":"464","source":"Google Scholar","URL":"http://rspa.royalsocietypublishing.org/content/464/2099/3055.short","author":[{"family":"Kaila","given":"Ville RI"},{"family":"Annila","given":"Arto"}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2016",3,11]]}}},{"key":"http://zotero.org/users/39885/items/3RN4UXN9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3RN4UXN9","type":"article","title":"Continuity of Characters II","publisher":"Unpublished","shortTitle":"Update","author":[{"family":"Maud","given":"Sholto"}]}},{"key":"http://zotero.org/users/39885/items/3TKWJEHT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3TKWJEHT","type":"paper-conference","title":"Assessing Non-Technical Risks in Oil and Gas Exploration and Production","publisher":"Society of Petroleum Engineers","source":"CrossRef","URL":"http://www.onepetro.org/doi/10.2118/46844-MS","DOI":"10.2118/46844-MS","author":[{"family":"Barker","given":"Gary W."},{"family":"Steele","given":"Edward J."},{"family":"Heaton","given":"Kevin P."}],"issued":{"date-parts":[["1998"]]},"accessed":{"date-parts":[["2015",10,6]]}}},{"key":"http://zotero.org/users/39885/items/3TWURIZS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3TWURIZS","type":"article-journal","title":"How the Second Law of Thermodynamics Has Informed Ecosystem Ecology through Its History","container-title":"BioScience","page":"27-39","volume":"66","issue":"1","source":"bioscience.oxfordjournals.org.ezproxy.library.uq.edu.au","abstract":"Many attempts have been made to develop a general principle governing how systems develop and organize in ecology. We reviewed the historical developments that led to the conceptualization of several goal-oriented principles in ecosystem ecology. We focused on two prominent principles—the maximum power principle (MPP) and the maximum entropy production principle (MEPP)—and the literature that applies to both. Although these principles have conceptual overlap, we found considerable differences in their historical development, the disciplines that apply these principles, and their adoption in the literature. These principles were more similar than dissimilar, and the maximization of power in ecosystems occurs with maximum entropy production. These principles have great potential to explain how systems develop, organize, and function, but there are no widely agreed-on theoretical derivations for the MEPP and MPP, hindering their broader use in ecological research. We end with recommendations for how ecosystems-level studies may better use these principles.","URL":"http://bioscience.oxfordjournals.org/content/66/1/27","DOI":"10.1093/biosci/biv166","ISSN":"0006-3568, 1525-3244","journalAbbreviation":"BioScience","language":"en","author":[{"family":"Chapman","given":"Eric J."},{"family":"Childers","given":"Daniel L."},{"family":"Vallino","given":"Joseph J."}],"issued":{"date-parts":[["2016",1,1]]},"accessed":{"date-parts":[["2016",3,9]]}}},{"key":"http://zotero.org/users/39885/items/3UA3GBU3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3UA3GBU3","type":"article-journal","title":"A Survey of Data Provenance in e-Science","container-title":"SIGMOD Rec.","page":"31–36","volume":"34","issue":"3","source":"ACM Digital Library","abstract":"Data management is growing in complexity as large-scale applications take advantage of the loosely coupled resources brought together by grid middleware and by abundant storage capacity. Metadata describing the data products used in and generated by these applications is essential to disambiguate the data and enable reuse. Data provenance, one kind of metadata, pertains to the derivation history of a data product starting from its original sources.In this paper we create a taxonomy of data provenance characteristics and apply it to current research efforts in e-science, focusing primarily on scientific workflow approaches. The main aspect of our taxonomy categorizes provenance systems based on why they record provenance, what they describe, how they represent and store provenance, and ways to disseminate it. The survey culminates with an identification of open research problems in the field.","URL":"http://doi.acm.org/10.1145/1084805.1084812","DOI":"10.1145/1084805.1084812","ISSN":"0163-5808","author":[{"family":"Simmhan","given":"Yogesh L."},{"family":"Plale","given":"Beth"},{"family":"Gannon","given":"Dennis"}],"issued":{"date-parts":[["2005",9]]},"accessed":{"date-parts":[["2015",12,15]]}}},{"key":"http://zotero.org/users/39885/items/3UCPFQSK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3UCPFQSK","type":"book","title":"Handbook of Ecosystem Theories and Management","publisher":"CRC Press","call-number":"0045","author":[{"family":"Jørgensen","given":"S. E."},{"family":"Muller","given":"F."}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/3VEI43KJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3VEI43KJ","type":"article-journal","title":"Fair play in energy policy decisions: Procedural fairness, outcome fairness and acceptance of the decision to rebuild nuclear power plants","container-title":"Energy Policy","page":"292–300","volume":"46","source":"Google Scholar","URL":"http://www.sciencedirect.com/science/article/pii/S0301421512002674","shortTitle":"Fair play in energy policy decisions","author":[{"family":"Visschers","given":"Vivianne HM"},{"family":"Siegrist","given":"Michael"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",8,12]]}}},{"key":"http://zotero.org/users/39885/items/3VHXDMKN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3VHXDMKN","type":"article-journal","title":"Thermodynamics-based categorization of ecosystems in a socio-ecological context","container-title":"Ecological Modelling","page":"1-8","volume":"258","source":"ScienceDirect","abstract":"Ecosystems can be viewed as thermodynamic systems, open to energy and matter, that self-organize towards higher complexity and organization, create order, and self-maintain far from thermodynamic equilibrium. Ecological systems are closely interrelated (in a landscape and in the biosphere) and with human systems, such as urban systems or, generically, economic systems. These relations have been summarized and measured by the concept of ecosystem services and the definition of socio-ecological systems. In order to detect ecosystem properties and dynamics in this context, it is recommended to use “super-holistic” indicators, e.g. thermodynamic indicators such as emergy and eco-exergy. Emergy accounts for energy and matter inputs converging to a system, while eco-exergy is a state-based descriptor of a system's structure based on biomass and genetic information. The characteristics of a generic ecosystem can be described by the relationship among the three orientors – emergy, eco-exergy, ecosystem services – making it clear that inputs are used up, directly or indirectly, to create and maintain a given system state and/or to produce services in output. This paper presents an input-state-output description of ecosystems in a socio-ecological context which leads to a characterization in 8 categories, in order to provide a new contribution to systems ecology.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380013001348","DOI":"10.1016/j.ecolmodel.2013.02.031","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Coscieme","given":"Luca"},{"family":"Pulselli","given":"Federico M."},{"family":"Jørgensen","given":"Sven E."},{"family":"Bastianoni","given":"Simone"},{"family":"Marchettini","given":"Nadia"}],"issued":{"date-parts":[["2013",6,10]]},"accessed":{"date-parts":[["2015",12,9]]}}},{"key":"http://zotero.org/users/39885/items/3XKRTFGP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3XKRTFGP","type":"article-journal","title":"A scaling method for priorities in hierarchical structures","container-title":"Journal of Mathematical Psychology","page":"234-281","volume":"15","issue":"3","source":"ScienceDirect","abstract":"The purpose of this paper is to investigate a method of scaling ratios using the principal eigenvector of a positive pairwise comparison matrix. Consistency of the matrix data is defined and measured by an expression involving the average of the nonprincipal eigenvalues. We show that λmax = n is a necessary and sufficient condition for consistency. We also show that twice this measure is the variance in judgmental errors. A scale of numbers from 1 to 9 is introduced together with a discussion of how it compares with other scales. To illustrate the theory, it is then applied to some examples for which the answer is known, offering the opportunity for validating the approach. The discussion is then extended to multiple criterion decision making by formally introducing the notion of a hierarchy, investigating some properties of hierarchies, and applying the eigenvalue approach to scaling complex problems structured hierarchically to obtain a unidimensional composite vector for scaling the elements falling in any single level of the hierarchy. A brief discussion is also included regarding how the hierarchy serves as a useful tool for decomposing a large-scale problem, in order to make measurement possible despite the now-classical observation that the mind is limited to 7 ± 2 factors for simultaneous comparison.","URL":"http://www.sciencedirect.com/science/article/pii/0022249677900335","DOI":"10.1016/0022-2496(77)90033-5","ISSN":"0022-2496","journalAbbreviation":"Journal of Mathematical Psychology","author":[{"family":"Saaty","given":"Thomas L"}],"issued":{"date-parts":[["1977",6,1]]},"accessed":{"date-parts":[["2016",2,15]]}}},{"key":"http://zotero.org/users/39885/items/3Z3MG2HJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/3Z3MG2HJ","type":"article-journal","title":"How the Brain Gives Rise to Mathematics in Ontogeny and in Culture","container-title":"Journal of Mind and Behavior","page":"343-349","volume":"15","issue":"4","source":"ProQuest","abstract":"Within the framework of Neurological Positivism (NP) this article describes how brain algorithms are translated into mathematics in ontogeny and in culture. The purpose is to address seemingly contradictory research findings that suggest that while mathematical axioms are innate, they are not the direct result of processes of selection. It is proposed that self- referencing feedback processes of maximum-power evolution guide the construction of algorithmic isomorphies between preadapted brain algorithms and mathematics. It is concluded that maximum- power evolution as described in NP offers mechanisms that make sense of findings that suggest that mathematical axioms are innate, yet not directly the result of selection as traditionally understood. It is concluded also that these mechanisms provide insight into the often intuitive nature of mathematical discovery.","URL":"http://search.proquest.com.ezproxy.library.uq.edu.au/philosophersindex/docview/42836340/9A03B36280F94E1CPQ/2","ISSN":"0271-0137","language":"English","author":[{"family":"Vandervert","given":"Larry R."}],"issued":{"date-parts":[["1994"]]},"accessed":{"date-parts":[["2016",2,19]]}}},{"key":"http://zotero.org/users/39885/items/429882FC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/429882FC","type":"article-journal","title":"Four Questions About Fracking","container-title":"Case W. Res. L. Rev.","page":"971","volume":"63","source":"Google Scholar","URL":"http://heinonlinebackup.com/hol-cgi-bin/get_pdf.cgi?handle=hein.journals/cwrlrv63&section=42","author":[{"family":"Merrill","given":"Thomas W."}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",2,4]]}}},{"key":"http://zotero.org/users/39885/items/42HFMTKK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/42HFMTKK","type":"article","title":"Unconventional Gas Production and Water Resources. Lessons from the United States on Better Governance- A Workshop for Australian Government Officials","publisher":"Crawford School of Public Policy","source":"Google Scholar","URL":"https://crawford.anu.edu.au/pdf/inthenews/12186-unconventional-gas-document-web-fa.PDF","author":[{"family":"Williams","given":"J."},{"family":"Pittock","given":"J."}],"issued":{"date-parts":[["2012"]]}}},{"key":"http://zotero.org/users/39885/items/432TXS4D","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/432TXS4D","type":"article","title":"Australia’s Unconventional Energy Options","publisher":"Committee for Economic Development of Australia","URL":"http://adminpanel.ceda.com.au/FOLDERS/Service/Files/Documents/15347~cedaunconventionalenergyfinal.pdf","author":[{"family":"Taylor","given":"Nathan"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",10,3]]}}},{"key":"http://zotero.org/users/39885/items/464TTTBR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/464TTTBR","type":"article-journal","title":"W. J. Mitsch, R. W. Bosserman, R. K. Ragade, J. A. Dillon, Jr., (Eds.): Energetics and systems. Ann Arbor: Ann Arbor Science, 1982","container-title":"Behavioral Science","page":"307-309","volume":"28","issue":"4","source":"Wiley Online Library","URL":"http://onlinelibrary.wiley.com/doi/10.1002/bs.3830280409/abstract","DOI":"10.1002/bs.3830280409","ISSN":"1099-1743","shortTitle":"W. J. Mitsch, R. W. Bosserman, R. K. Ragade, J. A. Dillon, Jr., (Eds.)","language":"en","author":[{"family":"Herendeen","given":"Robert A"}],"issued":{"date-parts":[["1983",10,1]]},"accessed":{"date-parts":[["2011",8,28]]}}},{"key":"http://zotero.org/users/39885/items/46Q3Z9MR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/46Q3Z9MR","type":"article-journal","title":"With respects to the emergy evaluation of complexity, information and technology","container-title":"Journal of Cleaner Production","page":"881","volume":"16","issue":"7","URL":"http://www.sciencedirect.com/science/article/B6VFX-4R5G81N-1/2/f34ad7c740f1f53a1b67a4321ef07ad3","DOI":"10.1016/j.jclepro.2007.10.015","call-number":"0000","author":[{"family":"Maud","given":"Sholto"}],"issued":{"date-parts":[["2008",5]]},"accessed":{"date-parts":[["2008",8,9]]}}},{"key":"http://zotero.org/users/39885/items/46SQCZWD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/46SQCZWD","type":"article","title":"Planning, Developing and Managing an Effective Reliability and Maintainability (R&M) Program","publisher":"National Aeronautics and Space Administration","URL":"http://www.hq.nasa.gov/office/codeq/87291.pdf","call-number":"NASA-STD-8729.1","author":[{"family":"NASA","given":""}],"issued":{"date-parts":[["1998"]]},"accessed":{"date-parts":[["2015",3,18]]}}},{"key":"http://zotero.org/users/39885/items/475CNVT8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/475CNVT8","type":"article-journal","title":"A Fourth Law of Thermodynamics","container-title":"Khimiya/Chemistry. Bulgarian Journal Of Chemical Education","page":"305-309","volume":"15","issue":"4","URL":"http://khimiya.org/volume15/vol15_4.htm","ISSN":"08619255","call-number":"0071","language":"English","author":[{"family":"Morel","given":"Richard"},{"family":"Fleck","given":"George"}],"issued":{"date-parts":[["2006"]]}}},{"key":"http://zotero.org/users/39885/items/48JUE235","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/48JUE235","type":"book","title":"Systems ecology: an introduction","publisher":"Wiley","publisher-place":"New York","number-of-pages":"644","source":"Library of Congress ISBN","event-place":"New York","ISBN":"0-471-65277-6","call-number":"QH541.15.S5 O38 1983","shortTitle":"Systems ecology","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1983"]]}}},{"key":"http://zotero.org/users/39885/items/4BQ3QXPU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4BQ3QXPU","type":"article-journal","title":"Leading groups in organizations","container-title":"Designing effective work groups","page":"72–119","source":"Google Scholar","author":[{"family":"Hackman","given":"J. R"},{"family":"Walton","given":"R. E"}],"issued":{"date-parts":[["1986"]]}}},{"key":"http://zotero.org/users/39885/items/4BUHNZGJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4BUHNZGJ","type":"book","title":"Protogaea","publisher":"University of Chicago Press","number-of-pages":"216","source":"Google Books","abstract":"Protogaea, an ambitious account of terrestrial history, was central to the development of the earth sciences in the eighteenth century and provides key philosophical insights into the unity of Gottfried Wilhelm Leibniz’s thought and writings. In the book, Leibniz offers observations about the formation of the earth, the actions of fire and water, the genesis of rocks and minerals, the origins of salts and springs, the formation of fossils, and their identification as the remains of living organisms. Protogaea also includes a series of engraved plates depicting the remains of animals—in particular the famous reconstruction of a “fossil unicorn”—together with a cross section of the cave in which some fossil objects were discovered. Though the works of Leibniz have been widely translated, Protogaea has languished in its original Latin for centuries. Now Claudine Cohen and Andre Wakefield offer the first English translation of this central text in natural philosophy and natural history. Written between 1691 and 1693, and first published after Leibniz’s death in 1749, Protogaea reemerges in this bilingual edition with an introduction that carefully situates the work within its historical context.","ISBN":"978-0-226-11297-8","language":"en","author":[{"family":"Leibniz","given":"Gottfried Wilhelm"}],"issued":{"date-parts":[["2008",9,15]]}}},{"key":"http://zotero.org/users/39885/items/4C8BSS9D","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4C8BSS9D","type":"article-newspaper","title":"Dr Scienceman's brave new word","container-title":"The Australian Newspaper","page":"7","call-number":"0000","author":[{"family":"Cadzow","given":"J"}],"issued":{"date-parts":[["1984",5,15]]}}},{"key":"http://zotero.org/users/39885/items/4CISIRBB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4CISIRBB","type":"article-journal","title":"Thermodynamic basis of the principle of least action","container-title":"Soviet Physics Journal","page":"426–431","volume":"34","issue":"5","source":"Google Scholar","URL":"http://link.springer.com/article/10.1007/BF00897404","author":[{"family":"Maslov","given":"V. N."}],"issued":{"date-parts":[["1991"]]},"accessed":{"date-parts":[["2016",3,11]]}}},{"key":"http://zotero.org/users/39885/items/4DVQ5E7E","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4DVQ5E7E","type":"webpage","title":"Storing baseline assessment information","container-title":"Department of Natural Resources and Mines","genre":"document","abstract":"Baseline assessments are required for water bores in areas where petroleum and gas production testing or production has commenced.","URL":"https://www.dnrm.qld.gov.au/ogia/storing-baseline-assessment-information","language":"en-AU","author":[{"family":"DNRM","given":""}],"issued":{"date-parts":[["2015",6,3]]},"accessed":{"date-parts":[["2015",8,17]]}}},{"key":"http://zotero.org/users/39885/items/4FHUHTJ5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4FHUHTJ5","type":"article-journal","title":"The fourth law of thermodynamics","container-title":"Nature","page":"229-231","volume":"238","issue":"5361","call-number":"0006","author":[{"family":"Landsberg","given":"P. T."}],"issued":{"date-parts":[["1972"]]}}},{"key":"http://zotero.org/users/39885/items/4G34R6DE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4G34R6DE","type":"article","title":"SECOND QUARTER AND HALF YEAR RESULTS","publisher":"BG Group","URL":"http://www.bg-group.com/assets/files/cms/BG_Q2_2015_Statement.pdf","author":[{"family":"BG","given":""}],"issued":{"date-parts":[["2015"]]}}},{"key":"http://zotero.org/users/39885/items/4GFNRKB3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4GFNRKB3","type":"article-journal","title":"Life cycle assessment (LCA) of waste management strategies: Landfilling, sorting plant and incineration","container-title":"Energy","collection-title":"ECOS 2007","page":"2116-2123","volume":"34","issue":"12","source":"ScienceDirect","abstract":"This paper focuses on a Life Cycle Assessment (LCA) of four waste management strategies: landfill without biogas utilization; landfill with biogas combustion to generate electricity; sorting plant which splits the inorganic waste fraction (used to produce electricity via Refuse Derived Fuels, RDF) from the organic waste fraction (used to produce biogas via anaerobic digestion); direct incineration of waste. These scenarios are applied to the waste amount and composition of the Municipality of Roma (Italy) and are evaluated under different points of view: global and local emissions, total material demands, total energy requirements and ecological footprints. Results, reliable for most of the European big cities, show landfill systems as the worst waste management options and significant environmental savings at global scale are achieved from undertaking energy recycling. Furthermore, waste treatments finalized to energy recovery provide an energy output that, in the best case, is able to meet the 15% of Roma electricity consumption.","URL":"http://www.sciencedirect.com/science/article/pii/S0360544208002120","DOI":"10.1016/j.energy.2008.08.023","ISSN":"0360-5442","shortTitle":"Life cycle assessment (LCA) of waste management strategies","journalAbbreviation":"Energy","author":[{"family":"Cherubini","given":"Francesco"},{"family":"Bargigli","given":"Silvia"},{"family":"Ulgiati","given":"Sergio"}],"issued":{"date-parts":[["2009",12]]},"accessed":{"date-parts":[["2015",12,14]]}}},{"key":"http://zotero.org/users/39885/items/4GM8Q354","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4GM8Q354","type":"article-journal","title":"Some Words About The Noösphere1","source":"Google Scholar","URL":"https://www.21stcenturysciencetech.com/translations/The_Noosphere.pdf","author":[{"family":"Vernadsky","given":"Vladimir I."}],"issued":{"date-parts":[["2005"]]},"accessed":{"date-parts":[["2015",10,17]]}}},{"key":"http://zotero.org/users/39885/items/4I8HGPPU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4I8HGPPU","type":"book","title":"Mathematics for everyman","publisher":"Dent","publisher-place":"London","event-place":"London","ISBN":"978-0-460-02402-0","call-number":"0002","author":[{"family":"Buxton","given":"Laurie"}],"issued":{"date-parts":[["1985"]]}}},{"key":"http://zotero.org/users/39885/items/4IDBEM39","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4IDBEM39","type":"book","title":"Embodiments of Mind","publisher":"The MIT Press","source":"Amazon.com","ISBN":"0-262-63114-8","call-number":"0500","author":[{"family":"McCulloch","given":"Warren S."}],"issued":{"date-parts":[["1965"]]}}},{"key":"http://zotero.org/users/39885/items/4K5U574N","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4K5U574N","type":"report","title":"Probabilistic Risk Assessment Procedures Guide for NASA Managers and Practitioners (Second Edition)","source":"NASA NTRS","abstract":"Probabilistic Risk Assessment  is a comprehensive, structured, and logical analysis method aimed at identifying and assessing risks in complex technological systems for the purpose of cost-effectively improving their safety and performance. NASA's objective is to better understand and effectively manage risk, and thus more effectively ensure mission and programmatic success, and to achieve and maintain high safety standards at NASA. NASA intends to use risk assessment in its programs and projects to support optimal management decision making for the improvement of safety and program performance. In addition to using quantitative/probabilistic risk assessment to improve safety and enhance the safety decision process, NASA has incorporated quantitative risk assessment into its system safety assessment process, which until now has relied primarily on a qualitative representation of risk. Also, NASA has recently adopted the Risk-Informed Decision Making  process [1-1] as a valuable addition to supplement existing deterministic and experience-based engineering methods and tools. Over the years, NASA has been a leader in most of the technologies it has employed in its programs. One would think that PRA should be no exception. In fact, it would be natural for NASA to be a leader in PRA because, as a technology pioneer, NASA uses risk assessment and management implicitly or explicitly on a daily basis. NASA has probabilistic safety requirements  for crew transportation system missions to the International Space Station  [1-2]. NASA intends to have probabilistic requirements for any new human spaceflight transportation system acquisition. Methods to perform risk and reliability assessment in the early 1960s originated in U.S. aerospace and missile programs. Fault tree analysis  is an example. It would have been a reasonable extrapolation to expect that NASA would also become the world leader in the application of PRA. That was, however, not to happen. Early in the Apollo program, estimates of the probability for a successful roundtrip human mission to the moon yielded disappointingly low  values and NASA became discouraged from further performing quantitative risk analyses until some two decades later when the methods were more refined, rigorous, and repeatable. Instead, NASA decided to rely primarily on the Hazard Analysis  and Failure Modes and Effects Analysis  methods for system safety assessment.","URL":"http://ntrs.nasa.gov/search.jsp?R=20120001369","author":[{"family":"Stamatelatos,Michael","given":""},{"family":"Dezfuli","given":"Homayoon"},{"family":"Apostolakis","given":"George"},{"family":"Everline","given":"Chester"},{"family":"Guarro","given":"Sergio"},{"family":"Mathias","given":"Donovan"},{"family":"Mosleh","given":"Ali"},{"family":"Paulos","given":"Todd"},{"family":"Riha","given":"David"},{"family":"Smith","given":"Curtis"},{"family":"Vesely","given":"William"},{"family":"Youngblood","given":"Robert"}],"issued":{"date-parts":[["2011",12,1]]},"accessed":{"date-parts":[["2015",8,12]]}}},{"key":"http://zotero.org/users/39885/items/4MA73MDV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4MA73MDV","type":"book","title":"Systems analysis and simulation in ecology","publisher":"Elsevier","volume":"3","source":"Google Scholar","URL":"https://books.google.com.au/books?hl=en&lr=&id=lfggBQAAQBAJ&oi=fnd&pg=PP1&dq=Systems+Analysis+and+Simulation+in+Ecology&ots=iursokER66&sig=piUB_zyVGFT47_jfU18PQyvIKCs","author":[{"family":"Patten","given":"Bernard C."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",11,4]]}}},{"key":"http://zotero.org/users/39885/items/4MKB77BV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4MKB77BV","type":"book","title":"Energy systems overview of the Amazon basin","publisher":"Centre for Wetland, Univeristy of Florida","source":"Google Scholar","author":[{"family":"Odum","given":"Howard T."},{"family":"Brown","given":"Mark T."},{"family":"Christianson","given":"Robert A."}],"issued":{"date-parts":[["1986"]]}}},{"key":"http://zotero.org/users/39885/items/4MSN6SXH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4MSN6SXH","type":"article-journal","title":"Getting Serious with JavaScript","container-title":"WebGL Insights","page":"49","source":"Google Scholar","URL":"https://books.google.com.au/books?hl=en&lr=&id=6crECQAAQBAJ&oi=fnd&pg=PA49&dq=Getting+Serious+with+JavaScript.+Matthew+Amato+and+Kevin+Ring&ots=Jq8hbWMdUB&sig=UM6JlanN7f_OT9DZM5zJ5ZwZCAI","author":[{"family":"Amato","given":"Matthew"},{"family":"Ring","given":"Kevin"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/4N2I2AA6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4N2I2AA6","type":"article-journal","title":"Assessment and management of risk in subsurface hydrology: A review and perspective","container-title":"Advances in Water Resources","collection-title":"35th Year Anniversary Issue","page":"247-260","volume":"51","source":"ScienceDirect","abstract":"Uncertainty plagues every effort to model subsurface processes and every decision made on the basis of such models. Given this pervasive uncertainty, virtually all practical problems in hydrogeology can be formulated in terms of (ecologic, monetary, health, regulatory, etc.) risk. This review deals with hydrogeologic applications of recent advances in uncertainty quantification, probabilistic risk assessment (PRA), and decision-making under uncertainty. The subjects discussed include probabilistic analyses of exposure pathways, PRAs based on fault tree analyses and other systems-based approaches, PDF (probability density functions) methods for propagating parametric uncertainty through a modeling process, computational tools (e.g., random domain decompositions and transition probability based approaches) for quantification of geologic uncertainty, Bayesian algorithms for quantification of model (structural) uncertainty, and computational methods for decision-making under uncertainty (stochastic optimization and decision theory). The review is concluded with a brief discussion of ways to communicate results of uncertainty quantification and risk assessment.","URL":"http://www.sciencedirect.com/science/article/pii/S0309170812000917","DOI":"10.1016/j.advwatres.2012.04.007","ISSN":"0309-1708","shortTitle":"Assessment and management of risk in subsurface hydrology","journalAbbreviation":"Advances in Water Resources","author":[{"family":"Tartakovsky","given":"Daniel M."}],"issued":{"date-parts":[["2013",1]]},"accessed":{"date-parts":[["2015",8,13]]}}},{"key":"http://zotero.org/users/39885/items/4N8BUJK5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4N8BUJK5","type":"article-journal","title":"Political instability and business: Focus on Shell in Nigeria","container-title":"Third World Quarterly","page":"457-478","volume":"19","issue":"3","source":"Taylor and Francis+NEJM","abstract":"Business managers name Africa's political instability as a key obstacle to economic development, but many companies continue to invest in Africa. The article explains this apparent contradiction by looking at the case of Shell in Nigeria. Nigeria experiences serious political instability, yet Shell is expanding its investment in the country. This article deals with sources of firm-specific political instability that have affected Shell in Nigeria in the past and attempts to explain why a specific corporation such as Shell may want to make investments in the country despite political instability. The examination of three different angles of Shell's activity, which forms the core of this paper, reveals that political instability does not hinder Shell from operating in Nigeria. Firstly, the international perspective illuminates in what way Nigeria may be more attractive to Shell than other countries. Profits in Nigeria appear to be higher than elsewhere, while Shell occupies a dominant market position unrivalled in most other countries. Secondly, the structural perspective illuminates the interconnectedness of Shell with state structures in Nigeria that may tie the company to Nigeria. Shell established a first mover advantage in the 1950s, since Nigeria was a British colony until 1960 and British oil companies were given preferential treatment. After independence, Shell managed to penetrate state structures which helped to hedge political risk in the country. Thirdly, the strategic perspective explores how Shell's strategic approaches may make political instability less significant to Shell. This article concludes that Shell has adopted to political instability. The conclusion that political instability can be conducive to business is significant since one expects political instability to be inherently harmful to business.","URL":"http://dx.doi.org/10.1080/01436599814343","DOI":"10.1080/01436599814343","ISSN":"0143-6597","shortTitle":"Political instability and business","author":[{"family":"Frynas","given":"Jedrzej George"}],"issued":{"date-parts":[["1998",9,1]]},"accessed":{"date-parts":[["2015",8,12]]}}},{"key":"http://zotero.org/users/39885/items/4P5MRJDZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4P5MRJDZ","type":"webpage","title":"Gas and Oil in Unconventional Reservoirs in the South East of South Australia FAQ","abstract":"Gas and Oil in Unconventional Reservoirs in the South East of South Australia FAQ Last updated: 02 Jun 2015","URL":"http://www.petroleum.statedevelopment.sa.gov.au/prospectivity/basin_and_province_information/unconventional_gas/frequently_asked_questions/south_east_unconventional_gas_faq#10","author":[{"family":"SA","given":""}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",11,13]]}}},{"key":"http://zotero.org/users/39885/items/4QBVP6QI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4QBVP6QI","type":"article-journal","title":"Is the universe leaking energy?","container-title":"Scientific American","page":"38–47","volume":"303","issue":"1","source":"Google Scholar","URL":"http://www.nature.com/scientificamerican/journal/v303/n1/full/scientificamerican0710-38.html","author":[{"family":"Davis","given":"Tamara M."}],"issued":{"date-parts":[["2010"]]},"accessed":{"date-parts":[["2016",2,24]]}}},{"key":"http://zotero.org/users/39885/items/4QZGIR5W","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4QZGIR5W","type":"article-journal","title":"Probabilistic risk analysis in subsurface hydrology","container-title":"Geophysical Research Letters","volume":"34","issue":"5","source":"CrossRef","URL":"http://doi.wiley.com/10.1029/2007GL029245","DOI":"10.1029/2007GL029245","ISSN":"0094-8276","language":"en","author":[{"family":"Tartakovsky","given":"Daniel M."}],"issued":{"date-parts":[["2007",3,15]]},"accessed":{"date-parts":[["2015",8,13]]}}},{"key":"http://zotero.org/users/39885/items/4QZS2B7R","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4QZS2B7R","type":"article-journal","title":"Avoidable Fraccident: An Argument against Strict Liability for Hydraulic Fracturing","container-title":"University of Kansas Law Review","page":"1215","volume":"60","URL":"http://heinonline.org/HOL/Page?handle=hein.journals/ukalr60&id=1225&div=&collection=journals","shortTitle":"Avoidable Fraccident","journalAbbreviation":"U. Kan. L. Rev.","author":[{"family":"Schremmer","given":"Joe"}],"issued":{"date-parts":[["2011"]],"season":"2012"}}},{"key":"http://zotero.org/users/39885/items/4SG3SV38","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4SG3SV38","type":"article-journal","title":"International Picture Language: The First Rules of Isotype","container-title":"London: K. Paul, Trench, Trubner & Co","source":"Google Scholar","shortTitle":"International Picture Language","author":[{"family":"Otto","given":"Neurath"}],"issued":{"date-parts":[["1936"]]}}},{"key":"http://zotero.org/users/39885/items/4SGBGJ8D","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4SGBGJ8D","type":"article-journal","title":"Systems engineering and Statoil natural gas trasport operations","container-title":"Proc. INCOSE Symposium","call-number":"0000","author":[{"literal":"Hans Dahl"}],"issued":{"date-parts":[["1999"]]}}},{"key":"http://zotero.org/users/39885/items/4SPHBMZN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4SPHBMZN","type":"book","title":"Systems Analysis and Simulation in Ecology","publisher":"Elsevier","number-of-pages":"609","source":"Google Books","abstract":"Systems Analysis and Simulation in Ecology","ISBN":"978-1-4832-6277-2","language":"en","author":[{"family":"Patten","given":"Bernard C."}],"issued":{"date-parts":[["2013",9,17]]}}},{"key":"http://zotero.org/users/39885/items/4TFSKGV7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4TFSKGV7","type":"book","title":"Elements of physical biology. Reprinted 1956","publisher":"Williams and Wilkins Company","call-number":"0028","author":[{"family":"Lotka","given":"A. J."}],"issued":{"date-parts":[["1924"]]}}},{"key":"http://zotero.org/users/39885/items/4TNGMA85","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4TNGMA85","type":"book","title":"The Copernican Revolution: Planetary Astronomy in the Development of Western Thought","publisher":"Harvard University Press","source":"Amazon.com","ISBN":"0-674-17103-9","call-number":"0291","shortTitle":"The Copernican Revolution","author":[{"family":"Kuhn","given":"Thomas S."}],"issued":{"date-parts":[["1959"]]}}},{"key":"http://zotero.org/users/39885/items/4UI3GC68","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4UI3GC68","type":"book","title":"Soft Systems Methodology in Action","publisher":"WILEY JOHN","call-number":"0337","author":[{"family":"Checkland","given":"Peter"}],"issued":{"date-parts":[["1998",7,31]]}}},{"key":"http://zotero.org/users/39885/items/4WFIXTV5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4WFIXTV5","type":"book","title":"Biology as Ideology: The Doctrine of DNA","publisher":"Harper Perennial","ISBN":"0-06-097519-9","call-number":"0545","shortTitle":"Biology as Ideology","author":[{"family":"Lewontin","given":"Richard C."}],"issued":{"date-parts":[["1993",1,13]]}}},{"key":"http://zotero.org/users/39885/items/4XN2WGCU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4XN2WGCU","type":"article-journal","title":"Dialectical Nature: Reflections in Honor of the Twentieth Anniversary of Levins and Lewontin's The Dialectical Biologist","container-title":"Monthly Review","page":"13-22","volume":"57","issue":"1","source":"ProQuest","abstract":"Clark and York share their reflections of Richard Lewontin's and Richard Levins's The Dialectical Biologist, one of the foremost examples of a genuinely dialectical materialist approach to history and science. They describe how mainstream science typically assumes evolution to be a progressive process leading to a state equilibrium. Within this dominant view, an ideology of biological determinism is used to justify inequalities, arguing that differences are biologically inherited.","URL":"http://search.proquest.com.ezproxy.library.uq.edu.au/docview/213212455/abstract/EA4F8299ECC14AB3PQ/1","ISSN":"00270520","shortTitle":"Dialectical Nature","language":"English","author":[{"family":"Clark","given":"Brett"},{"family":"York","given":"Richard"}],"issued":{"date-parts":[["2005",5]]},"accessed":{"date-parts":[["2016",3,14]]}}},{"key":"http://zotero.org/users/39885/items/4ZHXXZQZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/4ZHXXZQZ","type":"book","title":"Psychology Applied to Teaching","publisher":"Wadsworth Publishing","edition":"12","source":"Amazon.com","ISBN":"0-618-96856-3","call-number":"0111","author":[{"family":"Snowman","given":"Jack"},{"family":"McCown","given":"Rick"},{"family":"Biehler","given":"Robert"}],"issued":{"date-parts":[["2008",1,25]]}}},{"key":"http://zotero.org/users/39885/items/5238JUJX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5238JUJX","type":"book","title":"Mutual Aid; A Factor of Evolution","publisher":"General Books LLC","source":"Amazon.com","ISBN":"1-153-74282-9","call-number":"0741","author":[{"family":"Kropotkin","given":"Petr Alekseevich"}],"issued":{"date-parts":[["1939"]]}}},{"key":"http://zotero.org/users/39885/items/52HVKEJP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/52HVKEJP","type":"chapter","title":"Back to the Future–Should SQL Surrender to SPARQL?","container-title":"SOFSEM 2015: Theory and Practice of Computer Science","publisher":"Springer","page":"78–101","source":"Google Scholar","URL":"http://link.springer.com/chapter/10.1007/978-3-662-46078-8_8","author":[{"family":"Manthey","given":"Rainer"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",11,29]]}}},{"key":"http://zotero.org/users/39885/items/52RI8C38","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/52RI8C38","type":"article-journal","title":"The expected utility model: Its variants, purposes, evidence and limitations","container-title":"Journal of economic literature","page":"529–563","source":"Google Scholar","URL":"http://www.jstor.org/stable/2724488","shortTitle":"The expected utility model","author":[{"family":"Schoemaker","given":"Paul JH"}],"issued":{"date-parts":[["1982"]]},"accessed":{"date-parts":[["2016",2,29]]}}},{"key":"http://zotero.org/users/39885/items/54E6EMXH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/54E6EMXH","type":"article-journal","title":"The Utilization of Big Data's Disaster Management in Korea","container-title":"The Journal of the Korea Contents Association","page":"377-392","volume":"15","issue":"2","source":"CrossRef","URL":"http://koreascience.or.kr/journal/view.jsp?kj=CCTHCV&py=2015&vnc=v15n2&sp=377","DOI":"10.5392/JKCA.2015.15.02.377","ISSN":"1598-4877","language":"en","author":[{"family":"Shin","given":"Dong-Hee"},{"family":"Kim","given":"Yong-Moon"}],"issued":{"date-parts":[["2015",2,28]]},"accessed":{"date-parts":[["2015",8,13]]}}},{"key":"http://zotero.org/users/39885/items/54KIAM8V","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/54KIAM8V","type":"article-journal","title":"A thermodynamic, environmental and material flow analysis of the Italian highway and railway transport systems","container-title":"Energy","page":"760-775","volume":"33","issue":"5","abstract":"The goal of this work is to provide a multi-method multi-scale comparative picture of selected terrestrial transport modalities. This is achieved by investigating the Italian transportation system by means of four different evaluation methods: material flow accounting (MFA), embodied energy analysis (EEA), exergy analysis (EXA) and emergy synthesis (ES). The case study is the main Italian transportation infrastructure, composed by highways, railways, and high-speed railways (high-speed trains, HST) sub-systems supporting both passengers and freight transport. All the analyses have been performed based on a common database of material, labor, energy and fuel input flows used in the construction, maintenance and yearly use of roads, railways and vehicles. Specific matter and energy intensities of both passenger and freight transportation services were calculated factors affecting results as well as strength and weakness points of each transportation modality were also stressed. Results pointed out that the most important factors in determining the acceptability of a transportation system are not only the specific fuel consumption and the energy and material costs of vehicles, as it is common belief, but also the energy and material costs for infrastructure construction as well as its intensity of use (with special focus on load factor of vehicles). The latter become the dominant factors in HST modality, due to technological and safety reasons that require high energy-cost materials and low intensity of traffic. This translates into very high thermodynamic and environmental costs for passenger and freight transported, among which an embodied energy demand up to 1.44�MJ/p-km and 3.09�MJ/t-km, respectively.","URL":"http://www.sciencedirect.com/science/article/B6V2S-4S094WB-2/1/18a05082957327c412c018b9e75b40c6","DOI":"10.1016/j.energy.2008.01.010","call-number":"0003","author":[{"family":"Federici","given":"M."},{"family":"Ulgiati","given":"S."},{"family":"Basosi","given":"R."}],"issued":{"date-parts":[["2008",5]]},"accessed":{"date-parts":[["2008",5,11]]}}},{"key":"http://zotero.org/users/39885/items/57T6735R","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/57T6735R","type":"book","title":"Models Of Nature: Ecology, Conservation, and Cultural Revolution in Soviet Russia","publisher":"University of Pittsburgh Press","call-number":"0050","shortTitle":"Models Of Nature","author":[{"family":"Weiner","given":"D. R."}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/587AEXKU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/587AEXKU","type":"article-journal","title":"D3: Data-Driven Documents","container-title":"IEEE Transactions on Visualization and Computer Graphics","page":"2301-2309","volume":"17","issue":"12","source":"IEEE Xplore","abstract":"Data-Driven Documents (D3) is a novel representation-transparent approach to visualization for the web. Rather than hide the underlying scenegraph within a toolkit-specific abstraction, D3 enables direct inspection and manipulation of a native representation: the standard document object model (DOM). With D3, designers selectively bind input data to arbitrary document elements, applying dynamic transforms to both generate and modify content. We show how representational transparency improves expressiveness and better integrates with developer tools than prior approaches, while offering comparable notational efficiency and retaining powerful declarative components. Immediate evaluation of operators further simplifies debugging and allows iterative development. Additionally, we demonstrate how D3 transforms naturally enable animation and interaction with dramatic performance improvements over intermediate representations.","DOI":"10.1109/TVCG.2011.185","ISSN":"1077-2626","author":[{"family":"Bostock","given":"M."},{"family":"Ogievetsky","given":"V."},{"family":"Heer","given":"J."}],"issued":{"date-parts":[["2011",12]]}}},{"key":"http://zotero.org/users/39885/items/59RR5V4I","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/59RR5V4I","type":"book","title":"Transboundary risk governance","collection-title":"Earthscan risk and society series","publisher":"Earthscan","publisher-place":"Sterling, VA","number-of-pages":"1 online resource ( xvii, 155 p.)","source":"UQ Library Search, Summon 2.0","event-place":"Sterling, VA","URL":"http://www.UQL.eblib.com.AU/EBLWeb/patron/?target=patron&extendedid=P_483774","ISBN":"978-1-84977-464-2","call-number":"GE190.B29","language":"English","author":[{"family":"Lidskog","given":"Rolf"},{"family":"Soneryd","given":"Linda"},{"family":"Uggla","given":"Ylva"},{"literal":"Ebooks Corporation"}],"issued":{"date-parts":[["2010"]]},"accessed":{"date-parts":[["2015",10,7]]}}},{"key":"http://zotero.org/users/39885/items/5BITTW9B","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5BITTW9B","type":"book","title":"Unity Through Diversity: A Festschrift for Ludwig Von Bertalanffy","publisher":"Gordon and Breach Science Publishers","call-number":"0008","shortTitle":"Unity Through Diversity","author":[{"family":"Bertalanffy","given":"L.","non-dropping-particle":"von"}],"issued":{"date-parts":[["1973"]]}}},{"key":"http://zotero.org/users/39885/items/5CDSUEV2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5CDSUEV2","type":"article","title":"Enterprise Risk Management – Integrated Framework","publisher":"The Committee of Sponsoring Organizations of the Treadway Commission","URL":"http://www.macs.hw.ac.uk/~andrewc/erm2/reading/ERM%20-%20COSO%20Application%20Techniques.pdf","language":"English","author":[{"family":"COSO","given":""}],"issued":{"date-parts":[["2004"]]},"accessed":{"date-parts":[["2015",8,26]]}}},{"key":"http://zotero.org/users/39885/items/5CEIKMP9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5CEIKMP9","type":"article","title":"UMLTM for Systems Engineering","publisher":"Object Management Group","abstract":"Request For Proposal","URL":"http://www.omg.org/cgi-bin/doc?ad/03-03-41.pdf","call-number":"0000","author":[{"family":"OMG","given":""}],"issued":{"date-parts":[["2003"]]}}},{"key":"http://zotero.org/users/39885/items/5CT8WA2G","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5CT8WA2G","type":"book","title":"Feynman lectures on computation","publisher":"Penguin","publisher-place":"London","event-place":"London","ISBN":"978-0-14-028451-5","author":[{"family":"Feynman","given":"Richard"}],"issued":{"date-parts":[["1999"]]}}},{"key":"http://zotero.org/users/39885/items/5D6GZRAC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5D6GZRAC","type":"webpage","title":"MMSD – final report","container-title":"International Institute for Environment and Development","abstract":"Presenting the principal conclusions of the IIED/WBCSD project Mining, Minerals and Sustainable Development (MMSD) - the most ambitious study yet undertaken on the role of minerals in sustainable development. Drawing on the project’s two-year process of consultation and research, Breaking New Ground describes the minerals sector and its relationship with concepts of sustainable development, and offers an Agenda for Change for immediate and future actions.","URL":"http://www.iied.org/mmsd-final-report","author":[{"family":"IIED","given":""}],"accessed":{"date-parts":[["2015",11,1]]}}},{"key":"http://zotero.org/users/39885/items/5GFQ3KB9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5GFQ3KB9","type":"book","title":"Power Quality in Electrical Systems","publisher":"McGraw-Hill Professional","edition":"1","ISBN":"0-07-147075-1","call-number":"0009","author":[{"family":"Kusko","given":"Alexander"},{"family":"Thompson","given":"Marc T."}],"issued":{"date-parts":[["2007",5,31]]}}},{"key":"http://zotero.org/users/39885/items/5GGNQ6SC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5GGNQ6SC","type":"article-journal","title":"Visualizing System Engineering and Project Management as an Integrated Process","container-title":"INCOSE International Symposium","page":"573-580","volume":"7","issue":"1","source":"Wiley Online Library","abstract":"In many project environments System Engineering and Project Management are managed separately. This situation is aggravated by the discipline segregation by universities and by the corresponding professional organizations. The International Council on System Engineering (INCOSE) and Project Management Institute (PMI) operate independently and usually don't participate in each others' conferences. Project Management and System Engineering tools are rarely integrated. INCOSE members are usually not members of PMI and vice versa. Project Management, the integration of business management and technical management into systems management, requires discipline and informed implementation. The process model explained here and detailed in our recent book, Visualizing Project Management (Wiley & Sons), is a significant step to visualizing and applying these inseparable processes.","URL":"http://onlinelibrary.wiley.com/doi/10.1002/j.2334-5837.1997.tb02221.x/abstract","DOI":"10.1002/j.2334-5837.1997.tb02221.x","ISSN":"2334-5837","journalAbbreviation":"INCOSE International Symposium","language":"en","author":[{"family":"Mooz","given":"Harold"},{"family":"Forsberg","given":"Kevin"}],"issued":{"date-parts":[["1997",8,1]]},"accessed":{"date-parts":[["2015",3,17]]}}},{"key":"http://zotero.org/users/39885/items/5II38GU2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5II38GU2","type":"article-journal","title":"The law of evolution as a maximal principle","container-title":"Human Biology","page":"167–194","volume":"17","issue":"3","source":"Google Scholar","URL":"http://www.jstor.org/stable/41447607","author":[{"family":"Lotka","given":"Alfred J."}],"issued":{"date-parts":[["1945"]]},"accessed":{"date-parts":[["2016",3,6]]}}},{"key":"http://zotero.org/users/39885/items/5IXGVH52","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5IXGVH52","type":"article-journal","title":"Emergy and emergy algebra explained by means of ingenuous set theory","container-title":"Ecological Modelling","collection-title":"Non-equilibrium Thermodynamics in Ecology","page":"2903-2907","volume":"222","issue":"16","source":"ScienceDirect","abstract":"Emergy is an important concept that has originated several effects in ecology, systems ecology and sustainability science. Its communication, however, has always presented several problems, since it does not follow the same rules of conservation as other energy-based approaches. Attempts have been made to clarify emergy by means of more formal/mathematical approaches, but the problem persists. In this paper, we have introduced a view of emergy and of its algebra based on ingenuous set theory. By means of this simple tool, emergy can be defined as the set of solar exergy that is directly and indirectly necessary to make a product. The operation that correctly sums the emergy “carried” by the inputs to a process is the union. This definition and the operation of union are able to account for all the rules of emergy algebra.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380011002936","DOI":"10.1016/j.ecolmodel.2011.05.013","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Bastianoni","given":"Simone"},{"family":"Morandi","given":"Fabiana"},{"family":"Flaminio","given":"Tommaso"},{"family":"Pulselli","given":"Riccardo M."},{"family":"Tiezzi","given":"Elisa B. P."}],"issued":{"date-parts":[["2011",8,24]]},"accessed":{"date-parts":[["2015",4,4]]}}},{"key":"http://zotero.org/users/39885/items/5JNVC2H5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5JNVC2H5","type":"article-journal","title":"RCS: a system for version control","container-title":"Software—Practice & Experience","source":"CiteSeer","abstract":"An important problem in program development and maintenance is version control, i.e., the task of keeping a software system consisting of many versions and configurations well organized. The Revision Control System (RCS) is a software tool that assists with that task. RCS manages revisions of text documents, in particular source programs, documentation, and test data. It automates the storing, retrieval, logging and identification of revisions, and it provides selection mechanisms for composing configurations. This paper introduces basic version control concepts and discusses the practice of version control using RCS. For conserving space, RCS stores deltas, i.e., differences between successive revisions. Several delta storage methods are discussed. Usage statistics show that RCS’s delta storage method is space and time efficient. The paper concludes with a detailed survey of version control tools.","shortTitle":"RCS","author":[{"family":"Tichy","given":"Walter F."}],"issued":{"date-parts":[["1985"]]}}},{"key":"http://zotero.org/users/39885/items/5JQ5N38N","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5JQ5N38N","type":"book","title":"Responding to community outrage: Strategies for effective risk communication","publisher":"AIHA","source":"Google Scholar","URL":"https://books.google.com.au/books?hl=en&lr=&id=M9-bQsx8TnMC&oi=fnd&pg=PA1&dq=sandman+responding+to+community+outrage&ots=U_7PCVOX8I&sig=Tidb8nGcU4hWqVXVTpQikCEYZUs","shortTitle":"Responding to community outrage","author":[{"family":"Sandman","given":"Peter M."}],"issued":{"date-parts":[["1993"]]},"accessed":{"date-parts":[["2015",10,25]]}}},{"key":"http://zotero.org/users/39885/items/5M4Q47S3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5M4Q47S3","type":"book","title":"The Blackwell encyclopaedia of political thought","publisher":"B. Blackwell","publisher-place":"Oxford  UK ;;New York  NY  USA","event-place":"Oxford  UK ;;New York  NY  USA","ISBN":"978-0-631-22781-6","call-number":"0105","author":[{"family":"Miller","given":"David"}],"issued":{"date-parts":[["1987"]]}}},{"key":"http://zotero.org/users/39885/items/5MKNAPRF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5MKNAPRF","type":"paper-conference","title":"Natural areas as necessary components of man's total environment","container-title":"Trans North Am Wildl Nat Res Conf","source":"Google Scholar","URL":"http://agris.fao.org/agris-search/search.do?recordID=US201303277784","author":[{"family":"Odum","given":"Eugene P."},{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1972"]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/5NDFG3DE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5NDFG3DE","type":"article-journal","title":"Stakeholder and Public Involvement in Risk Governance","container-title":"International Journal of Disaster Risk Science","page":"8-20","volume":"6","issue":"1","source":"link.springer.com","URL":"http://link.springer.com/article/10.1007/s13753-015-0037-6","DOI":"10.1007/s13753-015-0037-6","ISSN":"2095-0055, 2192-6395","journalAbbreviation":"Int J Disaster Risk Sci","language":"en","author":[{"family":"Renn","given":"Ortwin"}],"issued":{"date-parts":[["2015",2,25]]},"accessed":{"date-parts":[["2015",10,7]]}}},{"key":"http://zotero.org/users/39885/items/5NDG9WZT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5NDG9WZT","type":"article-journal","title":"Ecological Potential and Analogue Circuits For the Ecosystem","container-title":"American Scientist","page":"1-8","volume":"48","issue":"1","call-number":"0070","author":[{"family":"Odum","given":"H.T."}],"issued":{"date-parts":[["1960"]]}}},{"key":"http://zotero.org/users/39885/items/5NSF8ARH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5NSF8ARH","type":"article-journal","title":"Techniques for the Analysis of Risks in Major Projects","container-title":"The Journal of the Operational Research Society","page":"567-572","volume":"49","issue":"6","source":"JSTOR","abstract":"Risk management currently has an important bearing on the outcomes of major projects. It usually consists of three core areas: analysis, evaluation and control. One of the vital decisions to be made within the area of risk analysis is the choice of techniques to be used which are broadly classified under qualitative and quantitative methods. Through a questionnaire, this paper identifies the most successful risk analysis techniques within both categories. Over one hundred large companies within the construction industry, and every oil and gas operator in the UK were approached. The areas surveyed on were: risk analysis techniques employed by the companies; the relative success of the techniques; the size and range of activities of the company and the company's policy on identifying and responding to specific risks encountered during any particular project. The main conclusions are that personal and corporate experience, and engineering judgement are the most successful qualitative techniques; scenario analysis, EMV, ENPV, and break-even analysis being the principal quantitative techniques.","URL":"http://www.jstor.org/stable/3010665","DOI":"10.2307/3010665","ISSN":"0160-5682","journalAbbreviation":"The Journal of the Operational Research Society","author":[{"family":"Baker","given":"S."},{"family":"Ponniah","given":"D."},{"family":"Smith","given":"S."}],"issued":{"date-parts":[["1998",6,1]]},"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/5PFX8TZX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5PFX8TZX","type":"book","title":"Fault tree handbook with aerospace applications","publisher":"Office of safety and mission assurance NASA headquarters","source":"Google Scholar","author":[{"family":"Stamatelatos","given":"Michael"},{"family":"Caraballo","given":"José"}],"issued":{"date-parts":[["2002"]]}}},{"key":"http://zotero.org/users/39885/items/5PJD49QZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5PJD49QZ","type":"book","title":"Whose justice? Which rationality?","publisher":"University of Notre Dame Press","publisher-place":"Notre Dame  Ind.","event-place":"Notre Dame  Ind.","ISBN":"978-0-268-01942-6","call-number":"1531","author":[{"family":"MacIntyre","given":"Alasdair"}],"issued":{"date-parts":[["1988"]]}}},{"key":"http://zotero.org/users/39885/items/5PTQ8GRD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5PTQ8GRD","type":"book","title":"Creative Problem Solving: Total Systems Intervention","publisher":"Wiley","edition":"1","ISBN":"0-471-93052-0","call-number":"0119","shortTitle":"Creative Problem Solving","author":[{"family":"Flood","given":"Robert L."},{"family":"Jackson","given":"Michael C."}],"issued":{"date-parts":[["1991",8,22]]}}},{"key":"http://zotero.org/users/39885/items/5QBAE4C7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5QBAE4C7","type":"article-journal","title":"Reflecting on SSM: The Link Between Root Definitions and Conceptual Models","container-title":"Systems Research and Behavioral Science","page":"153-168","volume":"14","issue":"3","abstract":"In a previous paper the authors argued that the line dividing the �real world� from the �systems thinking world� in Soft Systems Methodology (SSM) should be disregarded lest it be taken to indicate a false dualism. One of the supporting reasons for the elimination of this line was the problem that arose in practice concerning the link between root definitions and conceptual models, constantly encountered during the 25 years in which SSM has been used and developed. The relationship between root definitions and conceptual models was taken to be based only on an instrumental �logic�. Here it is argued that root definitions define and induce dispositions. The dispositions root definitions define are expressed in terms of conceptual models, while the dispositions they induce are the source of the effects they have on the problem-solving practice. In this way, the sole dependency on instrumental logic as the link between the two is loosened, allowing different forms of relationship between the two to emerge, including ones linked more closely to the evolving content of a systems study. � 1997 John Wiley & Sons, Ltd.","URL":"http://dx.doi.org/10.1002/(SICI)1099-1743(199705/06)14:3<153::AID-SRES134>3.0.CO;2-H","DOI":"10.1002/(SICI)1099-1743(199705/06)14:3<153::AID-SRES134>3.0.CO;2-H","call-number":"0030","shortTitle":"Reflecting on SSM","author":[{"family":"Checkland","given":"Peter"},{"family":"Tsouvalis","given":"Costas"}],"issued":{"date-parts":[["1997"]]},"accessed":{"date-parts":[["2008",5,20]]}}},{"key":"http://zotero.org/users/39885/items/5RFMRKCK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5RFMRKCK","type":"article-journal","title":"Editorial","container-title":"Ecological Modelling","collection-title":"Non-equilibrium Thermodynamics in Ecology","page":"2867-2868","volume":"222","issue":"16","source":"ScienceDirect","URL":"http://www.sciencedirect.com/science/article/pii/S0304380011002900","DOI":"10.1016/j.ecolmodel.2011.05.010","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Jorgensen","given":"Sven Erik"}],"issued":{"date-parts":[["2011",8,24]]},"accessed":{"date-parts":[["2015",4,4]]}}},{"key":"http://zotero.org/users/39885/items/5RGR36QI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5RGR36QI","type":"book","title":"Programming Android","publisher":"O'Reilly Media","number-of-pages":"502","edition":"1","source":"Amazon.com","ISBN":"1-4493-8969-4","author":[{"family":"Mednieks","given":"Zigurd"},{"family":"Dornin","given":"Laird"},{"family":"Meike","given":"G. Blake"},{"family":"Nakamura","given":"Masumi"}],"issued":{"date-parts":[["2011",8,5]]}}},{"key":"http://zotero.org/users/39885/items/5RJJB83E","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5RJJB83E","type":"article-journal","title":"Assessing the effectiveness of online community opposition to precinct planning","container-title":"Australian Planner","page":"51-59","volume":"52","issue":"1","source":"Taylor and Francis+NEJM","abstract":"Since its inception the Internet has generated debate over its likely role in reinvigorating democracy. The more recent appearance of social media and its ubiquitous use via smart phones has added fuel to the debate. Within planning literature, discussion has centred on the value of social media as a tool for community participation. This paper explores the use of social media by a community group in their opposition to a large urban regeneration project – the North Ryde Station Urban Activation Precinct – in Sydney's north-western suburbs. Utilising the research technique of sentiment analysis, a picture of the community group's activities can be captured, including the community's self-organisation, information distribution, recruitment, analysis of issues and sentiment at different times during master planning process. In this instance, the community group is led by a small number of people, while the majority has a low-participation rate. The community group takes a generally positive approach to distributing information and motivating local residents to get involved in the opposition of the master plan.","URL":"http://dx.doi.org/10.1080/07293682.2015.1019755","DOI":"10.1080/07293682.2015.1019755","ISSN":"0729-3682","author":[{"family":"Williamson","given":"Wayne"},{"family":"Ruming","given":"Kristian"}],"issued":{"date-parts":[["2015",1,2]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/5SJKKZVJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5SJKKZVJ","type":"article","title":"Coal Seam"}},{"key":"http://zotero.org/users/39885/items/5T5B7FRW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5T5B7FRW","type":"book","title":"Report of the Parliamentary Select Committee on Aboriginal Tribes, (British settlements.)","publisher":"London, Pub. for the Society by W. Ball [etc.]","number-of-pages":"165","source":"Internet Archive","abstract":"Book digitized by Google from the library of Oxford University and uploaded to the Internet Archive by user tpb.","URL":"http://archive.org/details/reportparliamen00britgoog","language":"eng","author":[{"literal":"Great Britain. Parliament. House of Commons. Select Committee on Aboriginal Tribes"},{"literal":"Aborigines Protection Society"}],"issued":{"date-parts":[["1837"]]},"accessed":{"date-parts":[["2016",1,28]]}}},{"key":"http://zotero.org/users/39885/items/5T997PGK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5T997PGK","type":"chapter","title":"Decision-theoretic rough set models","container-title":"Rough Sets and Knowledge Technology","publisher":"Springer","page":"1–12","source":"Google Scholar","URL":"http://link.springer.com/chapter/10.1007/978-3-540-72458-2_1","author":[{"family":"Yao","given":"Yiyu"}],"issued":{"date-parts":[["2007"]]},"accessed":{"date-parts":[["2015",4,4]]}}},{"key":"http://zotero.org/users/39885/items/5T9TUQ8F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5T9TUQ8F","type":"article-journal","title":"Assessment of Precious Metal Flows During Preprocessing of Waste Electrical and Electronic Equipment","container-title":"Journal of Industrial Ecology","page":"791-810","volume":"13","issue":"5","source":"CrossRef","URL":"http://onlinelibrary.wiley.com.ezproxy.lib.rmit.edu.au/doi/10.1111/j.1530-9290.2009.00171.x/full","DOI":"10.1111/j.1530-9290.2009.00171.x","ISSN":"10881980","author":[{"family":"Chancerel","given":"Perrine"},{"family":"Meskers","given":"Christina E.M."},{"family":"HagelÃ¼ken","given":"Christian"},{"family":"Rotter","given":"Vera Susanne"}],"issued":{"date-parts":[["2009",10]]},"accessed":{"date-parts":[["2011",3,19]]}}},{"key":"http://zotero.org/users/39885/items/5TT7B5DD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5TT7B5DD","type":"paper-conference","title":"Asynchronous Functional Reactive Programming for GUIs","container-title":"Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation-PLDI’13","publisher":"ACM Press","source":"Google Scholar","URL":"http://dash.harvard.edu/handle/1/12872183","author":[{"family":"Czaplicki","given":"Evan"},{"family":"Chong","given":"Stephen N."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",8,21]]}}},{"key":"http://zotero.org/users/39885/items/5W46C8EM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5W46C8EM","type":"article-journal","title":"Energy analysis and the coupling of man and estuaries","container-title":"Environmental Management","page":"297-315","volume":"1","issue":"4","source":"link.springer.com.ezproxy.library.uq.edu.au","abstract":"New concepts and insights concerning human and natural systems in the coastal zone are emerging from recent energy analysis and synthesis studies. By using new concepts for measuring the quality of energy, one can express the work of ecosystems and human economies in equivalent terms. From energy models and new energy quality evaluations, one can learn what kinds of coastal systems maximize power, are competitive, economically vital, and likely to have a survival advantage. Energy analysis and synthesis is aided by energy circuit diagrams. Models of the coastal zone that emphasize the change in external driving functions related to world energy sources provide insights and some predictive abilities that are not found in economic studies, since money flows alone do not evaluate external driving energies.This paper suggests four procedures for coastal planning: 1) calculation of investment ratio in units of equal quality to determine which projects are economic in a broad sense, 2) development of energy signatures for coastal ecosystems, 3) determination of which interface ecosystems develop the best energy flows, and 4) development of regional models that include the main features of human and natural ecosystems.","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/article/10.1007/BF01865858","DOI":"10.1007/BF01865858","ISSN":"0364-152X, 1432-1009","journalAbbreviation":"Environmental Management","language":"en","author":[{"family":"Odum","given":"Howard T."},{"family":"Kemp","given":"W."},{"family":"Sell","given":"Maurice"},{"family":"Boynton","given":"Walter"},{"family":"Lehman","given":"M."}],"issued":{"date-parts":[["1977",7]]},"accessed":{"date-parts":[["2016",3,14]]}}},{"key":"http://zotero.org/users/39885/items/5WNMR3IA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5WNMR3IA","type":"article-journal","title":"Leibniz' Scheitern im Oberharzer Silberbergbau – neu betrachtet, insbesondere unter klimatischen Gesichtspunkten","container-title":"Studia Leibnitiana","page":"186-207","volume":"42","issue":"2","source":"JSTOR","abstract":"Besides the well-known difficulties with the Harz miners Leibniz encountered a series of other unfavourable circumstances. It is generally known that Leibniz was active in the Harz silver mining district in the so-called „Little Ice Age”. Less known is that both phases of his activities 1680-1685/86 (essentially trials to introduce windmills for pumping the water out of the mines) and 1692-1695 (experiments to improve the shaft hoisting system) coincided just with the coldest years in central Europe: for example in the 17th century Lake Constance was only totally frozen twice: 1684 and 1695. Concerning the wind regime there are no indications that they were fundamentally different from the ones today. Leibniz did not have available quantitative meteorological observations. Today we know the relation of the average wind speed at the coast, where Leibniz had observed windmills in Holland, and in the Harz mountains. Taking into account that the wind energy is a function of the cube of the wind speed Leibniz had only 40% of the wind energy of the coast available in the Harz. Other unfortunate circumstances which contributed to Leibniz' failure in the Harz mining district were: an agreement favourable for Leibniz, but one that from the outset set the miners against him; after 156 years of driving a dewatering tunnel the fact that the tunnel connected with a favourably located mine just in the moment when Leibniz wanted to started his pumping experiments there using a wind mill; the absence of perpendicular shafts common today and his inability to convince the miners of his ideas and to build a team.","URL":"http://www.jstor.org/stable/41698260","ISSN":"0039-3185","journalAbbreviation":"Studia Leibnitiana","author":[{"family":"WELLMER","given":"FRIEDRICH-WILHELM"},{"family":"GOTTSCHALK","given":"JÜRGEN"}],"issued":{"date-parts":[["2010"]]},"accessed":{"date-parts":[["2016",1,25]]}}},{"key":"http://zotero.org/users/39885/items/5WS7BC7Q","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5WS7BC7Q","type":"article","title":"Activity 1: Chemistry, origins and hydrogeology of coal","publisher":"Queensland Department of Natural Resources and Mines","abstract":"Activity 1: Chemistry, origins and hydrogeology of coal","URL":"https://www.dnrm.qld.gov.au/water/catchments-planning/healthy-headwaters/coal-seam-gas-water-feasibility-study/activity-1","shortTitle":"Activity 1","language":"en-AU","author":[{"family":"DNRM","given":""}],"issued":{"date-parts":[["2013",11,6]]},"accessed":{"date-parts":[["2015",8,12]]}}},{"key":"http://zotero.org/users/39885/items/5XPJB9IQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/5XPJB9IQ","type":"article-journal","title":"Obsessions, responsibility and guilt: two case reports suggesting a common and specific aetiology","container-title":"Behaviour Research and Therapy","page":"143-145","volume":"32","issue":"1","abstract":"Inflated responsibility, guilt and the psychological fusion of thought and action feature prominently in contemporary accounts of obsessional phenomena. Two cases are reported in which the presence of these features can be explained by a specific formative learning experience. Some implications for therapy are considered.","URL":"http://www.sciencedirect.com/science/article/B6V5W-45XTVNV-6K/1/b773bf790dff8beb98255d6612ecb2d0","DOI":"10.1016/0005-7967(94)90096-5","call-number":"0025","shortTitle":"Obsessions, responsibility and guilt","author":[{"family":"Tallis","given":"Frank"}],"issued":{"date-parts":[["1994",1]]},"accessed":{"date-parts":[["2008",5,11]]}}},{"key":"http://zotero.org/users/39885/items/6232GE6A","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6232GE6A","type":"book","title":"Struggle for Synthesis","publisher":"Harvard University Press","ISBN":"0-674-84545-5","call-number":"0013","author":[{"family":"Loemker","given":"Leroy E."}],"issued":{"date-parts":[["1973",5,3]]}}},{"key":"http://zotero.org/users/39885/items/62JFH778","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/62JFH778","type":"book","title":"The poetics of space","publisher":"Beacon Press","publisher-place":"Boston","event-place":"Boston","ISBN":"978-0-8070-6439-9","call-number":"0195","author":[{"family":"Bachelard","given":"Gaston"}],"issued":{"date-parts":[["1969"]]}}},{"key":"http://zotero.org/users/39885/items/63D77XU7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/63D77XU7","type":"thesis","title":"Energy return on investment: Theory and application to biophysical economics","publisher":"Environmental Science","publisher-place":"United States -- New York","event-place":"United States -- New York","abstract":"This dissertation is comprised of an introduction and five manuscripts split into two main sections: theory and application. Manuscripts one and four have been published, manuscript three has been accepted for publication, and manuscripts two and five are currently in review for publication. The   theory  sections contains the first two manuscripts.                 The first manuscript is a review of the literature on Energy Return on Investment (EROI) analysis. I cover five areas in this manuscript, including: (1) EROI and corn ethanol, (2) EROI for most major fuels, (3) alternative EROI applications, (4) EROI and the economy, and (5) the minimum EROI for society.                 The second manuscript provides a methodological framework for performing EROI analysis. I cover the following areas in this manuscript: (1) boundaries of analysis, (2) energy quality corrections, (3) energy intensity values, and lastly (4) alternative EROI statistics.                 The applications  section contains manuscripts three through five. The third manuscript provides a biophysical model of economic growth indicating that the feedback mechanisms between oil supply and oil price have created a growth paradox: maintaining business as usual economic growth will require the production of new sources of oil, yet the only sources of oil remaining require high oil prices, thus hampering economic growth.                 The fourth manuscript is a study on the geographic variability of corn ethanol production. The main conclusions of this study were: (1) the statistical error associated with calculating the EROI of corn ethanol was enough to cast doubt as to whether corn ethanol yields net energy, and (2) failure to account for the geographic variation in corn yields and fertilizer inputs artificially inflated previous estimates of the EROI or corn ethanol.                 In the fifth manuscript I measure the impact of the Urban Heat Island within the metropolitan area of San Juan, Puerto Rico, on the electricity demand within the city. I calculated that the UHI within the San Juan area accounts for about four percent of the electricity demand every day, which accumulates to roughly 2.2 million dollars a month or 26 million dollars a year in electricity charges.                 Keywords : EROI, Energy, oil, economic growth, peak oil, corn ethanol, protocol, UHI, electricity demand, minimum EROI, net energy, oil price","URL":"http://search.proquest.com/docview/851890220?accountid=13552","note":"Ph.D.; Environmental Science","author":[{"family":"Murphy","given":"David J."}],"issued":{"date-parts":[["2010"]]}}},{"key":"http://zotero.org/users/39885/items/63P946ZG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/63P946ZG","type":"article-journal","title":"How to make a decision: The analytic hierarchy process","container-title":"European Journal of Operational Research","collection-title":"Desicion making by the analytic hierarchy process: Theory and applications","page":"9-26","volume":"48","issue":"1","source":"ScienceDirect","abstract":"This paper serves as an introduction to the Analytic Hierarchy Process — A multicriteria decision making approach in which factors are arranged in a hierarchic structure. The principles and the philosophy of the theory are summarized giving general background information of the type of measurement utilized, its properties and applications.","URL":"http://www.sciencedirect.com/science/article/pii/037722179090057I","DOI":"10.1016/0377-2217(90)90057-I","ISSN":"0377-2217","shortTitle":"How to make a decision","journalAbbreviation":"European Journal of Operational Research","author":[{"family":"Saaty","given":"Thomas L."}],"issued":{"date-parts":[["1990",9,5]]},"accessed":{"date-parts":[["2016",2,15]]}}},{"key":"http://zotero.org/users/39885/items/63X475D3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/63X475D3","type":"book","title":"The decline of the age of oil","publisher":"Pluto Press Australia","ISBN":"1-86403-021-6","call-number":"0035","author":[{"family":"Fleay","given":"Brian J"}],"issued":{"date-parts":[["1995"]]}}},{"key":"http://zotero.org/users/39885/items/65MK6947","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/65MK6947","type":"webpage","title":"Office of Groundwater Impact Assessment (OGIA)","container-title":"Department of Natural Resources and Mines","genre":"document","abstract":"The role of the Office of Groundwater Impact Assessment","URL":"https://www.dnrm.qld.gov.au/ogia/role","language":"en-AU","author":[{"family":"Mines","given":"Queensland Department of Natural Resources","dropping-particle":"and"}],"issued":{"date-parts":[["2015",3,6]]},"accessed":{"date-parts":[["2015",10,13]]}}},{"key":"http://zotero.org/users/39885/items/679IEJB7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/679IEJB7","type":"article-journal","title":"A rigourous mathematical framework for computing a sustainability ratio: the emergy","container-title":"Journal of Environmental Informatics","page":"75–89","volume":"20","issue":"2","source":"Google Scholar","URL":"http://hal.univ-nantes.fr/hal-00841024/","shortTitle":"A rigourous mathematical framework for computing a sustainability ratio","author":[{"family":"Le Corre","given":"Olivier"},{"family":"Truffet","given":"Laurent"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",12,4]]}}},{"key":"http://zotero.org/users/39885/items/67ACW9GV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/67ACW9GV","type":"article-journal","title":"Eutrophication and the macroscope","container-title":"Hydrobiologia","page":"5-19","volume":"629","source":"CrossRef","URL":"http://www.springerlink.com.ezproxy.lib.rmit.edu.au/content/01332wx5j4611u5t/","DOI":"10.1007/s10750-009-9759-z","ISSN":"0018-8158, 1573-5117","author":[{"family":"Nixon","given":"Scott W."}],"issued":{"date-parts":[["2009",4,18]]},"accessed":{"date-parts":[["2011",8,28]]}}},{"key":"http://zotero.org/users/39885/items/67BRQS5I","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/67BRQS5I","type":"book","title":"Philosophical papers and letters : a selection / translated and edited, with an introduction by Leroy E. Loemker","publisher":"Dordrecht : D. Reidel","edition":"2d ed","ISBN":"0-391-00030-6","note":"Distributed in the U.S.A. by Humanities Press, New York","author":[{"family":"Leibniz","given":"Gottfried Wilhelm"},{"family":"Loemker","given":"Leroy E"}],"issued":{"date-parts":[["1970"]]}}},{"key":"http://zotero.org/users/39885/items/68SI4WWC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/68SI4WWC","type":"book","title":"Basic electricity : based on Schaum's outline of basic electricity","publisher":"McGraw-Hill","publisher-place":"New York","event-place":"New York","ISBN":"978-0-07-139839-8","author":[{"family":"Gussow","given":"Milton"}],"issued":{"date-parts":[["2002"]]}}},{"key":"http://zotero.org/users/39885/items/6A4NEPPE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6A4NEPPE","type":"thesis","title":"Norwegian natural gas transportation systems","publisher":"Norwegian University of Science and Technology","source":"Google Scholar","call-number":"0001","author":[{"family":"Dahl","given":"H. J"}],"issued":{"date-parts":[["2001"]]}}},{"key":"http://zotero.org/users/39885/items/6C3S9VET","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6C3S9VET","type":"article-journal","title":"Quality assurance in hydrological measurement/L'assurance de qualité dans la mesure hydrologique","container-title":"Hydrological sciences journal","page":"825–834","volume":"44","issue":"5","source":"Google Scholar","author":[{"family":"Hudson","given":"H. R"},{"family":"McMillan","given":"D. A"},{"family":"Pearson","given":"C. P"}],"issued":{"date-parts":[["1999"]]}}},{"key":"http://zotero.org/users/39885/items/6CB6S34T","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6CB6S34T","type":"thesis","title":"The Biogeochemistry of Strontium: With Discussion on the Ecological Integration of Elements","publisher":"Yale University","publisher-place":"United States -- Connecticut","number-of-pages":"383","genre":"Ph.D.","source":"ProQuest","event-place":"United States -- Connecticut","URL":"http://search.proquest.com.ezproxy.library.uq.edu.au/docview/288090798/citation?accountid=14723","shortTitle":"The Biogeochemistry of Strontium","language":"English","author":[{"family":"Odum","given":"Howard Thomas"}],"issued":{"date-parts":[["1950"]]},"accessed":{"date-parts":[["2015",2,11]]}}},{"key":"http://zotero.org/users/39885/items/6DVB77UM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6DVB77UM","type":"article","title":"Draft National Coal Seam Gas Harmonised Regulatory Framework: Submission to the Standing Council of Energy and Resources (SCER) as part of the consultation process to establish a national harmonised framework for the development of Coal Seam Gas in Australia","publisher":"The University of Queensland","URL":"http://www.scer.gov.au/files/2012/03/University-of-Queensland.pdf","shortTitle":"Draft National Coal Seam Gas Harmonised Regulatory Framework","author":[{"family":"Hunter","given":"Tina"},{"family":"Garnett","given":"Andrew"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/6DZC984M","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6DZC984M","type":"webpage","title":"The Lantern Journal - Scholarly Resources - Playing with Fire","URL":"http://www.thelantern.com.au/resource_detail.php?id=248","author":[{"family":"Neeb","given":"Gunter"}],"accessed":{"date-parts":[["2010",7,8]]}}},{"key":"http://zotero.org/users/39885/items/6J329EES","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6J329EES","type":"book","title":"Modelling methodology for physiology and medicine","publisher":"Academic Press","publisher-place":"San Diego","event-place":"San Diego","ISBN":"978-0-12-160245-1","author":[{"family":"Carson","given":"Ewart"}],"issued":{"date-parts":[["2001"]]}}},{"key":"http://zotero.org/users/39885/items/6KZAFR7P","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6KZAFR7P","type":"article-journal","title":"Emergy and ecosystem complexity","container-title":"Communications in Nonlinear Science and Numerical Simulation","page":"310-321","volume":"14","issue":"1","abstract":"The question \"What drives complexity?\" is addressed in this paper. To answer this question, we explore the way energy and material resources of different quality flow through ecosystems and support, directly and indirectly, ecosystems growth and development. Processes of resource transformation throughout the ecosystem build order, cycle materials, generate and sustain information. Energy drives all these processes and energetic principles explain much of what is observed, including energy degradation according to the laws of thermodynamics. Emergy, a quantitative measure of the global environmental work supporting ecosystem dynamics, is used here in order to provide a deeper understanding of complexity growth and decline in ecosystems. Ecosystem complexity is discussed in this paper in relation to changes in structure, organization and functional capacity, as explained by changes in emergy, empower, and transformity.","URL":"http://www.sciencedirect.com/science/article/B6X3D-4P5R60M-2/1/bdf3c68acacf233045daf664874de2c0","DOI":"10.1016/j.cnsns.2007.05.028","call-number":"0006","author":[{"family":"Ulgiati","given":"Sergio"},{"family":"Brown","given":"Mark T."}],"issued":{"date-parts":[["2009",1]]},"accessed":{"date-parts":[["2008",6,29]]}}},{"key":"http://zotero.org/users/39885/items/6N5H2M86","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6N5H2M86","type":"book","title":"The individual and the cosmos in Renaissance philosophy","publisher":"University of Pennsylvania Press","publisher-place":"Philadelphia  Pa.","event-place":"Philadelphia  Pa.","ISBN":"978-0-8122-1036-1","call-number":"0234","author":[{"family":"Cassirer","given":"Ernst"}],"issued":{"date-parts":[["1972"]]}}},{"key":"http://zotero.org/users/39885/items/6NKWP9BS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6NKWP9BS","type":"article-journal","title":"Vandervert's solution to the mind-body problem: A response to vandervert","container-title":"New Ideas in Psychology","page":"129-134","volume":"13","issue":"2","source":"ScienceDirect","URL":"http://www.sciencedirect.com/science/article/pii/0732118X94000488","DOI":"10.1016/0732-118X(94)00048-8","ISSN":"0732-118X","shortTitle":"Vandervert's solution to the mind-body problem","journalAbbreviation":"New Ideas in Psychology","author":[{"family":"Newman","given":"David"}],"issued":{"date-parts":[["1995",7]]},"accessed":{"date-parts":[["2016",2,19]]}}},{"key":"http://zotero.org/users/39885/items/6RSCJHEN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6RSCJHEN","type":"article-journal","title":"The mechanical career of Councillor Orffyreus, confidence man","container-title":"American Journal of Physics","page":"421-427","volume":"81","issue":"6","source":"scitation.aip.org","abstract":"In the early 18th century, J. E. E. Bessler, known as Orffyreus, constructed several wheels that he claimed could keep turning forever, powered only by gravity. He never revealed the details of his invention, but he conducted demonstrations (with the machine&apos;s inner workings covered) that persuaded competent observers that he might have discovered the secret of perpetual motion. Among Bessler&apos;s defenders were Gottfried Leibniz, Johann Bernoulli, Professor Willem &apos;s Gravesande of Leiden University (who wrote to Isaac Newton on the subject), and Prince Karl, ruler of the German state of Hesse-Kassel. We review Bessler&apos;s work, placing it within the context of the intellectual debates of the time about mechanical conservation laws and the (im)possibility of perpetual motion. We also mention Bessler&apos;s long career as a confidence man, the details of which were discussed in popular 19th-century German publications but have remained unfamiliar to authors in other languages.","URL":"http://scitation.aip.org/content/aapt/journal/ajp/81/6/10.1119/1.4798617","DOI":"10.1119/1.4798617","ISSN":"0002-9505, 1943-2909","author":[{"family":"Jenkins","given":"Alejandro"}],"issued":{"date-parts":[["2013",6,1]]},"accessed":{"date-parts":[["2015",12,31]]}}},{"key":"http://zotero.org/users/39885/items/6S58ZV2Q","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6S58ZV2Q","type":"book","title":"Global Risk Governance","collection-title":"International Risk Governance Council Bookseries","publisher":"Springer Netherlands","publisher-place":"Dordrecht","volume":"1","source":"CrossRef","event-place":"Dordrecht","URL":"http://link.springer.com/10.1007/978-1-4020-6799-0","ISBN":"978-1-4020-6798-3","editor":[{"family":"Renn","given":"Ortwin"},{"family":"Walker","given":"Katherine D."}],"collection-editor":[{"family":"Bunting","given":"Christopher"}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2015",10,7]]}}},{"key":"http://zotero.org/users/39885/items/6S8NAJAQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6S8NAJAQ","type":"paper-conference","title":"An Energy Hierarchy Law for Biogeochemical Cycles","publisher":"The Center for Environmental Policy, Department of Environmental Engineering Sciences, University of Florida","publisher-place":"Gainsville, Florida","page":"328","volume":"1","event":"Proceedings of the first Biennial Emergy Analysis Research Conference","event-place":"Gainsville, Florida","call-number":"0012","author":[{"family":"Odum","given":"Howard"}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/6TCAJF7G","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6TCAJF7G","type":"article-journal","title":"Sensor Observation Service Client for Android Mobile Phones","container-title":"International Journal of Digital Earth","abstract":"The irruption of geospatial applications in the mobile\ncomputing world has been possible because the number\nof mobile devices and its capabilities have increased rapidly\nover the last decade. While geospatial applications are more\ncommon everyday on mobile devices, applications based on OGC\nstandards in these devices are still a few. This happens maybe\nbecause the number and size of the standards have been growing\nin the last few years as the number of supported use cases\nfor geospatial data exchange or processing increases at rapid\nrates. At the same time, although the capabilities of mobile\nphones have increased they are not still powerful enough to\nprocess the large amount of data used frequently to represent\ngeographical information. In this context, we present in this paper\nthe implementation of a generic SOS client targeted to Android\nmobile phones. The client implements the core profile of the\nSOS specifications allowing users the visualisation of sensors and\nobservations data in tabular or graphical forms. We also discuss\na set of challenges and open issues found during the development\nof the application.","author":[{"family":"Tamayo","given":"Alain"},{"family":"Viciano","given":"Pablo"},{"family":"Granell","given":"Carlos"},{"family":"Huerta","given":"Joaquin"}],"issued":{"literal":"To appear"}}},{"key":"http://zotero.org/users/39885/items/6UTDITXT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6UTDITXT","type":"article-journal","title":"Chembiogenesis 2005 and Systems Chemistry Workshop13","container-title":"Angewandte Chemie International Edition","page":"342-344","volume":"45","issue":"3","abstract":"No Abstract","URL":"http://dx.doi.org/10.1002/anie.200504139","DOI":"10.1002/anie.200504139","call-number":"0000","author":[{"family":"Stankiewicz","given":"Johanna"},{"family":"Eckardt","given":"Lars Henning"}],"issued":{"date-parts":[["2006"]]},"accessed":{"date-parts":[["2008",8,21]]}}},{"key":"http://zotero.org/users/39885/items/6XTDQBAU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6XTDQBAU","type":"book","title":"Elements of Mathematical Biology","publisher":"Dover Pubns","ISBN":"0-486-60346-6","call-number":"0820","author":[{"family":"Lotka","given":"Alfred J."}],"issued":{"date-parts":[["1957",6]]}}},{"key":"http://zotero.org/users/39885/items/6ZEARBPB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/6ZEARBPB","type":"article","title":"Global Unconventional Gas Annotated Bibliography","author":[{"family":"Hunter","given":"Tina"}],"issued":{"date-parts":[["2015"]]}}},{"key":"http://zotero.org/users/39885/items/7229JII4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7229JII4","type":"webpage","title":"Queensland Government widens legal action against Linc Energy over alleged Underground Coal Gasification contamination","URL":"http://mobile.abc.net.au/news/2015-06-10/linc-energy-legal-action-widened-alleged-ugc-contamination/6535098","author":[{"literal":"Willacy, Mark"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,13]]}}},{"key":"http://zotero.org/users/39885/items/7272EDIN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7272EDIN","type":"book","title":"Organisation Theory","publisher":"Prentice-Hall (Australia)","edition":"4th","source":"Amazon.com","ISBN":"1-74009-545-6","call-number":"0000","author":[{"family":"Robbins","given":"Stephen P."},{"family":"Barnwell","given":"Neil"}],"issued":{"date-parts":[["2002",8,1]]}}},{"key":"http://zotero.org/users/39885/items/732WT2ZR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/732WT2ZR","type":"book","title":"Great Essays in Science","publisher":"Prometheus Books","source":"Amazon.com","ISBN":"0-87975-853-8","call-number":"0012","author":[{"family":"Gardner","given":"Martin"}],"issued":{"date-parts":[["1957"]]}}},{"key":"http://zotero.org/users/39885/items/73F27WV8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/73F27WV8","type":"paper-conference","title":"Integrating Manmade Nanostructures with Biological Structures","page":"140","volume":"1","event":"Nanotechnology, 2006. IEEE-NANO 2006. Sixth IEEE Conference on","call-number":"0006","author":[{"family":"Stroscio","given":"M.A."},{"family":"Dutta","given":"M."}],"issued":{"date-parts":[["2006"]]}}},{"key":"http://zotero.org/users/39885/items/74GV9DFP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/74GV9DFP","type":"book","title":"Groundwater Resources in the Yorkton Aquifer Management Plan Area Final Report","publisher":"Saskatoon, SK: Environment and Minerals Division, Saskatchewan Research Council","source":"Google Scholar","author":[{"family":"Maathuis","given":"Harm"},{"family":"Simpson","given":"Mark"}],"issued":{"date-parts":[["2006"]]}}},{"key":"http://zotero.org/users/39885/items/75C8APQA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/75C8APQA","type":"article-journal","title":"A (R)evaluation of Nietzsche’s Anti-democratic Pedagogy: The Overman, Perspectivism, and Self-overcoming","container-title":"Studies in Philosophy and Education","page":"153-169","volume":"28","issue":"2","source":"link.springer.com","abstract":"In this paper, I argue that Friedrich Nietzsche’s concept of self-overcoming has been largely misinterpreted in the philosophy of education journals. The misinterpretation partially stems from a misconstruction of Nietzsche’s perspectivism, and leads to a conception of self-overcoming that is inconsistent with Nietzsche’s educational ideals. To show this, I examine some of the prominent features of the so-called “debate” of the 1980s surrounding Nietzsche’s conception of self-overcoming. I then offer an alternative conception that is more consistent with Nietzsche’s thought, and provides a more nuanced understanding of Nietzsche’s “anti-democratic” pedagogy. Ultimately, I argue that while Nietzsche’s educational philosophy is not egalitarian, it can be effectively utilized in “democratic” classrooms, assuming his concept of self-overcoming is properly construed.","URL":"http://link.springer.com/article/10.1007/s11217-008-9107-1","DOI":"10.1007/s11217-008-9107-1","ISSN":"0039-3746, 1573-191X","shortTitle":"A (R)evaluation of Nietzsche’s Anti-democratic Pedagogy","journalAbbreviation":"Stud Philos Educ","language":"en","author":[{"family":"Jonas","given":"Mark E."}],"issued":{"date-parts":[["2008",4,9]]},"accessed":{"date-parts":[["2015",12,29]]}}},{"key":"http://zotero.org/users/39885/items/76S8P3JX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/76S8P3JX","type":"paper-conference","title":"The use of a network energy simulator to synthesize systems and develop analogous theory: the ecosystem example","container-title":"Proceedings of the Cullowhee Conference on Training in Biomathematics","source":"Google Scholar","shortTitle":"The use of a network energy simulator to synthesize systems and develop analogous theory","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1962"]]}}},{"key":"http://zotero.org/users/39885/items/77KJTHE7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/77KJTHE7","type":"book","title":"The cathedral and the bazaar: musings on Linux and Open Source by an accidental revolutionary","publisher":"O'Reilly Media, Inc.","number-of-pages":"260","source":"Google Books","abstract":"Open source provides the competitive advantage in the Internet Age. According to the August Forrester Report, 56 percent of IT managers interviewed at Global 2,500 companies are already using some type of open source software in their infrastructure and another 6 percent will install it in the next two years. This revolutionary model for collaborative software development is being embraced and studied by many of the biggest players in the high-tech industry, from Sun Microsystems to IBM to Intel. The Cathedral & the Bazaaris a must for anyone who cares about the future of the computer industry or the dynamics of the information economy. Already, billions of dollars have been made and lost based on the ideas in this book. Its conclusions will be studied, debated, and implemented for years to come. According to Bob Young, \"This is Eric Raymond's great contribution to the success of the open source revolution, to the adoption of Linux-based operating systems, and to the success of open source users and the companies that supply them.\" The interest in open source software development has grown enormously in the past year. This revised and expanded hardback edition includes new material on open source developments in 1999 and 2000. Raymond's clear and effective writing style accurately describing the benefits of open source software has been key to its success. With major vendors creating acceptance for open source within companies, independent vendors will become the open source story in 2001.","ISBN":"978-0-596-00108-7","shortTitle":"The cathedral and the bazaar","language":"en","author":[{"family":"Raymond","given":"Eric S."}],"issued":{"date-parts":[["2001"]]}}},{"key":"http://zotero.org/users/39885/items/78T9RMXA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/78T9RMXA","type":"book","title":"The Maximum Em-Power Principle as the basis for Thermodynamics of Quality","publisher":"Servizi Grafici Editoriali","publisher-place":"Padova","event-place":"Padova","call-number":"0013","language":"English","author":[{"family":"Giannantoni","given":"Corrado"}],"issued":{"date-parts":[["2002"]]}}},{"key":"http://zotero.org/users/39885/items/79CU2E69","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/79CU2E69","type":"paper-conference","title":"Energy values of water resources","container-title":"Proceedings of the Nineteenth Southern Water Resources and Pollution Control Conference","page":"56","source":"Google Scholar","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1970"]]}}},{"key":"http://zotero.org/users/39885/items/79HTH3GV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/79HTH3GV","type":"book","title":"The boy electrician;: Practical plans for electrical apparatus for work and play, with an explanation of the principles of every-day electricity","publisher":"Lothrop, Lee & Shepard co","edition":"1st edition. edition","source":"Amazon","shortTitle":"The boy electrician;","language":"English","author":[{"family":"Morgan","given":"Alfred Powell"}],"issued":{"date-parts":[["1914"]]}}},{"key":"http://zotero.org/users/39885/items/7BKM37KD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7BKM37KD","type":"article","title":"Coal Seam Gas and water position statement","publisher":"Australian Government","URL":"http://archive.nwc.gov.au/__data/assets/pdf_file/0003/9723/Coal_Seam_Gas.pdf","author":[{"family":"NWC","given":"National Water Commission"}],"issued":{"date-parts":[["2010"]]},"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/7C9C6UKM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7C9C6UKM","type":"article-journal","title":"The emergy synthesis and sustainability analysis of city's environment and economy [J]","container-title":"Acta Ecologica Sinica","volume":"2","source":"Google Scholar","author":[{"family":"Kam-Peng","given":"LEI"},{"family":"Fei-Peng","given":"C."},{"family":"Zhi-Shi","given":"W."}],"issued":{"date-parts":[["2006"]]}}},{"key":"http://zotero.org/users/39885/items/7E4EXCUG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7E4EXCUG","type":"article-journal","title":"The environmental generalist","container-title":"Acta Cientifica","page":"159-164","volume":"6","issue":"1-3","call-number":"0002","author":[{"family":"Odum","given":"Howard T"}],"issued":{"date-parts":[["1992"]]}}},{"key":"http://zotero.org/users/39885/items/7EKQ2XEB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7EKQ2XEB","type":"article-journal","title":"Progress, influence and perspectives of emergy theories in China, in support of environmentally sound economic development and equitable trade","container-title":"Energy Policy","page":"1019-1028","volume":"36","issue":"3","abstract":"Emergy Accounting and Synthesis, developed by Howard Odum in the 1980s, accounts for both the work of nature and that of humans as part of it in generating products and services. Since the 1990s, when Odum's system theories and emergy approach were introduced to China, a great attention was paid to them, since they appeared to Chinese scholars very important, comprehensive, and rich with application opportunities to China's economic development and environmental management. Until now more than 150 papers related to emergy theories were published in Chinese scientific journals, more than 20 dissertations presented in all Chinese Universities, and a large number of emergy-based papers were authored by Chinese scholars in international journals. Also, several reports dealing with emergy evaluation of different provinces of China were presented to local governments for decision-making. Emergy theories were applied to valuation of ecosystems and eco-industrial parks, as well as to studies of benefits/cost analysis and feasibility of ecological engineering. Meanwhile, a series of monographs and translated books related to emergy theories were published in China, some of which are used as text books in Chinese universities and institutes. Compared with the great potential of emergy application, there are many new fields that should be addressed in China, including: assessing the environmental impact of processes based on matching of high-quality and low-quality resources, establishing new frameworks and systems for environmental accounting, evaluating natural capital and services and applying research results to the process of decision-making, and finally studying the patterns and the available development options of China regional eco-economic systems.","URL":"http://www.sciencedirect.com/science/article/B6V2W-4RFKKPB-1/2/6e5815bcbcbb2de03e6d7c0cbce681b3","DOI":"10.1016/j.enpol.2007.11.012","call-number":"0003","author":[{"family":"Dong","given":"Xiaobin"},{"family":"Ulgiati","given":"Sergio"},{"family":"Yan","given":"Maochao"},{"family":"Gao","given":"Wangsheng"}],"issued":{"date-parts":[["2008",3]]},"accessed":{"date-parts":[["2008",8,15]]}}},{"key":"http://zotero.org/users/39885/items/7EZ75MRW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7EZ75MRW","type":"article-journal","title":"CMF: A Hydrological Programming Language Extension For Integrated Catchment Models","container-title":"Environmental Modelling & Software","page":"828-830","volume":"26","issue":"6","source":"ScienceDirect","abstract":"Hydrological models are created for a wide range of scales and intents. The Catchment Modelling Framework (CMF) extends the Python programming language with hydrology specific language elements, to setup specific hydrological models adapted to the scientific problems and the dominant flow processes of a particular study area. CMF provides a straightforward method to test hydrological theories and serve as a transport module in integrated, interdisciplinary catchment model approaches.","URL":"http://www.sciencedirect.com/science/article/pii/S1364815210003439","DOI":"10.1016/j.envsoft.2010.12.009","ISSN":"1364-8152","shortTitle":"CMF","journalAbbreviation":"Environmental Modelling & Software","author":[{"family":"Kraft","given":"Philipp"},{"family":"Vaché","given":"Kellie B."},{"family":"Frede","given":"Hans-Georg"},{"family":"Breuer","given":"Lutz"}],"issued":{"date-parts":[["2011",6]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/7FPM6CH2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7FPM6CH2","type":"article-journal","title":"TRIM28 Represses Transcription of Endogenous Retroviruses in Neural Progenitor Cells","container-title":"Cell Reports","page":"20-28","volume":"10","issue":"1","source":"ScienceDirect","abstract":"Summary\nTRIM28 is a corepressor that mediates transcriptional silencing by establishing local heterochromatin. Here, we show that deletion of TRIM28 in neural progenitor cells (NPCs) results in high-level expression of two groups of endogenous retroviruses (ERVs): IAP1 and MMERVK10C. We find that NPCs use TRIM28-mediated histone modifications to dynamically regulate transcription and silencing of ERVs, which is in contrast to other somatic cell types using DNA methylation. We also show that derepression of ERVs influences transcriptional dynamics in NPCs through the activation of nearby genes and the expression of long noncoding RNAs. These findings demonstrate a unique dynamic transcriptional regulation of ERVs in NPCs. Our results warrant future studies on the role of ERVs in the healthy and diseased brain.","URL":"http://www.sciencedirect.com/science/article/pii/S2211124714010158","DOI":"10.1016/j.celrep.2014.12.004","ISSN":"2211-1247","journalAbbreviation":"Cell Reports","author":[{"family":"Fasching","given":"Liana"},{"family":"Kapopoulou","given":"Adamandia"},{"family":"Sachdeva","given":"Rohit"},{"family":"Petri","given":"Rebecca"},{"family":"Jönsson","given":"Marie E."},{"family":"Männe","given":"Christian"},{"family":"Turelli","given":"Priscilla"},{"family":"Jern","given":"Patric"},{"family":"Cammas","given":"Florence"},{"family":"Trono","given":"Didier"},{"family":"Jakobsson","given":"Johan"}],"issued":{"date-parts":[["2015",1,6]]},"accessed":{"date-parts":[["2016",2,23]]}}},{"key":"http://zotero.org/users/39885/items/7GPUA8XE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7GPUA8XE","type":"book","title":"Electronics Fundamentals: Circuits, Devices, and Applications","publisher":"Prentice Hall","edition":"6","ISBN":"0-13-111138-8","call-number":"0041","shortTitle":"Electronics Fundamentals","author":[{"family":"Floyd","given":"Thomas L."}],"issued":{"date-parts":[["2003",7,27]]}}},{"key":"http://zotero.org/users/39885/items/7H9SSMU8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7H9SSMU8","type":"article-journal","title":"Community perspectives of natural resource extraction: coal-seam gas mining and social identity in Eastern Australia","container-title":"Coolabah","page":"144","volume":"10","source":"Google Scholar","URL":"http://epubs.scu.edu.au/esm_pubs/1472/","shortTitle":"Community perspectives of natural resource extraction","author":[{"family":"Lloyd","given":"David J."},{"family":"Luke","given":"Hanabeth"},{"family":"Boyd","given":"William E."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/7IXAZ8X6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7IXAZ8X6","type":"book","title":"The Role of Evidence in Risk Characterization: Making Sense of Conflicting Data","publisher":"John Wiley & Sons","number-of-pages":"242","source":"Google Books","abstract":"One of the few books to focus on the critical problem of the correct characterization of conflicting data for an adequate risk evaluation, this title comprehensively covers the different approaches in various research areas in the US and in Europe, while also considering the ethical implications of risk evaluation. In addition, special attention is paid to the sensitive topic of potential health risks through electromagnetic fields. Written by leading experts in the field, this is an indispensable resource for policy makers and professionals in health risk assessment.","ISBN":"978-3-527-62236-8","shortTitle":"The Role of Evidence in Risk Characterization","language":"en","author":[{"family":"Wiedemann","given":"Peter M."},{"family":"Schütz","given":"Holger"}],"issued":{"date-parts":[["2008",9,8]]}}},{"key":"http://zotero.org/users/39885/items/7M6TQIK4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7M6TQIK4","type":"book","title":"Politics The Athenian constitution","publisher":"distributed by Heron Books","source":"Amazon.com","call-number":"0049","shortTitle":"Politics;","author":[{"family":"Aristotle","given":""}],"issued":{"date-parts":[["1959"]]}}},{"key":"http://zotero.org/users/39885/items/7MXTFZGG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7MXTFZGG","type":"article","title":"CORE 8 New Featurs Guide","publisher":"Vitech Pty Ltd","URL":"http://www.vitechcorp.com/support/documentation/core/800/whatsnew.pdf","author":[{"family":"Vitech","given":""}],"issued":{"date-parts":[["2011"]]},"accessed":{"date-parts":[["2011",10,16]]}}},{"key":"http://zotero.org/users/39885/items/7PCPVRAG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7PCPVRAG","type":"book","title":"Models of nature : ecology, conservation, and cultural revolution in Soviet Russia","publisher":"University of Pittsburgh Press","publisher-place":"Pittsburgh  Pa.","event-place":"Pittsburgh  Pa.","ISBN":"978-0-8229-5733-1","call-number":"0050","shortTitle":"Models of nature","author":[{"family":"Weiner","given":"Douglas"}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/7QH3C6N2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7QH3C6N2","type":"book","title":"WebGL Insights","publisher":"CRC Press","number-of-pages":"420","source":"Google Books","abstract":"Given its ubiquity, plugin-free deployment, and ease of development, the adoption of WebGL is on the rise. Skilled WebGL developers provide organizations with the ability to develop and implement efficient and robust solutions—creating a growing demand for skilled WebGL developers.WebGL Insights shares experience-backed lessons learned by the WebGL community. It presents proven techniques that will be helpful to both intermediate and advanced WebGL developers.By focusing on current and emerging techniques, the book demonstrates the breadth and depth of WebGL. Readers will gain practical skills to solve problems related to performance, engine design, shader pipelines, rendering, mobile devices, testing, and more.Throughout the book, experienced WebGL engine and application developers, GPU vendors, browser developers, researchers, and educators share their unique expertise based on their real-world experiences. This includes hardware vendors sharing performance and robustness advice for mobile, browser developers providing deep insight into WebGL implementations and testing, and WebGL-engine developers presenting design and performance techniques for many of the most popular WebGL engines. The companion WebGL Insights website contains helpful tips, sample content, code, and other resources. It is also the place to find announcements about future volumes: http://www.webglinsights.com/","URL":"https://books.google.com.au/books?hl=en&lr=&id=6crECQAAQBAJ&oi=fnd&pg=PA49&dq=australia+%2B+%22national+map%22+%2B+%22nicta%22&ots=Jq8hbVN6PB&sig=rNX8yZZIq-dii1soo15fGcBlZ1A#v=onepage&q=australia%20%2B%20%22national%20map%22%20%2B%20%22nicta%22&f=false","ISBN":"978-1-4987-1608-6","language":"en","author":[{"family":"Cozzi","given":"Patrick"}],"issued":{"date-parts":[["2015",8,6]]}}},{"key":"http://zotero.org/users/39885/items/7R5GRIZ9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7R5GRIZ9","type":"article","title":"Lock the Gate Alliance - Response to Draft National Harmonised Regulatory Framework","publisher":"Lock the Gate Alliance","URL":"http://www.scer.gov.au/files/2013/03/LocktheGateAlliance-Lismore.pdf","author":[{"family":"Boudicca","given":"Cerese"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/7RP3DKIS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7RP3DKIS","type":"article-journal","title":"Review","container-title":"Hebrew Studies","page":"130-132","volume":"33","source":"JSTOR","URL":"http://www.jstor.org/stable/27909296","ISSN":"0146-4094","journalAbbreviation":"Hebrew Studies","author":[{"family":"Walton","given":"John H."}],"issued":{"date-parts":[["1992",1,1]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/7TGWQWFV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7TGWQWFV","type":"article-journal","title":"The value of a river","container-title":"Journal of Political Ecology","page":"1–22","volume":"5","source":"Google Scholar","URL":"http://www.u.arizona.edu/~jlansing/J._Stephen_Lansing/Publications_files/Lansing_JPE_5.pdf","author":[{"family":"Lansing","given":"J. Stephen"},{"family":"Lansing","given":"Philip S."},{"family":"Erazo","given":"Juliet S."}],"issued":{"date-parts":[["1998"]]},"accessed":{"date-parts":[["2015",3,13]]}}},{"key":"http://zotero.org/users/39885/items/7TN3NKC9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7TN3NKC9","type":"article-journal","title":"Severe decrements in cognition function and mood induced by sleep loss, heat, dehydration, and undernutrition during simulated combat","container-title":"Biological Psychiatry","page":"422-429","volume":"57","issue":"4","source":"Scopus","abstract":"Background: Military exercises generate high levels of stress to simulate combat, providing a unique opportunity to examine cognitive and physiologic responses of normal humans to acute stress. Methods: Cognitive and physiologic markers of stress were evaluated before, during, and after an intense training exercise conducted for 53 hours in the heat. Cognitive performance, mood, physical activity, sleep, body composition, hydration, and saliva cortisol, testosterone, and melatonin were assessed. Volunteers were 31 male U.S. Army officers from an elite unit, aged 31.6 ± .4 years. Results: Wrist activity monitors documented that soldiers slept only 3.0 ± .3 hours during the exercise and were active throughout. Volunteers lost 4.1 ± .2 kg (p < .001) of weight, predominately water (3.1 ± .3 L) (p < .001). Substantial degradation in cognitive function, assessed with computerized tests, occurred. Vigilance, reaction time, attention, memory, and reasoning were impaired (p < .001). Mood, including vigor (p < .001), fatigue (p < .001), confusion (p < .001), depression (p < .001), and tension (p < .002), assessed by questionnaire, deteriorated. The highest cortisol and testosterone levels were observed before the exercise. Conclusions: This study quantifies the overwhelmingly adverse impact of multiple stressors on cognitive performance, mood, and physiologic parameters, during a continuous but brief military exercise conducted by highly motivated, well-trained officers.","URL":"http://www.scopus.com.ezproxy.lib.rmit.edu.au/inward/record.url?eid=2-s2.0-13444302557&partnerID=40&md5=4a8dd5456e5a032879bdd34e7e34e688","call-number":"0045","author":[{"family":"Lieberman","given":"H.R."},{"family":"Bathalon","given":"G.P."},{"family":"Falco","given":"C.M."},{"family":"Kramer","given":"F.M."},{"family":"Morgan III","given":"C.A."},{"family":"Niro","given":"P."}],"issued":{"date-parts":[["2005"]]},"accessed":{"date-parts":[["2010",5,11]]}}},{"key":"http://zotero.org/users/39885/items/7TNBVXQE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7TNBVXQE","type":"article-journal","title":"The Nature and Determinants of Customer Expectations of Service","container-title":"Journal of the Academy of Marketing Science","page":"1-12","volume":"21","issue":"1","source":"jam.sagepub.com.ezproxy.library.uq.edu.au","abstract":"A conceptual model articulating the nature and determinants of customer expectations of service is proposed and discussed. The model specifies three different types of service expectations: desired service, adequate service, and predicted service. Seventeen propositions about service expectations and their antecedents are provided. Discussion centers on the research implications of the model and its propositions.","URL":"http://jam.sagepub.com.ezproxy.library.uq.edu.au/content/21/1/1","DOI":"10.1177/0092070393211001","ISSN":"0092-0703, 1552-7824","journalAbbreviation":"Journal of the Academy of Marketing Science","language":"en","author":[{"family":"Zeithaml","given":"Valarie A."},{"family":"Berry","given":"Leonard L."},{"family":"Parasuraman","given":"A."}],"issued":{"date-parts":[["1993",1,1]]},"accessed":{"date-parts":[["2015",8,26]]}}},{"key":"http://zotero.org/users/39885/items/7TPRTU2Q","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7TPRTU2Q","type":"paper-conference","title":"Building Bridges Between Systems and Software with SysML and UML","container-title":"INCOSE Intl. Symposium","source":"Google Scholar","author":[{"family":"Hause","given":"M."},{"family":"Thom","given":"F."}],"issued":{"date-parts":[["2008",6]]}}},{"key":"http://zotero.org/users/39885/items/7TQ6HMRP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7TQ6HMRP","type":"article-journal","title":"Keeping the Books for Environmental Systems: An Emergy Analysis of West Virginia","container-title":"Environmental Monitoring and Assessment","page":"217-230","volume":"94","issue":"1-3","source":"link.springer.com","abstract":"Emergy provides a general accounting mechanism that allows us to view the economy and the environment on the same income statement and balance sheet. This allows an auditor to verify the economic picture by checking it against a more complete representation of the flows and storages of real wealth as measured by emergy. In this study, we constructed emergy accounts for the state of West Virginia in 1997. The income statement showed annual production, consumption, and flows of emergy and dollars into and out of the state. The balance sheet evaluated the storage of emergy in some of the state's assets. Emergy indices were used to answer questions posed by managers and gain insight into the state's economic and environmental strengths and weaknesses. West Virginia has great wealth in nonrenewable resources (9E14 sej m−2 or 17 times the U.S. average). The investment ratio of emergy purchased outside to indigenous renewable and nonrenewable emergy was 2.2:1, which indicates a high potential for future development. However, the environmental loading ratio (14:1) was already 1.5 times higher than that found at an average location in the U.S. Twice as much emergy was exported as received and standard of living indicators showed that people have largely failed to benefit from their state's wealth. We propose that, just as in business, where decisions made using financial accounts ensure solvency; decisions governing the environment should be made based on an emergy accounting of activities, assets, and liabilities for the combined system of humanity and nature.","URL":"http://link.springer.com/article/10.1023/B%3AEMAS.0000016890.70068.f7","DOI":"10.1023/B:EMAS.0000016890.70068.f7","ISSN":"0167-6369, 1573-2959","shortTitle":"Keeping the Books for Environmental Systems","journalAbbreviation":"Environ Monit Assess","language":"en","author":[{"family":"Campbell","given":"Daniel"},{"family":"Meisch","given":"Maria"},{"family":"Demoss","given":"Thomas"},{"family":"Pomponio","given":"John"},{"family":"Bradley","given":"M. Patricia"}],"issued":{"date-parts":[["2004",6]]},"accessed":{"date-parts":[["2015",12,12]]}}},{"key":"http://zotero.org/users/39885/items/7UUEXSAQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7UUEXSAQ","type":"webpage","title":"Lower oil price throws doubt on economics of new projects","container-title":"ABC Rural","genre":"Text","abstract":"LNG price under pressure from low Australian dollar and plunging oil prices","URL":"http://www.abc.net.au/news/2015-01-07/gas-price-to-fall-in-2015/6004676","language":"en-AU","author":[{"family":"McHugh","given":"Babs"}],"issued":{"date-parts":[["2015",1,7]]},"accessed":{"date-parts":[["2015",8,24]]}}},{"key":"http://zotero.org/users/39885/items/7W4HPVUX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7W4HPVUX","type":"article-journal","title":"An Ecological Economics Perspective on Sustainability and Prospects for Ending Poverty","container-title":"Population and Environment","page":"15-46","volume":"24","issue":"1","source":"link.springer.com","abstract":"Despite our pretensions to science, modern industrial society is as myth-bound and mystical as any that has preceded it. Our prevailing cultural myth includes a dangerous vision of global sustainability and poverty reduction centered on unlimited economic expansion, “free” trade and technological fixes. This paper dissects the modern myth, exposing its conceptual flaws and practical failings. It then proposes an alternative conceptual framework for development derived from ecological economics and ecological footprint analysis. The new framework recognizes that the human enterprise is a subsystem of the ecosphere whose growth is constrained by biophysical limits. If humanity is to seize control of its destiny it must arise above wishful thinking and tribal instinct. Global society needs a new cultural myth rooted in humanity's unique claim to intelligence and self-awareness in the face of danger. Human security depends on equitable development—not growth—within the means of nature. Sustainability with social justice can be achieved only through an unprecedented level of international cooperation rooted in a sense of compassion for both other peoples and other species.","URL":"http://link.springer.com/article/10.1023/A%3A1020125725915","DOI":"10.1023/A:1020125725915","ISSN":"0199-0039, 1573-7810","journalAbbreviation":"Population and Environment","language":"en","author":[{"family":"Rees","given":"William E."}],"issued":{"date-parts":[["2002",9,1]]},"accessed":{"date-parts":[["2015",2,8]]}}},{"key":"http://zotero.org/users/39885/items/7WAAAV8C","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7WAAAV8C","type":"book","title":"Philosophy of modern music.","publisher":"Seabury Press","publisher-place":"New York","event-place":"New York","ISBN":"978-0-8164-9133-9","call-number":"0096","author":[{"family":"Adorno","given":"Theodor"}],"issued":{"date-parts":[["1973"]]}}},{"key":"http://zotero.org/users/39885/items/7WEMFCVD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7WEMFCVD","type":"article-journal","title":"Rethinking overlap and duplication: federalism and environmental assessment in Australia","container-title":"Publius: The Journal of Federalism","page":"pjp028","source":"Google Scholar","URL":"http://publius.oxfordjournals.org/content/early/2009/10/21/publius.pjp028.short","shortTitle":"Rethinking overlap and duplication","author":[{"family":"Hollander","given":"Robyn"}],"issued":{"date-parts":[["2009"]]},"accessed":{"date-parts":[["2015",8,22]]}}},{"key":"http://zotero.org/users/39885/items/7XJ2II63","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/7XJ2II63","type":"chapter","title":"World energy resources, their use and the environment","container-title":"Desulfurization of Hot Coal Gas","publisher":"Springer","page":"1–19","source":"Google Scholar","URL":"http://link.springer.com/chapter/10.1007/978-3-642-58977-5_1","author":[{"family":"Sage","given":"P. W."}],"issued":{"date-parts":[["1998"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/824R5UCB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/824R5UCB","type":"book","title":"Power Quality Primer","publisher":"McGraw-Hill Professional","call-number":"0045","author":[{"family":"Kennedy","given":"Barry W."}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/82KTT4FB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/82KTT4FB","type":"chapter","title":"Energy and Emergy","container-title":"Environmental Economics: The Analysis of a Major Interface","publisher":"Roland Leimgruber","publisher-place":"Geneva","page":"257-276","event-place":"Geneva","call-number":"0052","language":"English","author":[{"family":"Scienceman","given":"David","suffix":"M"}],"editor":[{"family":"Pillet","given":"G."},{"family":"Murota","given":"T."}],"issued":{"date-parts":[["1987"]]}}},{"key":"http://zotero.org/users/39885/items/836HD37C","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/836HD37C","type":"article-journal","title":"Religion-Science Amalgam (Reliscience)","container-title":"Emergy Synthesis 7: Theory and Applications of the Emergy Methodology","collection-title":"Proceedings of the 7th Biennial Emergy Conference","page":"67-78","volume":"7","source":"Google Scholar","URL":"http://www.cep.ees.ufl.edu/emergy/documents/conferences/ERC07_2012/09_Scienceman.pdf","author":[{"family":"Scienceman","given":"David"},{"family":"Collins","given":"Dennis"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",11,4]]}}},{"key":"http://zotero.org/users/39885/items/83VXTCE5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/83VXTCE5","type":"report","title":"Motivated Numeracy and Enlightened Self-Government","publisher":"Social Science Research Network","publisher-place":"Rochester, NY","genre":"SSRN Scholarly Paper","source":"papers.ssrn.com","event-place":"Rochester, NY","abstract":"Why does public conflict over societal risks persist in the face of compelling and widely accessible scientific evidence? We conducted an experiment to probe two alternative answers: the “Science Comprehension Thesis” (SCT), which identifies defects in the public’s knowledge and reasoning capacities as the source of such controversies; and the “Identity-protective Cognition Thesis” (ICT) which treats cultural conflict as disabling the faculties that members of the public use to make sense of decision-relevant science. In our experiment, we presented subjects with a difficult problem that turned on their ability to draw valid causal inferences from empirical data. As expected, subjects highest in Numeracy — a measure of the ability and disposition to make use of quantitative information — did substantially better than less numerate ones when the data were presented as results from a study of a new skin-rash treatment. Also as expected, subjects’ responses became politically polarized — and even less accurate — when the same data were presented as results from the study of a gun-control ban. But contrary to the prediction of SCT, such polarization did not abate among subjects highest in Numeracy; instead, it increased. This outcome supported ICT, which predicted that more Numerate subjects would use their quantitative-reasoning capacity selectively to conform their interpretation of the data to the result most consistent with their political outlooks. We discuss the theoretical and practical significance of these findings.","URL":"http://papers.ssrn.com/abstract=2319992","number":"ID 2319992","author":[{"family":"Kahan","given":"Dan M."},{"family":"Peters","given":"Ellen"},{"family":"Dawson","given":"Erica Cantrell"},{"family":"Slovic","given":"Paul"}],"issued":{"date-parts":[["2013",9,3]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/84ZK6J7D","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/84ZK6J7D","type":"article-journal","title":"Tension and Potential from Ohm to Kirchhoff","container-title":"Centaurus","page":"141-163","volume":"31","issue":"2","URL":"http://www.blackwell-synergy.com/doi/abs/10.1111/j.1600-0498.1988.tb00684.x","DOI":"doi:10.1111/j.1600-0498.1988.tb00684.x","call-number":"0008","author":[{"family":"Archibald","given":"Thomas"}],"issued":{"date-parts":[["183",7]]},"accessed":{"date-parts":[["2008",3,29]]}}},{"key":"http://zotero.org/users/39885/items/85AXRKHX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/85AXRKHX","type":"chapter","title":"Towards a Theory of Brain Structure and Function","container-title":"A New Foundation for Representation in Cognitive and Brain Science","collection-title":"Springer Series in Cognitive and Neural Systems","collection-number":"7","publisher":"Springer Netherlands","page":"109-140","source":"link.springer.com.ezproxy.library.uq.edu.au","abstract":"The eminent mathematician Henri Poincaré wrote “The aim of science is not things in themselves, as the dogmatists in their simplicity imagine, but the relations between things; outside those relations there is no reality knowable” (Poincaré H (1952) Science and hypothesis. Dover, New York). The study of the relation between the external world and the central nervous system, and in particular the brain, has been approached from numerous disciplines and subdisciplines that are recognizable under the portmanteau word cognitive. In the past, psychologists studied brain functioning, yet did not include an examination of its internal structure. The behaviorist school, that was preponderant in the departments of psychology during a good part of the last century, accorded to the biological organism a predictable behavior in terms of input and output. In the behaviorist’s view, the organism reacted with mechanical precision to the stimuli and the internal workings of the organism were considered irrelevant because it was already prefixed by the stimulus/response pair. Paradoxically, some time before Watson and Skinner gathered their behaviorist theories that disregarded the biological issues involved in behavior, the biological understanding of the brain had gained an extraordinary impulse. Ramón y Cajal using Golgi’s stain technique provided definitive evidence that neurons are discrete cells. This chapter explores three main issues. The first concern is an attempt to point out the difficulties – from an historical perspective – in delineating the relationship between brain structure and function. More specifically, I draw attention to the restricted, yet inconclusive quarrel between the different schools of brain organisation and functioning. Modular, distributed or sparse conceptions of brain connectivity may be verifiable or not, depending on the measurement technique and the scale that is being used. The second concern is to elaborate the idea that brain mappings have both form and meaning, suggesting practical implications of this idea to understand the connection patterns that underlie cognition. The last part of the chapter is focused on the introduction of mathematical descriptions, in particular network theory, to analyze brain networks. Some of the most important network measures, together with the challenges that the network-based approach is faced are outlined. A categorical framework that aims to shed light on the complex relationship between structure and function in brain networks is proposed. We take advantage of the capacity of categories to generalize graphs, to provide new network metrics useful for the systematic comparison between different connection networks.","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/chapter/10.1007/978-94-007-7738-5_7","ISBN":"978-94-007-7737-8","note":"DOI: 10.1007/978-94-007-7738-5_7","language":"en","author":[{"family":"Gómez-Ramirez","given":"Jaime"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2016",2,23]]}}},{"key":"http://zotero.org/users/39885/items/86NWKQN2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/86NWKQN2","type":"article-journal","title":"On boundaries and ‘investments’ in Emergy Synthesis and LCA: A case study on thermal vs. photovoltaic electricity","container-title":"Ecological Indicators","page":"227-235","volume":"15","issue":"1","source":"ScienceDirect","abstract":"Indicators of efficiency and environmental performance are fundamental to marking progress toward more sustainable patterns of human development. Central to indicator development is a common framework through which the wide range of environmental assessment methods may make comparative analysis. Clear and consistent definitions of system boundaries and input categories are essential to their interpretation, and form a necessary pre-requisite for meaningful comparisons of competing systems. A common framework of foreground and background categories, consistent with both LCA and Emergy Synthesis, is identified and discussed as the basis for the calculation of performance indicators. In this paper a revised operational definition of the Emergy Yield Ratio (EYR) is introduced, in light of the proposed categorization scheme, for consistent application to technological processes. Two case studies, namely CdTe PV and oil-fired thermal electricity production, are investigated. The Unit Emergy Value (UEV) of electricity generated by the thermal plant was calculated as 5.69E5 seJ/J with services and 5.11E5 seJ/J without services. The UEV for electricity generated by the PV system is 1.45E5 seJ/J with services, and 7.93E4 seJ/J without services. The computed EYRs including services are 6.8 for thermal electricity and 2.2 for PV electricity.","URL":"http://www.sciencedirect.com/science/article/pii/S1470160X11003086","DOI":"10.1016/j.ecolind.2011.09.021","ISSN":"1470-160X","shortTitle":"On boundaries and ‘investments’ in Emergy Synthesis and LCA","journalAbbreviation":"Ecological Indicators","author":[{"family":"Brown","given":"Mark T."},{"family":"Raugei","given":"Marco"},{"family":"Ulgiati","given":"Sergio"}],"issued":{"date-parts":[["2012",4]]},"accessed":{"date-parts":[["2015",12,14]]}}},{"key":"http://zotero.org/users/39885/items/88UE42D6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/88UE42D6","type":"book","title":"Electric Waves: Being Researches on the Propagation of Electric Action with Finite Velocity Through Space","publisher":"Dover Publications","number-of-pages":"324","source":"Google Books","shortTitle":"Electric Waves","language":"en","author":[{"family":"Hertz","given":"Heinrich"}],"issued":{"date-parts":[["1893"]]}}},{"key":"http://zotero.org/users/39885/items/89S3R3N7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/89S3R3N7","type":"book","title":"Resemblance and Representation: An Essay in the Philosophy of Pictures","publisher":"Open Book Publishers","number-of-pages":"225","source":"Google Books","abstract":"It’s a platitude – which only a philosopher would dream of denying – that whereas words are connected to what they represent merely by arbitrary conventions, pictures are connected to what they represent by resemblance. The most important difference between my portrait and my name, for example, is that whereas my portrait and I are connected by my portrait’s resemblance to me, my name and I are connected merely by an arbitrary convention. The first aim of this book is to defend this platitude from the apparently compelling objections raised against it, by analysing depiction in a way which reveals how it is mediated by resemblance.It’s natural to contrast the platitude that depiction is mediated by resemblance, which emphasises the differences between depictive and descriptive representation, with an extremely close analogy between depiction and description, which emphasises the similarities between depictive and descriptive representation. Whereas the platitude emphasises that the connection between my portrait and me is natural in a way the connection between my name and me is not, the analogy emphasises the contingency of the connection between my portrait and me. Nevertheless, the second aim of this book is to defend an extremely close analogy between depiction and description.The strategy of the book is to argue that the apparently compelling objections raised against the platitude that depiction is mediated by resemblance are manifestations of more general problems, which are familiar from the philosophy of language. These problems, it argues, can be resolved by answers analogous to their counterparts in the philosophy of language, without rejecting the platitude. So the combination of the platitude that depiction is mediated by resemblance with a close analogy between depiction and description turns out to be a compelling theory of depiction, which combines the virtues of common sense with the insights of its detractors.","ISBN":"978-1-78374-072-7","shortTitle":"Resemblance and Representation","language":"en","author":[{"family":"Blumson","given":"Ben"}],"issued":{"date-parts":[["2014",9,21]]}}},{"key":"http://zotero.org/users/39885/items/8AI8Z7M3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8AI8Z7M3","type":"article-journal","title":"Effects of water table conditions on water level changes near pumping wells","container-title":"Water Resources Research","page":"295-312","volume":"1","issue":"2","source":"Wiley Online Library","abstract":"Unconfined flow of water to wells is related to anisotropy of the aquifer, changes in the coefficient of storage with time, degree of penetration of the pumping well, and position of the water table. Sluggish response of observation wells to changes of head in the aquifer may lead to erroneous analysis of pumping-test data. The manner and extent to which these factors affect water levels have been studied by field observation, by analytical equations, and by electric analogs. The typical S-shaped curves of log drawdown versus log time, observed around wells pumping from water table aquifers, can be explained by an infinity of combinations of possible flow patterns and observation conditions. Equations developed for artesian flow cannot be used for analysis of tests made under water table conditions unless steady-state conditions have been approached or reached. From a practical standpoint the time required to approach steady flow is much greater than the duration of most pumping tests. Thus if pumping tests are to be used for measuring the hydraulic properties of unconfined aquifers, the boundary conditions attending unconfined flow must be recognized in the analysis of test data.","URL":"http://onlinelibrary.wiley.com/doi/10.1029/WR001i002p00295/abstract","DOI":"10.1029/WR001i002p00295","ISSN":"1944-7973","journalAbbreviation":"Water Resour. Res.","language":"en","author":[{"family":"Stallman","given":"R. W."}],"issued":{"date-parts":[["1965"]]},"accessed":{"date-parts":[["2015",2,6]]}}},{"key":"http://zotero.org/users/39885/items/8ANZ23PZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8ANZ23PZ","type":"article-journal","title":"Circular Causal Systems in Ecology","container-title":"Annals of the New York Academy of Sciences","page":"221-246","volume":"50","issue":"4","source":"Wiley Online Library","URL":"http://onlinelibrary.wiley.com/doi/10.1111/j.1749-6632.1948.tb39854.x/abstract","DOI":"10.1111/j.1749-6632.1948.tb39854.x","ISSN":"1749-6632","language":"en","author":[{"family":"Hutchinson","given":"G. Evelyn"}],"issued":{"date-parts":[["1948",10,1]]},"accessed":{"date-parts":[["2015",8,11]]}}},{"key":"http://zotero.org/users/39885/items/8ATSGE9T","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8ATSGE9T","type":"article-journal","title":"Groundwater-Dependent Wetlands in the UK and Ireland: Controls, Functioning and Assessing the Likelihood of Damage from Human Activities","container-title":"Water Resources Management","page":"2015-2025","volume":"21","issue":"12","source":"link.springer.com.ezproxy.library.uq.edu.au","abstract":"Under the Water Framework Directive (WFD) the requirement for ‘good groundwater status’ is dependent upon there being no ‘significant damage’ to groundwater-dependent terrestrial ecosystems, i.e. groundwater-dependent wetlands. An ecohydrogeological framework was developed to assess the risk of significant damage for groundwater-dependent terrestrial ecosystems in the UK and the Republic of Ireland. The framework will be used by the competent authorities implementing the WFD as a decision support system to apply the WFD guidelines on a local to regional basis. The framework considers the variety of groundwater controls and pathways of different wetland types and allows a specific assessment to be made of the vulnerability of different wetland types to groundwater related risks. Seven distinct wetland types were identified and the potential pressures were evaluated. A GIS framework was developed in order to analyse the spatial coincidence of potential risks to each wetland type. The framework was tested for a trial dataset of 10 groundwater controlled wetland ecosystems in England and Wales in order to evaluate their current risk of damage.","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/article/10.1007/s11269-007-9192-x","DOI":"10.1007/s11269-007-9192-x","ISSN":"0920-4741, 1573-1650","shortTitle":"Groundwater-Dependent Wetlands in the UK and Ireland","journalAbbreviation":"Water Resour Manage","language":"en","author":[{"family":"Krause","given":"Stefan"},{"family":"Heathwaite","given":"A. Louise"},{"family":"Miller","given":"Felicity"},{"family":"Hulme","given":"Paul"},{"family":"Crowe","given":"Andrew"}],"issued":{"date-parts":[["2007",6,28]]},"accessed":{"date-parts":[["2015",8,26]]}}},{"key":"http://zotero.org/users/39885/items/8C8XRQ9F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8C8XRQ9F","type":"book","title":"The Prince and The Discourses","publisher":"McGraw-Hill Humanities/Social Sciences/Languages","edition":"1","source":"Amazon.com","ISBN":"0-07-553577-7","call-number":"0367","author":[{"family":"Machiavelli","given":"Niccolo"}],"issued":{"date-parts":[["1950",8,1]]}}},{"key":"http://zotero.org/users/39885/items/8CK8XR7R","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8CK8XR7R","type":"book","title":"The life of James Clerk Maxwell : with a selection from his correspondence and occasional writings and a sketch of his contributions to science / by Lewis Campbell and William Garnett","publisher":"Macmillan,","publisher-place":"London :","number-of-pages":"710","event-place":"London :","URL":"http://www.biodiversitylibrary.org/item/71775","shortTitle":"The life of James Clerk Maxwell","author":[{"family":"Campbell","given":"Lewis"},{"family":"Garnett","given":"William"}]}},{"key":"http://zotero.org/users/39885/items/8E9ZGBRS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8E9ZGBRS","type":"article-journal","title":"Maxwell, Helmholtz, and the unreasonable effectiveness of the method of physical analogy","container-title":"Studies in History and Philosophy of Science Part A","source":"ScienceDirect","abstract":"The fact that the same equations or mathematical models reappear in the descriptions of what are otherwise disparate physical systems can be seen as yet another manifestation of Wigner's “unreasonable effectiveness of mathematics.” James Clerk Maxwell famously exploited such formal similarities in what he called the “method of physical analogy.” Both Maxwell and Hermann von Helmholtz appealed to the physical analogies between electromagnetism and hydrodynamics in their development of these theories. I argue that a closer historical examination of the different ways in which Maxwell and Helmholtz each deployed this analogy gives further insight into debates about the representational and explanatory power of mathematical models.","URL":"http://www.sciencedirect.com/science/article/pii/S0039368114000909","DOI":"10.1016/j.shpsa.2014.09.012","ISSN":"0039-3681","journalAbbreviation":"Studies in History and Philosophy of Science Part A","author":[{"family":"Bokulich","given":"Alisa"}],"accessed":{"date-parts":[["2015",2,24]]}}},{"key":"http://zotero.org/users/39885/items/8ERKPEU9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8ERKPEU9","type":"book","title":"A practical approach to strength training","publisher":"Masters Press","publisher-place":"Indianapolis  IN","edition":"3rd ed.","event-place":"Indianapolis  IN","ISBN":"978-1-57028-018-4","author":[{"family":"Brzycki","given":"Matt"}],"issued":{"date-parts":[["1995"]]}}},{"key":"http://zotero.org/users/39885/items/8F7F7MUW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8F7F7MUW","type":"article-journal","title":"Regulation of shale, coal seam and tight gas activities in Western Australia: An analysis of the capacity of the Petroleum and Geothermal Act 1967 (WA) to regulate onshore gas activities in Western Australia","container-title":"Law Faculty Publications","page":"1-28","URL":"http://epublications.bond.edu.au/law_pubs/419","shortTitle":"Regulation of shale, coal seam and tight gas activities in Western Australia","author":[{"family":"Hunter","given":"Tina"}],"issued":{"date-parts":[["2011",7,1]]}}},{"key":"http://zotero.org/users/39885/items/8FTTNECA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8FTTNECA","type":"paper-conference","title":"Modeling continuous system dynamics in SysML","container-title":"2007 ASME International Mechanical Engineering Congress and Exposition","source":"Google Scholar","author":[{"family":"Johnson","given":"T.A."},{"family":"Paredis","given":"CJJ"},{"family":"Burkhart","given":"R."},{"family":"Jobe","given":"JM"}],"issued":{"date-parts":[["2007"]]}}},{"key":"http://zotero.org/users/39885/items/8FU2M2A3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8FU2M2A3","type":"book","title":"The Government Manager's Guide to the Work Breakdown Structure","publisher":"Do Sustainability","number-of-pages":"98","source":"Google Books","abstract":"Finding expert advice on all the subjects a government manager encounters during a normal day is challenging at best. Finding relevant information that is readily accessible and useful has been unheard of—until now. The Government Manager’s Essential Library is a series of easy-to-use, subject-specific guides on issues that every government manager faces. When you’re dealing with mission-essential duties, you need information you can trust from experts who speak your language. You need complete answers written so that you understand and can act on the information. You need The Government Manager’s Essential Library. Filled with helpful tips and practical guidelines, each book contains a wealth of information on a particular subject that is geared specifically for you as a government manager. Together the volumes make a truly essential library for every government manager. The Government Manager’s Guide to the Work Breakdown Structure The work breakdown structure (WBS) is a cornerstone of managing any project. Every government manager should understand how to construct a WBS in the project or program lifecycle. This quick reference presents the fundamental WBS principles, pragmatic steps for the government manager to follow in developing a project WBS, and a checklist for the project manager to use in reviewing a WBS. In addition, DOD recommendations for avoiding pitfalls in constructing a WBS are highlighted. Contents: Introduction to the Work Breakdown Structure • Work Breakdown Structure Fundamentals • WBS Details • Use of the WBS in Managing Government Projects • Lifecycle Planning: Programs and Phases • WBS Principles, Steps, and Checklist • Acronyms and Abbreviations About the Author Gregory T. Haugan, PhD, PMP, is vice president of GLH Incorporated, which specializes in project management consulting and training. He has more than 40 years of experience as a government sector official and a private sector consultant in the planning, scheduling, management, and operation of projects of all sizes and in the development and implementation of project management and information systems.","ISBN":"978-1-56726-432-6","language":"en","author":[{"family":"Haugan","given":"Gregory T."}],"issued":{"date-parts":[["2010",7,1]]}}},{"key":"http://zotero.org/users/39885/items/8GTPKINB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8GTPKINB","type":"book","title":"The Triple Helix: Gene, Organism, and Environment","publisher":"Harvard University Press","edition":"1","ISBN":"0-674-00159-1","call-number":"0000","shortTitle":"The Triple Helix","author":[{"family":"Lewontin","given":"Richard"}],"issued":{"date-parts":[["2000",4,15]]}}},{"key":"http://zotero.org/users/39885/items/8H4KQIU8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8H4KQIU8","type":"article-journal","title":"On the unification power of models","container-title":"Software & Systems Modeling","page":"171-188","volume":"4","source":"CrossRef","URL":"http://www.springerlink.com.ezproxy.lib.rmit.edu.au/content/xn50242535640k10/","DOI":"10.1007/s10270-005-0079-0","ISSN":"1619-1366, 1619-1374","author":[{"family":"Bezivin","given":"Jean"}],"issued":{"date-parts":[["2005",5,10]]},"accessed":{"date-parts":[["2011",8,28]]}}},{"key":"http://zotero.org/users/39885/items/8HS4IX35","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8HS4IX35","type":"chapter","title":"Energy quality control of ecosystem design","container-title":"Marsh Estuarine Systems Simulation","collection-title":"Belle Baruch Library in Marine Science","collection-number":"8","publisher":"Univ. of S.C. Press, Columbia","call-number":"0039","author":[{"family":"Odum","given":"Howard T"}],"issued":{"date-parts":[["1979"]]}}},{"key":"http://zotero.org/users/39885/items/8IKZNPBT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8IKZNPBT","type":"book","title":"The Philosophy of Ecology: From Science to Synthesis","publisher":"University of Georgia Press","ISBN":"0-8203-2220-2","call-number":"0003","shortTitle":"The Philosophy of Ecology","author":[{"family":"Keller","given":"David R."},{"family":"Golley","given":"Frank B."}],"issued":{"date-parts":[["2000",10,20]]}}},{"key":"http://zotero.org/users/39885/items/8IQ3IFK4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8IQ3IFK4","type":"book","title":"Hydrology: An Australian Introduction","publisher":"OUP Australia and New Zealand","number-of-pages":"304","source":"Amazon.com","ISBN":"0-19-555358-6","shortTitle":"Hydrology","author":[{"family":"Ladson","given":"Anthony"}],"issued":{"date-parts":[["2008",1,4]]}}},{"key":"http://zotero.org/users/39885/items/8J55DGU2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8J55DGU2","type":"book","title":"Systems Engineering Fundamentals","publisher":"PN","source":"Amazon","author":[{"family":"Lightsey","given":"Bob"}],"issued":{"date-parts":[["2001"]]}}},{"key":"http://zotero.org/users/39885/items/8KIK6BVX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8KIK6BVX","type":"article-journal","title":"Using social contract to inform social licence to operate: an application in the Australian coal seam gas industry","container-title":"Journal of Cleaner Production","page":"831–839","volume":"84","source":"Google Scholar","URL":"http://www.sciencedirect.com/science/article/pii/S0959652613008111","shortTitle":"Using social contract to inform social licence to operate","author":[{"family":"Lacey","given":"Justine"},{"family":"Lamont","given":"Julian"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/8KM8PGM8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8KM8PGM8","type":"chapter","title":"Models for national, international, and global systems policy","container-title":"Economic-Ecological Modelling. North-Holland, Amsterdam","publisher":"Elsevier Science Publishers","publisher-place":"North-Holland","event-place":"North-Holland","call-number":"0029","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1987"]]}}},{"key":"http://zotero.org/users/39885/items/8PE6WPMF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8PE6WPMF","type":"book","title":"The new Penguin dictionary of science","publisher":"Penguin Books","publisher-place":"London ;;New York","event-place":"London ;;New York","ISBN":"978-0-14-051271-7","author":[{"family":"Clugston","given":"M"}],"issued":{"date-parts":[["1998"]]}}},{"key":"http://zotero.org/users/39885/items/8PHBSBUK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8PHBSBUK","type":"article-journal","title":"Insurance at the Energy-Water Nexus","container-title":"U. Rich. L. Rev.","page":"1033","volume":"48","source":"Google Scholar","URL":"http://heinonlinebackup.com/hol-cgi-bin/get_pdf.cgi?handle=hein.journals/urich48&section=33","author":[{"family":"Hornstein","given":"Donald T."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",2,4]]}}},{"key":"http://zotero.org/users/39885/items/8RE5BIE8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8RE5BIE8","type":"paper-conference","title":"Maintaining synchronized water datasets","container-title":"19th International Congress on Modelling and Simulation","publisher-place":"Perth, Australia","event":"19th International Congress on Modelling and Simulation","event-place":"Perth, Australia","URL":"http://www.mssanz.org.au/modsim2011/H4/power.pdf","author":[{"family":"Power","given":"R"},{"family":"Walker","given":"G"}],"issued":{"date-parts":[["2011"]]}}},{"key":"http://zotero.org/users/39885/items/8TDUFP9U","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8TDUFP9U","type":"article-journal","title":"Operational assimilation of ASCAT surface soil wetness at the Met Office","container-title":"Hydrol. Earth Syst. Sci.","page":"2729-2746","volume":"15","issue":"8","source":"Copernicus Online Journals","URL":"http://www.hydrol-earth-syst-sci.net/15/2729/2011/","DOI":"10.5194/hess-15-2729-2011","ISSN":"1607-7938","journalAbbreviation":"Hydrol. Earth Syst. Sci.","author":[{"family":"Dharssi","given":"I."},{"family":"Bovis","given":"K. J."},{"family":"Macpherson","given":"B."},{"family":"Jones","given":"C. P."}],"issued":{"date-parts":[["2011",8,31]]},"accessed":{"date-parts":[["2014",3,3]]}}},{"key":"http://zotero.org/users/39885/items/8TQVTBTQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8TQVTBTQ","type":"article","title":"Public Consultation – The Draft National Harmonised Regulatory Framework for Coal Seam Gas","publisher":"Victorian Farmers Federation","URL":"http://www.scer.gov.au/files/2013/03/VictorianFarmersFederationStadbrokeBranch.pdf","author":[{"family":"VFF","given":"Victorian Farmers Federation"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/8TUKSZEC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8TUKSZEC","type":"book","title":"Descartes: Meditations on First Philosophy: With Selections from the Objections and Replies","publisher":"Cambridge University Press","edition":"Revised","ISBN":"0-521-55818-2","call-number":"1302","shortTitle":"Descartes","author":[{"family":"Descartes","given":"Rene"},{"family":"Ameriks","given":"Karl"},{"family":"Clarke","given":"Desmond M."}],"issued":{"date-parts":[["1996",4,26]]}}},{"key":"http://zotero.org/users/39885/items/8U2WGSCX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8U2WGSCX","type":"webpage","title":"Interactive WebGL Globes with THREE.js and D3","container-title":"delimited","abstract":"In this article we're going to make an interactive WebGL globe.   Instead \nof creating complex geometries from the geojson data to represent the \ncountries, we'll use D3 to generate canvas maps that get converted to \ntextures and applied to a sphere in THREE.js.  I've found this is a pretty \nsimple way to get the basic effect with minimal effort.  With a few helper \nfunctions and some work to get things aligned properly we can make great \ninteractive globes with a very small amount of code.  For many common data \nvisualizations like a world choropleth where you want to show country level \ndata or maybe plot points between major world cities, this technique will \nwork well and with some imagination can be used to make some stunning data \nvisualizations.","URL":"http://www.delimited.io/blog/2015/5/16/interactive-webgl-globes-with-threejs-and-d3","accessed":{"date-parts":[["2015",11,10]]}}},{"key":"http://zotero.org/users/39885/items/8UKT529V","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8UKT529V","type":"article-journal","title":"The vis viva dispute: A controversy at the dawn of dynamics","container-title":"Physics Today","page":"31-36","volume":"59","issue":"10","source":"scitation.aip.org","abstract":"The need to augment Newtonian mechanics to encompass systems more complex than collections of point masses engendered a century-long dispute about conservation principles.","URL":"http://scitation.aip.org/content/aip/magazine/physicstoday/article/59/10/10.1063/1.2387086","DOI":"10.1063/1.2387086","ISSN":"0031-9228, 1945-0699","shortTitle":"The vis viva dispute","language":"en","author":[{"family":"Smith","given":"George E."}],"issued":{"date-parts":[["2006",10,1]]},"accessed":{"date-parts":[["2015",12,30]]}}},{"key":"http://zotero.org/users/39885/items/8UXU22RC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8UXU22RC","type":"article-journal","title":"Social media, reputation risk and ambient publicity management","container-title":"Strategy & Leadership","page":"43-49","volume":"38","issue":"6","source":"emeraldinsight.com.ezproxy.library.uq.edu.au (Atypon)","URL":"http://www.emeraldinsight.com.ezproxy.library.uq.edu.au/doi/full/10.1108/10878571011088069","DOI":"10.1108/10878571011088069","ISSN":"1087-8572","journalAbbreviation":"Strategy & Leadership","author":[{"literal":"Pekka Aula"}],"issued":{"date-parts":[["2010",11,9]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/8WSNN3WW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8WSNN3WW","type":"article-journal","title":"Icons and Electronics","container-title":"Historical Studies in the Natural Sciences","page":"405 - 450","volume":"38","issue":"3","source":"UQ Library Search, Summon 2.0","abstract":"In the late 1950s, a wide-ranging debate erupted over the seemingly innocuous question of how transistors—the revolutionary new electronic devices—should be drawn. By forcing a break in the long-standing traditions of electronic drawing, transistors generated a crisis in the ontology of circuit diagrams, forcing a choice between representations that emphasized form and those that stressed function. This paper explores what was at stake in that mid-century debate over visual culture. It tracks one function-based symbol through concerns about auto-comprehension, visual communication, and electronic reliability to see how transistor symbols formed crucial sites for articulating the meanings of material devices and their relationship to the wider populations of electronic entities, especially vacuum tubes. In doing so, the article shifts the emphasis in the history of electronics from material to visual culture, recasting our understanding of postwar electronics as a history of drawings as well as devices.","URL":"http://www.jstor.org/stable/10.1525/hsns.2008.38.3.405","DOI":"10.1525/hsns.2008.38.3.405","ISSN":"1939-1811","language":"English","author":[{"family":"Jones-Imhotep","given":"Edward"}],"issued":{"date-parts":[["2008",8]]},"accessed":{"date-parts":[["2016",3,11]]}}},{"key":"http://zotero.org/users/39885/items/8WSTCSSA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8WSTCSSA","type":"article","title":"Baseline Assessment Guideline","URL":"https://www.ehp.qld.gov.au/management/non-mining/documents/baseline-assessment-guideline.pdf","language":"en-AU","author":[{"family":"EHP","given":"Department of Environment Heritate and Planning"}],"issued":{"date-parts":[["2010",5,13]]},"accessed":{"date-parts":[["2015",8,12]]}}},{"key":"http://zotero.org/users/39885/items/8XW2XCCU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8XW2XCCU","type":"article-journal","title":"Perturbation of membrane dynamics in nerve cells as an early event during bilirubin-induced apoptosis","container-title":"J. Lipid Res.","page":"885-894","volume":"43","issue":"6","abstract":"Increased levels of unconjugated bilirubin, the end product of heme catabolism, impair crucial aspects of nerve cell function. In previous studies, we demonstrated that bilirubin toxicity may be due to cell death by apoptosis. To characterize the sequence of events leading to neurotoxicity, we exposed developing rat brain astrocytes and neurons to unconjugated bilirubin and investigated whether changes in membrane dynamic properties can mediate apoptosis. Bilirubin induced a rapid, dose-dependent increase in apoptosis, which was nevertheless preceded by impaired mitochondrial metabolism. Using spin labels and electron paramagnetic resonance spectroscopy analysis of whole cell and isolated mitochondrial membranes exposed to bilirubin, we detected major membrane perturbation. By physically interacting with cell membranes, bilirubin induced an almost immediate increase in lipid polarity sensed at a superficial level. The enhanced membrane permeability coincided with an increase in lipid fluidity and protein mobility and was associated with significant oxidative injury to membrane lipids. In conclusion, apoptosis of nerve cells induced by bilirubin is mediated by its primary effect at physically perturbing the cell membrane. Bilirubin directly interacts with membranes influencing lipid polarity and fluidity, protein order, and redox status. These data suggest that nerve cell membranes are primary targets of bilirubin toxicity.","URL":"http://www.jlr.org/cgi/content/abstract/43/6/885","call-number":"0039","author":[{"family":"Rodrigues","given":"Cecilia M. P."},{"family":"Sola","given":"Susana"},{"family":"Castro","given":"Rui E."},{"family":"Laires","given":"Pedro A."},{"family":"Brites","given":"Dora"},{"family":"Moura","given":"Jose J. G."}],"issued":{"date-parts":[["2002",6,1]]},"accessed":{"date-parts":[["2009",6,10]]}}},{"key":"http://zotero.org/users/39885/items/8ZK85KJE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/8ZK85KJE","type":"book","title":"Water Resources Engineering","publisher":"John Wiley & Sons","number-of-pages":"919","source":"Google Books","abstract":"Environmental engineers continue to rely on the leading resource in the field on the principles and practice of water resources engineering. The second edition now provides them with the most up-to-date information along with a remarkable range and depth of coverage. Two new chapters have been added that explore water resources sustainability and water resources management for sustainability. New and updated graphics have also been integrated throughout the chapters to reinforce important concepts. Additional end-of-chapter questions have been added as well to build understanding. Environmental engineers will refer to this book throughout their careers.","ISBN":"978-0-470-46064-1","language":"en","author":[{"family":"Mays","given":"Larry W."}],"issued":{"date-parts":[["2010",6,8]]}}},{"key":"http://zotero.org/users/39885/items/92E9Q5CV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/92E9Q5CV","type":"article","title":"SysML Modelling Language explained","publisher":"Object Direct","URL":"http://www.google.com.au/url?sa=t&source=web&cd=1&ved=0CBsQFjAA&url=http%3A%2F%2Fwww.omgsysml.org%2FSysML_Modelling_Language_explained-finance.pdf&ei=6BBjTuS_JKm8iAeOlN23Cg&usg=AFQjCNHVKkdY5HLmb0EbbfSLW8VcrDKB_g","author":[{"family":"FINANCE","given":"Guillaume"}],"issued":{"date-parts":[["2010",10,1]]},"accessed":{"date-parts":[["2011",9,4]]}}},{"key":"http://zotero.org/users/39885/items/92VAM4WI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/92VAM4WI","type":"article-journal","title":"Risk Analysis and Risk Management: An Historical Perspective","container-title":"Risk Analysis","page":"103-120","volume":"5","issue":"2","source":"Wiley Online Library","abstract":"This paper reviews the history of risk analysis and risk management, giving special emphasis to the neglected period prior to the 20th century. The overall objective of the paper is to: (1) dampen the prevailing tendency to view present-day concerns about risk in an ahistorical context; (2) shed light on the intellectual antecedents of current thinking about risk; (3) clarify how contemporary ideas about risk analysis and societal risk management differ significantly from the past; and (4) provide a basis for anticipating future directions in risk analysis and management.","URL":"http://onlinelibrary.wiley.com/doi/10.1111/j.1539-6924.1985.tb00159.x/abstract","DOI":"10.1111/j.1539-6924.1985.tb00159.x","ISSN":"1539-6924","shortTitle":"Risk Analysis and Risk Management","language":"en","author":[{"family":"Covello","given":"Vincent T."},{"family":"Mumpower","given":"Jeryl"}],"issued":{"date-parts":[["1985",6,1]]},"accessed":{"date-parts":[["2015",8,13]]}}},{"key":"http://zotero.org/users/39885/items/969BMDN9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/969BMDN9","type":"article-journal","title":"Systems thinking and neurological positivism: Further elucidations and implications","container-title":"Systems Research","page":"1-17","volume":"7","issue":"1","source":"Wiley Online Library","abstract":"The ideas, goals, and postulates of neurological positivism (np) are reviewed briefly. Three new lines of scientific research and systems modeling are described which clucidate np further, and which np helps to unify. (1) fractals and fractal dynamics (chaos) in both living and nonliving systems; (2) a generalized ecosystems model, and (3) a micro/macro deterministic model of upward and downward causation, with downward causation supervenient. Three implications stemming from these clarifications are described: (1) the limitations of reductionistic science; (2) the brain as a fractal-projective generating system; and (3) a redefinition of the mind-body problem. It is concluded that the new supportive sources of research and the new implications establish further, in ways understandable by a broad variety of people, the capacity of np to organize what we know, to unify disparate categories of knowledge within the systems thinking perspective, and to promote the rapprochement between science and the humanities. As long as our brain is a mystery, the universe—the reflection of the structure of the brain—will be a mystery.","URL":"http://onlinelibrary.wiley.com.ezproxy.library.uq.edu.au/doi/10.1002/sres.3850070101/abstract","DOI":"10.1002/sres.3850070101","ISSN":"1099-1735","shortTitle":"Systems thinking and neurological positivism","journalAbbreviation":"Syst. Res.","language":"en","author":[{"family":"Vandervert","given":"Larry R."}],"issued":{"date-parts":[["1990",3,1]]},"accessed":{"date-parts":[["2016",2,20]]}}},{"key":"http://zotero.org/users/39885/items/96UNCG96","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/96UNCG96","type":"article-journal","title":"Odum Correspondance","container-title":"Ecological Engineering","page":"215-216","volume":"9","issue":"3-4","call-number":"0000","author":[{"family":"Odum","given":"Howard T"}],"issued":{"date-parts":[["1997"]]}}},{"key":"http://zotero.org/users/39885/items/96UQFWZP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/96UQFWZP","type":"book","title":"Brain of the Firm: A Development in Management Cybernetics.","publisher":"McGraw-Hill","ISBN":"0-07-073122-5","call-number":"0016","shortTitle":"Brain of the Firm","author":[{"family":"Beer","given":"Stafford."}],"issued":{"date-parts":[["1972",1]]}}},{"key":"http://zotero.org/users/39885/items/97G7D7MP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/97G7D7MP","type":"speech","title":"Data Cleansing and Annotation Tool","event":"National Technology Reference  Group (NTRG) Workshop","URL":"http://www.bom.gov.au/water/regulations/fundingProgram/document/ntrg/Ian_Scott_Session_1.pdf","language":"English","author":[{"family":"Scott","given":"Ian"}],"issued":{"date-parts":[["2010"]]},"accessed":{"date-parts":[["2011",3,5]]}}},{"key":"http://zotero.org/users/39885/items/98JEUXVK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/98JEUXVK","type":"chapter","title":"Epilogue","container-title":"A New Foundation for Representation in Cognitive and Brain Science","collection-title":"Springer Series in Cognitive and Neural Systems","collection-number":"7","publisher":"Springer Netherlands","page":"167-169","source":"link.springer.com.ezproxy.library.uq.edu.au","abstract":"The progress from an immature science to a mature one must pass through the construction of appropriate mechanisms with explanatory power. In brain science we must learn from the lessons geneticists have learnt in the hard way. The genome tells us nothing about how proteins fold and interact with each other, and the clinical benefits of the human genome project are far from clear.","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/chapter/10.1007/978-94-007-7738-5_10","ISBN":"978-94-007-7737-8","note":"DOI: 10.1007/978-94-007-7738-5_10","language":"en","author":[{"family":"Gómez-Ramirez","given":"Jaime"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2016",2,23]]}}},{"key":"http://zotero.org/users/39885/items/99J4JE7W","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/99J4JE7W","type":"chapter","title":"Strategic Decision-Making","container-title":"Strategic Decision Making","collection-title":"Decision Engineering","publisher":"Springer London","page":"3-10","source":"link.springer.com.ezproxy.library.uq.edu.au","abstract":"Problems in which the stakes are extremely high, in which human perceptions and judgements are involved, and whose solutions have long-term repercussions, call for a rational approach to their solution. Various techniques are in use for decision-making at the strategic level. However, at this level the problems are ill defined and are usually presented in terms that are uncertain, fuzzy and confusing, while problem-solving techniques based on sound mathematical principles can only be applied to systematic and well-formed problems. This mismatch between problems and their solution methods leads to the frustration of top decision-makers and their loss of confidence in mathematical techniques.","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/chapter/10.1007/978-1-85233-864-0_1","ISBN":"978-1-85233-756-8","note":"DOI: 10.1007/978-1-85233-864-0_1","language":"en","editor":[{"family":"Roy","given":"Dr Rajkumar"}],"issued":{"date-parts":[["2004"]]},"accessed":{"date-parts":[["2016",2,16]]}}},{"key":"http://zotero.org/users/39885/items/9B6QASAN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9B6QASAN","type":"book","title":"Extreme Programming with Perl","publisher":"O'Reilly Media","number-of-pages":"256","source":"Amazon.com","ISBN":"978-0-596-00266-4","language":"English","author":[{"family":"Nagler","given":"Robert"}],"issued":{"date-parts":[["2005",8,1]]}}},{"key":"http://zotero.org/users/39885/items/9BAPEUIG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9BAPEUIG","type":"book","title":"Our ecological footprint : reducing human impact on the earth","publisher":"New Society Publishers","publisher-place":"Gabriola Island  BC ;;Philadelphia  PA","event-place":"Gabriola Island  BC ;;Philadelphia  PA","ISBN":"978-0-86571-311-6","call-number":"2300","shortTitle":"Our ecological footprint","author":[{"family":"Wackernagel","given":"Mathis"}],"issued":{"date-parts":[["1996"]]}}},{"key":"http://zotero.org/users/39885/items/9BTAITTN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9BTAITTN","type":"book","title":"Thucydides: Books I and II","publisher":"W. Heinemann","volume":"108","source":"Google Scholar","URL":"https://archive.org/stream/thucydideswithen01thucuoft/thucydideswithen01thucuoft_djvu.txt","shortTitle":"Thucydides","author":[{"family":"Smith","given":"Charles Forster"},{"literal":"others"}],"issued":{"date-parts":[["1962"]]}}},{"key":"http://zotero.org/users/39885/items/9BX9MUAD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9BX9MUAD","type":"article-journal","title":"The maximum power principle: An empirical investigation","container-title":"Ecological Modelling","page":"317-335","volume":"190","issue":"3–4","source":"ScienceDirect","abstract":"The maximum power principle is a potential guide to understanding the patterns and processes of ecosystem development and sustainability. The principle predicts the selective persistence of ecosystem designs that capture a previously untapped energy source. This hypothesis was investigated empirically in controlled and replicated tests conducted in planktonic microcosms. Microecosystems that developed under a pH-controlled light regime, in which light duration was altered based on changes in an ecosystem-controllable variable (water column pH), were compared with those that developed under fixed photoperiods. According to the principle, pH-decreasing (and power-increasing) organization should selectively persist under pH-controlled light. To assess changes in pH dynamics that occurred under the alternative selection regime, in which photoperiods were not linked with pH-affecting selection or organization, the microecosystems that developed under fixed photoperiods were subjected to pH-controlled light on the last day of each test. The daily light duration increased 506 min on average in microecosystems that developed under pH-controlled light and 412 min on average in microecosystems that developed under fixed photoperiods. Selective reinforcement of acid-secreting blue-green algae in response to CO2 and nutrient limitations could account for the greater increase in power acquisition in microecosystems that developed under pH-controlled light.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380005002553","DOI":"10.1016/j.ecolmodel.2005.04.022","ISSN":"0304-3800","shortTitle":"The maximum power principle","journalAbbreviation":"Ecological Modelling","author":[{"family":"Cai","given":"T. T."},{"family":"Montague","given":"C. L."},{"family":"Davis","given":"J. S."}],"issued":{"date-parts":[["2006",1,25]]},"accessed":{"date-parts":[["2015",4,5]]}}},{"key":"http://zotero.org/users/39885/items/9DC8DBR8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9DC8DBR8","type":"webpage","title":"Queensland Globe - Data | Queensland Government","abstract":"Queensland Globe allows you to view and explore Queensland maps, imagery and other spatial data inside the Google Earth™ application.\n\nFor further information on the Queensland Globe  including...","URL":"https://data.qld.gov.au/dataset/queensland-globe","author":[{"literal":"QLD State Government"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/9FQTKUS8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9FQTKUS8","type":"article-journal","title":"Trust, confidence, procedural fairness, outcome fairness, moral conviction, and the acceptance of GM field experiments","container-title":"Risk Analysis","page":"1394–1403","volume":"32","issue":"8","source":"Google Scholar","URL":"http://onlinelibrary.wiley.com/doi/10.1111/j.1539-6924.2011.01739.x/full","author":[{"family":"Siegrist","given":"Michael"},{"family":"Connor","given":"Melanie"},{"family":"Keller","given":"Carmen"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",8,12]]}}},{"key":"http://zotero.org/users/39885/items/9G6HQE7P","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9G6HQE7P","type":"article-journal","title":"Decision making with the analytic hierarchy process","container-title":"International Journal of Services Sciences","page":"83-98","volume":"1","issue":"1","source":"inderscienceonline.com (Atypon)","abstract":"Decisions involve many intangibles that need to be traded off. To do that, they have to be measured along side tangibles whose measurements must also be evaluated as to, how well, they serve the objectives of the decision maker. The Analytic Hierarchy Process (AHP) is a theory of measurement through pairwise comparisons and relies on the judgements of experts to derive priority scales. It is these scales that measure intangibles in relative terms. The comparisons are made using a scale of absolute judgements that represents, how much more, one element dominates another with respect to a given attribute. The judgements may be inconsistent, and how to measure inconsistency and improve the judgements, when possible to obtain better consistency is a concern of the AHP. The derived priority scales are synthesised by multiplying them by the priority of their parent nodes and adding for all such nodes. An illustration is included.","URL":"http://www.inderscienceonline.com/doi/abs/10.1504/IJSSci.2008.01759","DOI":"10.1504/IJSSci.2008.01759","ISSN":"1753-1446","journalAbbreviation":"International Journal of Services Sciences","author":[{"family":"Saaty","given":"Thomas L."}],"issued":{"date-parts":[["2008",1,1]]},"accessed":{"date-parts":[["2016",2,15]]}}},{"key":"http://zotero.org/users/39885/items/9H9NBIWU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9H9NBIWU","type":"article-journal","title":"Leibniz, Papin, and The Steam Engine","container-title":"Fusion","page":"27-44","volume":"3","URL":"http://wlym.com/archive/fusion/fusion/19791212-fusion.pdf","ISSN":"0148-0537","author":[{"family":"Valenti","given":"Philip"}],"issued":{"date-parts":[["1979"]]}}},{"key":"http://zotero.org/users/39885/items/9JQNV8UJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9JQNV8UJ","type":"book","title":"PIC microcontroller project book","publisher":"McGraw-Hill","publisher-place":"New York ;;London","event-place":"New York ;;London","ISBN":"978-0-07-135479-0","author":[{"family":"Iovine","given":"John"}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/9MQ93JKH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9MQ93JKH","type":"article-journal","title":"East Coast Gas Inquiry Submission Reserve Our Gas Alliance July 2015","source":"Google Scholar","URL":"http://www.accc.gov.au/system/files/ECGI%20-%20Submission%20to%20Issues%20Paper%20-%20PUBLIC%20-%20ROG.PDF","author":[{"family":"McDine","given":"Scott"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",8,24]]}}},{"key":"http://zotero.org/users/39885/items/9MZD47SX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9MZD47SX","type":"article-journal","title":"A Web-based system enabling the integration, analysis, and 3D sub-surface visualization of groundwater monitoring data and geological models","container-title":"International Journal of Digital Earth","page":"1 - 18","source":"UQ Library Search, Summon 2.0","DOI":"10.1080/17538947.2014.1002866","ISSN":"1753-8947","language":"English","author":[{"family":"Hunter","given":"Jane"},{"family":"Brooking","given":"Charles"},{"family":"Reading","given":"Lucy"},{"family":"Vink","given":"Sue"}],"issued":{"date-parts":[["2015",1]]}}},{"key":"http://zotero.org/users/39885/items/9NP7TA7A","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9NP7TA7A","type":"book","title":"Business Dynamics: Systems Thinking and Modeling for a Complex World with CD-ROM","publisher":"McGraw-Hill/Irwin","source":"Amazon.com","ISBN":"0-07-238915-X","call-number":"3022","shortTitle":"Business Dynamics","author":[{"family":"Sterman","given":"John"},{"family":"Sterman","given":"John D."}],"issued":{"date-parts":[["2000",2,23]]}}},{"key":"http://zotero.org/users/39885/items/9PC7WPWZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9PC7WPWZ","type":"article-journal","title":"Industrial symbiosis: the case for market coordination","container-title":"Journal of Cleaner Production","page":"1099-1110","volume":"12","issue":"8-10","abstract":"Despite the fact that all successful, documented cases of industrial symbiosis to this day have been self-organizing, some authors and development officials have suggested that increased public planning might deliver better results in this respect than spontaneously evolved market coordination. This paper takes an historical approach to suggest that comprehensive planning is unlikely to live up to the expectations of its proponents. The essay is structured as follows. The first section provides short case studies of industrial symbiosis in highly different economic and institutional settings, the essentially free-market regime of Victorian England and communist Hungary (1948-1989). The available evidence suggests that market coordination proved much more favorable to the emergence of industrial symbiosis, despite the elaboration of a comprehensive policy to that effect in Hungary. Insights derived from the so-called \"Austrian\" critique of central planning are then used to explain this paradox. The analysis presented suggests that the Hungarian planners' failure was not so much the result of the bad implementation of sound policies, but the logical outcome of a top-down approach's shortcomings. Policy implications for the public planning of industrial symbiosis in a mixed economy are then derived and the case for self-organization is found more compelling. The creation of more innovative institutions that will force firms to \"internalize their externalities\" while leaving them the necessary freedom to innovate is viewed as an urgently needed and promising path towards increased, sustainable reuse of industrial by-products.","URL":"http://www.sciencedirect.com/science/article/B6VFX-4C2R2S9-1/1/c2950e4e3c2bb519447113b794ac7882","DOI":"10.1016/j.jclepro.2004.02.008","call-number":"0056","shortTitle":"Industrial symbiosis","author":[{"family":"Desrochers","given":"Pierre"}],"issued":{"date-parts":[["2004"]]},"accessed":{"date-parts":[["2008",7,9]]}}},{"key":"http://zotero.org/users/39885/items/9QERFMS8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9QERFMS8","type":"paper-conference","title":"Regulatory Nirvana for Hydraulic Fracture Stimulation","container-title":"ISRM International Conference for Effective and Sustainable Hydraulic Fracturing","publisher":"International Society for Rock Mechanics","source":"Google Scholar","URL":"https://www.onepetro.org/conference-paper/ISRM-ICHF-2013-015","author":[{"family":"Goldstein","given":"Barry"},{"family":"Malavazos","given":"Michael"},{"family":"Wickham","given":"Alexandra"},{"family":"Jarosz","given":"Michael"},{"family":"Pepicelli","given":"Dominic"},{"family":"Webb","given":"Mieka"},{"family":"Wenham","given":"Dale"},{"literal":"others"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",10,12]]}}},{"key":"http://zotero.org/users/39885/items/9REQEI5H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9REQEI5H","type":"book","title":"Systems Analysis and Simulation in Ecology","publisher":"Elsevier","number-of-pages":"609","source":"Google Books","abstract":"Systems Analysis and Simulation in Ecology","ISBN":"978-1-4832-6277-2","language":"en","author":[{"family":"Patten","given":"Bernard C."}],"issued":{"date-parts":[["2013",9,17]]}}},{"key":"http://zotero.org/users/39885/items/9SW3DN4F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9SW3DN4F","type":"book","title":"Dynamical analogies","publisher":"Van Nostrand Princeton, NJ","source":"Google Scholar","URL":"http://www.tubebooks.org/Books/intro_Olson_1943_Dynamical_Analogies.pdf","author":[{"family":"Olson","given":"Harry Ferdinand"}],"issued":{"date-parts":[["1958"]]},"accessed":{"date-parts":[["2015",2,17]]}}},{"key":"http://zotero.org/users/39885/items/9TEGKM6X","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9TEGKM6X","type":"book","title":"The Rise of Systems Theory","publisher":"Krieger Pub Co","ISBN":"0-89874-857-7","call-number":"1289","author":[{"family":"Lilienfeld","given":"R."}],"issued":{"date-parts":[["1985",6]]}}},{"key":"http://zotero.org/users/39885/items/9TJMSP5N","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9TJMSP5N","type":"article-journal","title":"Electrical properties of biogenic material: bilirubin rich gallstone","container-title":"International Journal of Nano and Biomaterials","page":"339 - 350","volume":"1","issue":"3","abstract":"The electrical properties of Bilirubin Rich Gallstone (BGS) were investigated by the Complex Impedance Spectroscopy (CIS) technique. The dielectric relaxation was found to be of non-Debye type. Evidences of temperature-dependent electrical relaxation phenomena as well as Negative Temperature Coefficient of Resistance (NTCR) character of the sample have been observed. The ac conductivity obeys the universal power law and the dispersion in conductivity was observed in the lower frequency region. The activation energy and thermal conductivity have been estimated from the electrical conductivity data. Ac conductivity analysis indicated the possibility of hopping mechanism for electrical transport processes in the system.","URL":"http://www.inderscience.com/search/index.php?action=record&rec_id=16879","DOI":"10.1504/IJNBM.2008.016879","call-number":"0000","shortTitle":"Electrical properties of biogenic material","author":[{"family":"Prasad","given":"K."},{"family":"Jha","given":"Anal K."},{"family":"Chandra","given":"K.P."}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2009",6,8]]}}},{"key":"http://zotero.org/users/39885/items/9US837JG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9US837JG","type":"article-journal","title":"Systems Chemistry: Pattern Formation in Random Dynamic Combinatorial Libraries13","container-title":"Angewandte Chemie","page":"9014-9017","volume":"119","issue":"46","abstract":"No Abstract","URL":"http://dx.doi.org/10.1002/ange.200702460","DOI":"10.1002/ange.200702460","call-number":"0000","shortTitle":"Systems Chemistry","author":[{"family":"Corbett","given":"Peter�T."},{"family":"Sanders","given":"Jeremy�K.�M."},{"family":"Otto","given":"Sijbren"}],"issued":{"date-parts":[["2007"]]},"accessed":{"date-parts":[["2008",8,20]]}}},{"key":"http://zotero.org/users/39885/items/9UWJBV8N","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9UWJBV8N","type":"article-journal","title":"Socialism and the Unity of Physical Forces","container-title":"Organization Environment","page":"61-75","volume":"17","issue":"1","URL":"http://oae.sagepub.com","DOI":"10.1177/1086026603262092","call-number":"0006","author":[{"family":"Podolinsky","given":"Sergei"}],"issued":{"date-parts":[["2004",3,1]]},"accessed":{"date-parts":[["2008",6,30]]}}},{"key":"http://zotero.org/users/39885/items/9WC99C75","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9WC99C75","type":"article-journal","title":"Experimental demonstration of violations of the Second Law of Thermodynamics for small systems and short time scales","container-title":"[[Physical Review Letters]]","page":"050601/1&ndash;050601/4","volume":"89","call-number":"0270","author":[{"family":"G. M.","given":"Wang E.M. Sevick"}],"issued":{"date-parts":[["2002"]]}}},{"key":"http://zotero.org/users/39885/items/9WNW4NGC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9WNW4NGC","type":"article-journal","title":"Comparison of horse and tractor traction using emergy analysis","container-title":"Ecological Engineering","page":"13-28","volume":"19","issue":"1","call-number":"0029","author":[{"family":"Rydberg","given":"T."},{"family":"Jansén","given":"J."}],"issued":{"date-parts":[["2002"]]}}},{"key":"http://zotero.org/users/39885/items/9WPWAR4B","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9WPWAR4B","type":"article-journal","title":"Bilirubin potentiates inhibitory synaptic transmission in lateral superior olive neurons of the rat","container-title":"Neuroscience Research","page":"161-170","volume":"55","issue":"2","abstract":"Bilirubin is a well-known neurotoxin that can result in multiple neurologic deficits. Previous studies have suggested that bilirubin affects aspects of synaptic transmission; however the acute effects of bilirubin on synaptic transmission have not been examined in real-time. In this study, using whole-cell voltage-clamp recordings, we observed the effect of bilirubin on inhibitory postsynaptic currents (IPSC) in postnatal 13-15-day-old neurons dissociated from lateral superior olive nuclei (LSO), one of the brainstem auditory nucleus that are highly vulnerable to bilirubin. The results showed that 10-5�M bilirubin increased the frequency of spontaneous IPSC without causing change in their amplitudes or in the response to bath applied glycine, suggesting a presynaptic locus for the action. In the presence of tetrodotoxin, the frequency of miniature IPSC was also potentiated by 10-5�M bilirubin. The facilitation by bilirubin was concentration dependent and increased with an increase in exposure time. Bicuculline only partially reduced the action of bilirubin. The action of bilirubin was observed in extracellular Ca2+-free ([Ca2+]o free) solution but was fully occluded by pretreatment with BAPTA-AM in [Ca2+]o free solution. Thus, in LSO neurons, bilirubin facilitates inhibitory synaptic transmission, in a manner independent of voltage-activated Na+ and Ca2+ channels but dependent on presynaptic [Ca2+]i. The increase of inhibitory synaptic transmission in response to acute bilirubin is a novel effect of bilirubin on the central nervous system and may have implications for neurotoxicity and the impairment of auditory transduction seen in hyperbilirubinemia.","URL":"http://www.sciencedirect.com/science/article/B6T0H-4JMM5J4-2/2/f289f9e642a7e66f75ac09139f346291","DOI":"10.1016/j.neures.2006.02.015","call-number":"0005","author":[{"family":"Shi","given":"Hai-Bo"},{"family":"Kakazu","given":"Yasuhiro"},{"family":"Shibata","given":"Shumei"},{"family":"Matsumoto","given":"Nozomu"},{"family":"Nakagawa","given":"Takashi"},{"family":"Komune","given":"Shizuo"}],"issued":{"date-parts":[["2006",6]]},"accessed":{"date-parts":[["2008",8,17]]}}},{"key":"http://zotero.org/users/39885/items/9X58CJRG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9X58CJRG","type":"book","title":"Pattern-Oriented Software Architecture Volume 1: A System of Patterns","publisher":"Wiley","number-of-pages":"476","edition":"1","source":"Amazon.com","ISBN":"0-471-95869-7","shortTitle":"Pattern-Oriented Software Architecture Volume 1","author":[{"family":"Buschmann","given":"Frank"},{"family":"Meunier","given":"Regine"},{"family":"Rohnert","given":"Hans"},{"family":"Sommerlad","given":"Peter"},{"family":"Stal","given":"Michael"},{"family":"Stal","given":"Michael"}],"issued":{"date-parts":[["1996",8,8]]}}},{"key":"http://zotero.org/users/39885/items/9XBCGQSR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/9XBCGQSR","type":"book","title":"Basics of Analog Computers","publisher":"J.F. Rider","number-of-pages":"378","edition":"First","source":"Amazon.com","author":[{"family":"Truitt","given":"Thomas D."},{"family":"Rogers","given":"A. E."}],"issued":{"date-parts":[["1960"]]}}},{"key":"http://zotero.org/users/39885/items/A28HRTMP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/A28HRTMP","type":"thesis","title":"Network energy expenditures for subsystem production","publisher":"University of Florida","genre":"MS Thesis","call-number":"0008","author":[{"family":"Tennenbaum","given":"S. E."}],"issued":{"date-parts":[["1988"]]}}},{"key":"http://zotero.org/users/39885/items/A3I2R9BA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/A3I2R9BA","type":"article-journal","title":"Network Thermodynamics","container-title":"Nature","page":"393-399","volume":"234","issue":"5329","source":"Nature","URL":"http://dx.doi.org/10.1038/234393a0","DOI":"10.1038/234393a0","journalAbbreviation":"Nature","author":[{"family":"OSTER","given":"GEORGE"},{"family":"PERELSON","given":"ALAN"},{"family":"KATCHALSKY","given":"AHARON"}],"issued":{"date-parts":[["1971",12,17]]},"accessed":{"date-parts":[["2011",8,28]]}}},{"key":"http://zotero.org/users/39885/items/A46P4QNU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/A46P4QNU","type":"article-journal","title":"Space Vehicle Failure Modes, Effects, and Criticality Analysis (FMECA) Guide","container-title":"TOR-2009 (8591)-13","volume":"29","source":"Google Scholar","URL":"https://aeroweb.aero.org/m_dir/maddl.nsf/1469678E9BC0FBD388257768005FA03A/$file/TOR-2009(8591)-13.pdf","author":[{"family":"Duphily","given":"Roland"},{"family":"Command","given":"Air Force Space"}],"issued":{"date-parts":[["2009"]]},"accessed":{"date-parts":[["2015",3,15]]}}},{"key":"http://zotero.org/users/39885/items/A5JP7RCM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/A5JP7RCM","type":"article-journal","title":"Analogue Computers","container-title":"Nature","page":"1042","volume":"179","issue":"4569","source":"UQ Library Search, Summon 2.0","DOI":"10.1038/1791042a0","ISSN":"0028-0836","language":"English","author":[{"family":"West","given":"J. C."}],"issued":{"date-parts":[["1957",5]]}}},{"key":"http://zotero.org/users/39885/items/A5NUQHMN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/A5NUQHMN","type":"thesis","title":"DYSFUNCTIONAL BREATHING: ITS PARAMETERS, MEASUREMENT AND","publisher":"RMIT University","source":"Google Scholar","URL":"http://researchbank.rmit.edu.au/view/rmit:11996","shortTitle":"DYSFUNCTIONAL BREATHING","author":[{"family":"Courtney","given":"R."}],"issued":{"date-parts":[["2011"]]},"accessed":{"date-parts":[["2012",10,22]]}}},{"key":"http://zotero.org/users/39885/items/A6BTZR7R","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/A6BTZR7R","type":"book","title":"Unity Through Diversity. A Festschrift for Ludwig von Bertalanffy","publisher":"Gordon & Breach Science Pub","ISBN":"0-677-14860-7","call-number":"0008","author":[{"family":"Gray","given":"Nicholas D. Rizzo William"},{"family":"Rizzo","given":"Nicholas D."}],"issued":{"date-parts":[["1973",6]]}}},{"key":"http://zotero.org/users/39885/items/A76CR9XG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/A76CR9XG","type":"book","title":"Energy Basis for Man and Nature","publisher":"McGraw Hill Higher Education","edition":"2Rev Ed","ISBN":"0-07-047510-5","call-number":"0343","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1981",3,1]]}}},{"key":"http://zotero.org/users/39885/items/A8KQCN5H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/A8KQCN5H","type":"thesis","title":"Norwegian natural gas transportation systems","publisher":"Norwegian University of Science and Technology","source":"Google Scholar","author":[{"family":"Dahl","given":"H. J"}],"issued":{"date-parts":[["2001"]]}}},{"key":"http://zotero.org/users/39885/items/A99BPTA8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/A99BPTA8","type":"article-journal","title":"Evaluation of a building using the emergy method","container-title":"Solar Energy","page":"204-212","volume":"79","issue":"2","call-number":"0013","author":[{"family":"Meillaud","given":"F."},{"family":"Gay","given":"J. B."},{"family":"Brown","given":"M. T."}],"issued":{"date-parts":[["2005"]]}}},{"key":"http://zotero.org/users/39885/items/AAJZ3DMZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AAJZ3DMZ","type":"book","title":"The Biosphere: Complete Annotated Edition","publisher":"Springer","number-of-pages":"192","edition":"1","source":"Amazon.com","ISBN":"0-387-98268-X","shortTitle":"The Biosphere","author":[{"family":"Vernadsky","given":"Vladimir I."}],"issued":{"date-parts":[["1998",3,27]]}}},{"key":"http://zotero.org/users/39885/items/AASANMPA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AASANMPA","type":"article-journal","title":"Principle of environmental energy matching for estimating potential economic value, a rebuttal","container-title":"Coastal Zone Management Journal","page":"239-241","volume":"5","issue":"3","source":"Taylor and Francis+NEJM","URL":"http://dx.doi.org/10.1080/08920757909361809","DOI":"10.1080/08920757909361809","ISSN":"0090-8339","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1979",1,1]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/AB3QR8HR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AB3QR8HR","type":"paper-conference","title":"Thermodynamics of Quality and Society","publisher":"Unicamp","publisher-place":"Unicamp, Campinas, SP, Brazil","page":"139-157","event":"Advances in Energy Studies","event-place":"Unicamp, Campinas, SP, Brazil","call-number":"0002","author":[{"family":"Giannantoni","given":"Corrado"}],"issued":{"date-parts":[["2004"]]}}},{"key":"http://zotero.org/users/39885/items/ABCD2345","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ABCD2345","type":"webpage","title":"Zotero Quick Start Guide","URL":"http://zotero.org/support/quick_start_guide","author":[{"literal":"Center for History and New Media"}]}},{"key":"http://zotero.org/users/39885/items/ABGB2H67","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ABGB2H67","type":"book","title":"The anatomy coloring book","publisher":"Benjamin Cummings","publisher-place":"San Francisco","edition":"3rd ed.","event-place":"San Francisco","ISBN":"978-0-8053-5086-9","author":[{"family":"Kapit","given":"Wynn"}],"issued":{"date-parts":[["2002"]]}}},{"key":"http://zotero.org/users/39885/items/ABN6HTUQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ABN6HTUQ","type":"article-journal","title":"Towards an SSM toolkit: Rich picture diagramming","container-title":"European Journal of Information Systems","page":"397–408","volume":"1","issue":"6","source":"Google Scholar","shortTitle":"Towards an SSM toolkit","author":[{"family":"Avison","given":"DE"},{"family":"Golder","given":"PA"},{"family":"Shah","given":"HU"}],"issued":{"date-parts":[["1992"]]}}},{"key":"http://zotero.org/users/39885/items/ABVDCVVT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ABVDCVVT","type":"webpage","title":"A Digital Earth Globe","container-title":"A Digital Earth Globe","abstract":"The Open Digital Earth Foundation aims to bring the power and benefits of globe technologies, and its rich spatial information, to every person in every nation for the wellbeing of humankind. Dr Peter Woodgate, Chair, Open Digital Earth Foundation Board The Open Digital Earth Foundation is a non-profit organisation that supports new applications of Digital Earth globe technologies…","URL":"http://digitalearthglobe.org/","author":[{"literal":"DEGF"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/AC6S4TIU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AC6S4TIU","type":"article-journal","title":"The Fluctuation Theorem","container-title":"Advances in Physics","page":"1529","volume":"51","issue":"7","URL":"http://www.informaworld.com/10.1080/00018730210155133","DOI":"10.1080/00018730210155133","ISSN":"0001-8732","call-number":"0201","author":[{"family":"Evans","given":"Denis J."},{"family":"Searles","given":"Debra J."}],"issued":{"date-parts":[["2002"]]},"accessed":{"date-parts":[["2008",3,28]]}}},{"key":"http://zotero.org/users/39885/items/ACS9HD7H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ACS9HD7H","type":"book","title":"The Nicomachean Ethics of Aristotle...","publisher":"London: George Bell and Sons","source":"Amazon.com","call-number":"0002","author":[{"family":"Browne","given":"R. W. (translator) Aristotle /"}],"issued":{"date-parts":[["1880"]]}}},{"key":"http://zotero.org/users/39885/items/ADFADCVW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ADFADCVW","type":"article-journal","title":"A hierarchical network-based algorithm for multi-scale watershed delineation","container-title":"Computers & Geosciences","page":"156-166","volume":"72","source":"ScienceDirect","abstract":"Watershed delineation is a process for defining a land area that contributes surface water flow to a single outlet point. It is a commonly used in water resources analysis to define the domain in which hydrologic process calculations are applied. There has been a growing effort over the past decade to improve surface elevation measurements in the U.S., which has had a significant impact on the accuracy of hydrologic calculations. Traditional watershed processing on these elevation rasters, however, becomes more burdensome as data resolution increases. As a result, processing of these datasets can be troublesome on standard desktop computers. This challenge has resulted in numerous works that aim to provide high performance computing solutions to large data, high resolution data, or both. This work proposes an efficient watershed delineation algorithm for use in desktop computing environments that leverages existing data, U.S. Geological Survey (USGS) National Hydrography Dataset Plus (NHD+), and open source software tools to construct watershed boundaries. This approach makes use of U.S. national-level hydrography data that has been precomputed using raster processing algorithms coupled with quality control routines. Our approach uses carefully arranged data and mathematical graph theory to traverse river networks and identify catchment boundaries. We demonstrate this new watershed delineation technique, compare its accuracy with traditional algorithms that derive watershed solely from digital elevation models, and then extend our approach to address subwatershed delineation. Our findings suggest that the open-source hierarchical network-based delineation procedure presented in the work is a promising approach to watershed delineation that can be used summarize publicly available datasets for hydrologic model input pre-processing. Through our analysis, we explore the benefits of reusing the NHD+ datasets for watershed delineation, and find that the our technique offers greater flexibility and extendability than traditional raster algorithms.","URL":"http://www.sciencedirect.com/science/article/pii/S0098300414001800","DOI":"10.1016/j.cageo.2014.07.014","ISSN":"0098-3004","journalAbbreviation":"Computers & Geosciences","author":[{"family":"Castronova","given":"Anthony M."},{"family":"Goodall","given":"Jonathan L."}],"issued":{"date-parts":[["2014",11]]},"accessed":{"date-parts":[["2015",2,11]]}}},{"key":"http://zotero.org/users/39885/items/ADKP2C3C","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ADKP2C3C","type":"article-journal","title":"Software engineering economics","container-title":"Software Engineering, IEEE Transactions on","page":"4–21","issue":"1","source":"Google Scholar","author":[{"family":"Boehm","given":"B. W"}],"issued":{"date-parts":[["1984"]]}}},{"key":"http://zotero.org/users/39885/items/AEBFBRUR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AEBFBRUR","type":"report","title":"Electric analog of three-dimensional flow to wells and its application to unconfined aquifers","collection-title":"Water Supply Paper","publisher":"U.S. G.P.O.,","genre":"USGS Numbered Series","source":"pubs.er.usgs.gov","abstract":"Electric-analog design criteria are established from the differential equations of ground-water flow for analyzing pumping-test data. A convenient analog design was obtained by transforming the cylindrical equation of flow to a rectilinear form. The design criteria were applied in the construction of an electric analog, which was used for studying pumping-test data collected near Grand Island, Nebr. \n\nData analysis indicated (1) vertical flow components near pumping wells in unconfined aquifers may be much more significant in the control of water-table decline than radial flow components for as much as a day of pumping; (2) the specific yield during the first few minutes of pumping appears to be a very small fraction of that observed after pumping for more than 1 day; and (3) estimates of specific yield made from model studies seem much more sensitive to variations in assumed flow conditions than are estimates of permeability. Analysis of pumping-test data where vertical flow components are important requires that the degree of anisotropy be known. A procedure for computing anisotropy directly from drawdowns observed at five points was developed. Results obtained in the analog study emphasize the futility of calculating unconfined aquifer properties from pumping tests of short duration by means of equations based on the assumptions that vertical flow components are negligible and specific yield is constant.","URL":"http://pubs.er.usgs.gov/publication/wsp1536H","number":"1536-H","author":[{"family":"Stallman","given":"Robert W."}],"issued":{"date-parts":[["1963"]]},"accessed":{"date-parts":[["2015",2,6]]}}},{"key":"http://zotero.org/users/39885/items/AFHKTEZI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AFHKTEZI","type":"report","title":"Advanced Energetics for Aeronautical Applications. Volume II","source":"NASA NTRS","abstract":"NASA has identified water vapor emission into the upper atmosphere from commercial transport aircraft, particularly as it relates to the formation of persistent contrails, as a potential environmental problem. Since 1999, MSE has been working with NASA-LaRC to investigate the concept of a transport-size emissionless aircraft fueled with liquid hydrogen combined with other possible breakthrough technologies. The goal of the project is to significantly advance air transportation in the next decade and beyond. The power and propulsion  system currently being studied would be based on hydrogen fuel cells  powering electric motors, which drive fans for propulsion. The liquid water reaction product is retained onboard the aircraft until a flight mission is completed. As of now, NASA-LaRC and MSE have identified P/P system components that, according to the high-level analysis conducted to date, are light enough to make the emissionless aircraft concept feasible. Calculated maximum aircraft ranges  and other performance predictions are included in this report. This report also includes current information on advanced energy-related technologies, which are still being researched, as well as breakthrough physics concepts that may be applicable for advanced energetics and aerospace propulsion in the future.","URL":"http://ntrs.nasa.gov/search.jsp?R=20050170447","author":[{"family":"Alexander","given":"David S."}],"issued":{"date-parts":[["2005",4,1]]},"accessed":{"date-parts":[["2016",1,9]]}}},{"key":"http://zotero.org/users/39885/items/AHBDE57J","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AHBDE57J","type":"article-journal","title":"Materials flow analysis and emergy evaluation of Taipei's urban construction","container-title":"Landscape and Urban Planning","page":"61–74","volume":"63","issue":"2","source":"Google Scholar","author":[{"family":"Huang","given":"S.L."},{"family":"Hsu","given":"W.L."}],"issued":{"date-parts":[["2003"]]}}},{"key":"http://zotero.org/users/39885/items/AHECWGNK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AHECWGNK","type":"book","title":"Wall Street and the Rise of Hitler","publisher":"CLAIRVIEW BOOKS","number-of-pages":"225","source":"Google Books","abstract":"Penetrating a cloak of falsehood, deception and duplicity, Professor Antony C. Sutton reveals one of the most remarkable but unreported facts of the Second World War: that key Wall Street banks and American businesses supported Hitler's rise to power by financing and trading with Nazi Germany. Carefully tracing this closely guarded secret through original documents and eyewitness accounts, Sutton comes to the unsavoury conclusion that the catastrophic Second World War was extremely profitable for a select group of financial insiders. He presents a thoroughly documented account of the role played by J.P. Morgan, T.W. Lamont, the Rockefeller interests, General Electric Company, Standard Oil, National City Bank, Chase and Manhattan banks, Kuhn, Loeb and Company, General Motors, the Ford Motor Company, and scores of others in helping to prepare the bloodiest, most destructive war in history.This classic study, first published in 1976, the third volume of a trilogy û is reproduced here in its original form. (The other volumes in the series study the 1917 Lenin-Trotsky Revolution in Russia and the 1933 election of Franklin D. Roosevelt in the United States.)","ISBN":"978-1-905570-27-0","language":"en","author":[{"family":"Sutton","given":"Antony C."}],"issued":{"date-parts":[["2010",11,1]]}}},{"key":"http://zotero.org/users/39885/items/AHQ9I9TS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AHQ9I9TS","type":"article-journal","title":"A JavaScript API for accessing Semantic Web","source":"Google Scholar","URL":"https://www.duo.uio.no/handle/10852/34167","author":[{"family":"Hassel","given":"Arne"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",11,28]]}}},{"key":"http://zotero.org/users/39885/items/AKEJZFE9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AKEJZFE9","type":"article-journal","title":"A Systematic Study of Gas and Water Coning By Potentiometric Models","container-title":"Journal of Petroleum Technology","page":"923-929","volume":"16","issue":"08","source":"CrossRef","URL":"http://www.onepetro.org/doi/10.2118/871-PA","DOI":"10.2118/871-PA","ISSN":"0149-2136","language":"en","author":[{"family":"Chierici","given":"Gian Luigi"},{"family":"Ciucci","given":"Giuseppe M."},{"family":"Pizzi","given":"Giuseppe"}],"issued":{"date-parts":[["1964",8,1]]},"accessed":{"date-parts":[["2015",2,17]]}}},{"key":"http://zotero.org/users/39885/items/AKN855BN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AKN855BN","type":"motion_picture","title":"Self Organisation Particles","URL":"https://www.youtube.com/watch?v=dgbooumJ4Tg","author":[{"family":"Hubler","given":"Alfred"}]}},{"key":"http://zotero.org/users/39885/items/AKRDU2K6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AKRDU2K6","type":"book","title":"Introduction to the analytic hierarchy process","collection-title":"SpringerBriefs in Operations Research","publisher":"Springer","publisher-place":"Cham","number-of-pages":"1 online resource (viii, 83 pages)","edition":"2015","source":"UQ Library Search, Summon 2.0","event-place":"Cham","abstract":"The Analytic Hierarchy Process (AHP) has been one of the foremost mathematical methods for decision making with multiple criteria and has been widely studied in the operations research literature as well as applied to solve countless real-world problems. This book is meant to introduce and strengthen the readers' knowledge of the AHP, no matter how familiar they may be with the topic. This book provides a concise, yet self-contained, introduction to the AHP that uses a novel and more pedagogical approach. It begins with an introduction to the principles of the AHP, covering the critical points of the method, as well as some of its applications. Next, the book explores further aspects of the method, including the derivation of the priority vector, the estimation of inconsistency, and the use of AHP for group decisions. Each of these is introduced by relaxing initial assumptions. Furthermore, this booklet covers extensions of AHP, which are typically neglected in elementary expositions of the methods. Such extensions concern different numerical representations of preferences and the interval and fuzzy representations of preferences to account for uncertainty. During the whole exposition, an eye is kept on the most recent developments of the method.","URL":"http://ezproxy.library.uq.edu.au/login?url=http://dx.doi.org/10.1007/978-3-319-12502-2","ISBN":"3-319-12502-8","call-number":"HD30.23","language":"English","author":[{"family":"Brunelli","given":"Matteo"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2016",2,16]]}}},{"key":"http://zotero.org/users/39885/items/AM6F5J3G","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AM6F5J3G","type":"article","title":"Real wealth: Howard T. Odum’s energy economics","publisher":"Energy Bulletin | Dec","abstract":"<p>In the 1970s, Howard T. Odum explained human economics using ecology and energy fundamentals. His work remains essential for ecologists, who imagine achieving “sustainability.” </p> <p>Odum’s energy economics begins with an understanding that energy provides the foundation for all life processes, but that all energy is not equal. As energy is transformed through an ecosystem, quantity decreases as concentration increases.</p>","URL":"http://www.resilience.org/stories/2011-12-18/real-wealth-howard-t-odum’s-energy-economics","shortTitle":"Real wealth","author":[{"family":"Weyler","given":"Rex"}],"issued":{"date-parts":[["2011"]]},"accessed":{"date-parts":[["2015",3,13]]}}},{"key":"http://zotero.org/users/39885/items/AMPGTNX5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AMPGTNX5","type":"article-journal","title":"Towards a Flexible Database Interrogation","container-title":"International Journal of Database Management Systems (IJDMS) Vol","volume":"4","source":"Google Scholar","URL":"http://www.airccse.org/journal/ijdms/papers/4312ijdms02.pdf","author":[{"family":"Fayech","given":"Ines"},{"family":"Ounalli","given":"Habib"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/ARAHUK9P","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ARAHUK9P","type":"article-journal","title":"Energy, Ecology, and Economics","container-title":"Ambio","page":"220-227","volume":"2","issue":"6","source":"JSTOR","abstract":"Macroscopic minimodels of the flows of energy in producing the structural basis of our world of man and nature help the simple mind of man see the reasons for the rapid changes coming as we shift from a growth economy to a declining economy and finally to a steady state pattern. Twenty points are made to explain the energy control of our economy and the relationship of environment. Inflation is driven by increasing energy expended in getting energy; Environmental protection is an ally rather than antagonist of energy conservation; marginal energy sources become less useful as main energy sources decline; There is little potential in solar technology as it competes poorly with solar work in natural environments, agriculture, forestry, and other ancient ways of utilization; Net reserves of energy are much smaller than gross energies, and the cresting of world urban technological growth may be much closer than predicted by most government advisors. There are great hazards for the country that attempts to continue a growth economy when the time has come for reconversion to the steady state. If inferences from natural ecosystems in steady state are correct, the steady state for man may be a golden era of stability and individual fulfillment.","URL":"http://www.jstor.org/stable/4312030","ISSN":"0044-7447","journalAbbreviation":"Ambio","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1973",1,1]]},"accessed":{"date-parts":[["2015",11,4]]}}},{"key":"http://zotero.org/users/39885/items/ARMJAZZ6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ARMJAZZ6","type":"article","title":"Multi-Criteria Analysis Shell For Spatial Decision Support","publisher":"Australian Bureau of Agricultural and Resource Economics and Sciences (ABARES)","shortTitle":"MCSA-S","author":[{"family":"ABARES","given":""}],"issued":{"date-parts":[["2014"]]}}},{"key":"http://zotero.org/users/39885/items/ARWMTPUF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ARWMTPUF","type":"thesis","title":"Emergy basis of forest systems","publisher":"University of Florida","publisher-place":"United States -- Florida","event-place":"United States -- Florida","abstract":"A major question in natural resource management is how to integrate economicuse activities with the supporting ecosystems to maximize performance of the ecologicaleconomic system. In this dissertation, the natural wealth of forested systems of three different sizes was evaluated with emergy: two watersheds of the Southern Appalachians, Macon County (N.C.), and North Carolina. Emergy is the total amount of energy of one form that was required directly and indirectly to make another form of energy. Values are reported as emdollars (Em$) which represent the economic activity resulting from resource use.                 Benefits provided by forested watersheds were quantified based on emergy required to develop and maintain each service or product. Total wealth contributed by the multiple-use Wine Spring Creek (WSC) watershed was 4300 Em$/ha/y, and was divided among scientific research (3450 Em$/ha/y), water yield (2060 Em$/ha/y), recreation (1880 Em$/ha), and timber (1440 Em$/ha/y).                 In the 1990's, timber accounted for 3% of world emergy use, 1% in the United States, 9% in North Carolina, 14% in Macon County, and 8% in the WSC watershed. Forest ecosystems captured 53% of environmental emergy in North Carolina, 81% in Macon County, and 100% in the WSC watershed. The importance of forest ecosystems to the U.S. economy were evaluated based on emergy flows of the U.S. forest products industry and international trade of forest products in North America. In 1993, the U.S. had an annual trade surplus in forest products worth 63 billion Em$.                 Simple models were developed to explore the temporal and spatial dynamics of emergy and transformity in forested watersheds. Transformity is the ratio of emergy to energy; it measures position in the energy hierarchy of energy forms. Temporally, transformity and emergy lagged energy levels in reaching steady-state. Spatially, emergy from mountain uplands converged to the stream network, making water and its carved basin locations of high empower density.                 A model, MULTIBEN, evaluated forest empower of multiple benefits given various combinations of economic investment in recreation and timbering. Maximum empower was found at an intermediate level of economic investment, suggesting that an optimum intensity of forest development exists.","URL":"http://search.proquest.com/docview/304499470?accountid=13552","note":"Ph.D.; University of Florida","author":[{"family":"Tilley","given":"David Rogers"}],"issued":{"date-parts":[["1999"]]}}},{"key":"http://zotero.org/users/39885/items/ASBNXQTM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ASBNXQTM","type":"article-journal","title":"ChemInform Abstract: Systems Chemistry","container-title":"ChemInform","volume":"39","issue":"16","abstract":"ChemInform is a weekly Abstracting Service, delivering concise information at a glance that was extracted from about 200 leading journals. To access a ChemInform Abstract of an article which was published elsewhere, please select a ldquoFull Textrdquo option. The original article is trackable via the ldquoReferencesrdquo option.","URL":"http://dx.doi.org/10.1002/chin.200816272","DOI":"10.1002/chin.200816272","call-number":"0000","shortTitle":"ChemInform Abstract","author":[{"family":"Ludlow","given":"R. Frederick"},{"family":"Otto","given":"Sijbren"}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2008",8,20]]}}},{"key":"http://zotero.org/users/39885/items/ATE5M9GB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ATE5M9GB","type":"article-journal","title":"Visual Models and Scientific Judgment","container-title":"Picturing knowledge: Historical and philosophical problems concerning the use of art in science","page":"269","source":"Google Scholar","URL":"https://books.google.com.au/books?hl=en&lr=&id=DzgBU0-Y7a0C&oi=fnd&pg=PA269&dq=Visual+Models+and+Scientific+Judgment&ots=sfFjXKOUlF&sig=X1vJYz9lVGypGJKbuUdF6QRgpK4","author":[{"family":"Giere","given":"Ronald N."}],"issued":{"date-parts":[["1996"]]},"accessed":{"date-parts":[["2016",3,13]]}}},{"key":"http://zotero.org/users/39885/items/AUGM8IRB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AUGM8IRB","type":"book","title":"More Heat than Light: Economics as Social Physics, Physics as Nature's Economics","publisher":"Cambridge University Press","publisher-place":"Cambridge; New York","number-of-pages":"464","edition":"Reprint edition","source":"Amazon.com","event-place":"Cambridge; New York","abstract":"This is a history of how physics has drawn some inspiration from economics and how economics has sought to emulate physics, especially with regard to the theory of value.  The author traces the development of the energy concept in Western physics and its subsequent effect on the invention and promulgation of neoclassical economics, the modern orthodox theory.","ISBN":"978-0-521-42689-3","shortTitle":"More Heat than Light","language":"English","author":[{"family":"Mirowski","given":"Philip"}],"issued":{"date-parts":[["1991",11,29]]}}},{"key":"http://zotero.org/users/39885/items/AUS6GEHR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AUS6GEHR","type":"article-journal","title":"Ontology and ethics at the intersection of phenomenology and environmental philosophy","container-title":"Inquiry","page":"380-412","volume":"47","issue":"4","source":"CrossRef","URL":"http://www.tandfonline.com/doi/abs/10.1080/00201740410004197","DOI":"10.1080/00201740410004197","ISSN":"0020-174X, 1502-3923","language":"en","author":[{"family":"Thomson","given":"Iain"}],"issued":{"date-parts":[["2004",8]]},"accessed":{"date-parts":[["2016",2,29]]}}},{"key":"http://zotero.org/users/39885/items/AW74EDSQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AW74EDSQ","type":"book","title":"An electrical network model of the rain forest ecological system: An electrical portrayal of energy and carbon circuits of principal compartments of any ecosystem","publisher":"Puerto Rico Nuclear Center, University of Puerto Rico","call-number":"0000","shortTitle":"An electrical network model of the rain forest ecological system","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1965"]]}}},{"key":"http://zotero.org/users/39885/items/AWQEHXXK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AWQEHXXK","type":"article-journal","title":"ETL Process Modeling Conceptual for Data Warehouses: A Systematic Mapping Study","container-title":"Latin America Transactions, IEEE (Revista IEEE America Latina)","page":"358-363","volume":"9","issue":"3","source":"IEEE Xplore","abstract":"BACKGROUND: A data warehouse (DW) is an integrated collection of subject-oriented data in the support of decision making. Importantly, the integration of data sources is achieved through the use of ETL (Extract, Transform, and Load) processes. It is therefore extensively recognized that the appropriate design of the ETL processes are key factors in the success of DW projects. OBJECTIVE: We assess existing research proposals about ETL process modeling for data warehouse in order to identify their main characteristics, notation, and activities. We also study if these modeling approaches are supported by some kind of prototype or tool. METHOD: We have undertaken a systematic mapping study of the research literature about modeling ETL processes. A mapping study provides a systematic and objective procedure for identifying the nature and extent of the available research by means of research questions. RESULTS: The study is based on a comprehensive set of papers obtained after using a multi-stage selection criteria and are published in international workshops, conferences and journals between 2000 and 2009. CONCLUSIONS: This systematic mapping study states that there is a clear classification of ETL process modeling approaches, but that they are not enough covered by researchers. Therefore, more effort is required to bridge the research gap in modeling ETL processes.","DOI":"10.1109/TLA.2011.5893784","ISSN":"1548-0992","shortTitle":"ETL Process Modeling Conceptual for Data Warehouses","author":[{"family":"Mufioz","given":"L."},{"family":"Mazon","given":"J.N."},{"family":"Trujillo","given":"J."}],"issued":{"date-parts":[["2011",6]]}}},{"key":"http://zotero.org/users/39885/items/AZ9NMIAC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AZ9NMIAC","type":"article-journal","title":"Elevated Total Bilirubin as a Predictor of All-Cause Mortality in Left Ventricular Systolic Dysfunction","container-title":"Journal of Cardiac Failure","page":"S68","volume":"14","issue":"6, Supplement 1","URL":"http://www.sciencedirect.com/science/article/B6WHG-4T3F99V-7T/1/e6c368f90dcff656d5577df4b0b3f389","DOI":"10.1016/j.cardfail.2008.06.182","call-number":"0000","author":[{"family":"Labos","given":"Christopher"},{"family":"Huynh","given":"Thao"},{"family":"Giannetti","given":"Nadia"},{"family":"Nguyen","given":"Viviane"}],"issued":{"date-parts":[["2008",8]]},"accessed":{"date-parts":[["2008",7,30]]}}},{"key":"http://zotero.org/users/39885/items/AZUT224V","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/AZUT224V","type":"book","title":"Emergy evaluation of forest production and industries in Sweden","publisher":"SLU, Inst. för bioenergi","source":"Google Scholar","author":[{"family":"Doherty","given":"Steven J."},{"family":"Nilsson","given":"Per Olov"},{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["2002"]]}}},{"key":"http://zotero.org/users/39885/items/B356MW85","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/B356MW85","type":"webpage","title":"Managing groundwater","genre":"text","abstract":"information on the range of actions through which groundwater is managed in Victoria, such as licences; permissible consumptive volumes; management plans and rules; monitoring and metering.","URL":"http://www.depi.vic.gov.au/water/groundwater/managing-groundwater","language":"en-AU","author":[{"family":"Department of Environment and Primary Industries","given":"Victoria"}],"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/B3EV54GV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/B3EV54GV","type":"article-journal","title":"A philosophical discussion of the root definition in soft systems thinking: an enrichment of CATWOE","container-title":"Systems Research and Behavioral Science","page":"61-87","volume":"23","issue":"1","source":"Wiley Online Library","abstract":"After a brief review of some problems in CATWOE analysis in Checkland's soft systems methodology, we suggest that they may be ameliorated by employing Dooyeweerd's multi-aspectual philosophy. A systematic approach is taken to reconceptualize each element of CATWOE within a Dooyeweerdian framework, the relevant portions of which are explained. In the process our understanding of CATWOE is enriched and made easier for the SSM apprentice to grasp. Copyright © 2006 John Wiley & Sons, Ltd.","URL":"http://onlinelibrary.wiley.com.ezproxy.lib.rmit.edu.au/doi/10.1002/sres.689/abstract","DOI":"10.1002/sres.689","ISSN":"1099-1743","shortTitle":"A philosophical discussion of the root definition in soft systems thinking","language":"en","author":[{"family":"Basden","given":"Andrew"},{"family":"Wood‐Harper","given":"A. Trevor"}],"issued":{"date-parts":[["2006",1,1]]},"accessed":{"date-parts":[["2011",9,16]]}}},{"key":"http://zotero.org/users/39885/items/B3NX7BDF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/B3NX7BDF","type":"article-journal","title":"The W-MODEL–Strengthening the Bond Between Development and Test","container-title":"University of Applied Sciences, Germany","page":"6","volume":"4","issue":"5","source":"Google Scholar","author":[{"family":"Spillner","given":"A."}],"issued":{"date-parts":[["2001"]]}}},{"key":"http://zotero.org/users/39885/items/B3V7MTEW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/B3V7MTEW","type":"speech","title":"Enabling Better Decisions through Quality-Aware Reports in Business Intelligence Applications","event":"The 13th International Conference on Information Quality Program","author":[{"family":"Florian","given":"Daniel"},{"family":"Fabio","given":"C"},{"family":"Themis","given":"P"},{"family":"Oleksiy","given":"C"},{"family":"Cinzia","given":"C"}],"issued":{"date-parts":[["2008"]]}}},{"key":"http://zotero.org/users/39885/items/B5DJ3VGN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/B5DJ3VGN","type":"webpage","title":"Australian Groundwater Explorer: Groundwater information: Water Information: Bureau of Meteorology","URL":"http://www.bom.gov.au/water/groundwater/explorer/","shortTitle":"Australian Groundwater Explorer","language":"en","author":[{"literal":"BoM"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,13]]}}},{"key":"http://zotero.org/users/39885/items/B5HDIGG9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/B5HDIGG9","type":"article-journal","title":"The problem of co-production in environmental accounting by emergy analysis","container-title":"Ecological Modelling","page":"187–193","volume":"129","call-number":"0032","author":[{"family":"Bastianoni","given":"S."}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/B5SFGIS6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/B5SFGIS6","type":"book","title":"Risk and Uncertainty in Dam Safety","publisher":"Thomas Telford Ltd","source":"CrossRef","URL":"http://www.icevirtuallibrary.com/content/book/100871","ISBN":"978-0-7277-3270-5","language":"en","author":[{"literal":"Gregory B Baecher"},{"literal":"Desmond N D Hartford"}],"issued":{"date-parts":[["2004",8,20]]},"accessed":{"date-parts":[["2015",3,20]]}}},{"key":"http://zotero.org/users/39885/items/B728SQ95","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/B728SQ95","type":"report","title":"AWRIS – Implementation and Investment Plan","collection-title":"A baseline assessment of water resources for the National Water Initiative Level 2 Assessment Australian Water Resources Information System: Implementation and Investment Plan","publisher":"National Water Commission","URL":"http://www.water.gov.au/publications/AWRIS_ImplementationPlan_Dec06.pdf","number":"FINAL REPORT","author":[{"family":"Commonwealth of Australia","given":""}],"issued":{"date-parts":[["2006"]]}}},{"key":"http://zotero.org/users/39885/items/B7U23QZ7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/B7U23QZ7","type":"book","title":"Biosphere 2: Research Past and Present","publisher":"Pergamon Press Inc","edition":"2","ISBN":"0-08-043208-5","call-number":"0000","shortTitle":"Biosphere 2","author":[{"family":"Marino","given":"B. D. V."},{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1999",6,1]]}}},{"key":"http://zotero.org/users/39885/items/B9MXDAVT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/B9MXDAVT","type":"article-journal","title":"Operational assimilation of ASCAT surface soil wetness at the Met Office","container-title":"Hydrol. Earth Syst. Sci.","page":"2729-2746","volume":"15","issue":"8","source":"Copernicus Online Journals","URL":"http://www.hydrol-earth-syst-sci.net/15/2729/2011/","DOI":"10.5194/hess-15-2729-2011","ISSN":"1607-7938","journalAbbreviation":"Hydrol. Earth Syst. Sci.","author":[{"family":"Dharssi","given":"I."},{"family":"Bovis","given":"K. J."},{"family":"Macpherson","given":"B."},{"family":"Jones","given":"C. P."}],"issued":{"date-parts":[["2011",8,31]]},"accessed":{"date-parts":[["2014",3,3]]}}},{"key":"http://zotero.org/users/39885/items/BBRTSFD4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BBRTSFD4","type":"article-journal","title":"A Systematic Framework for Risk Visualization in Risk Management and Communication","container-title":"Risk Management","page":"67-89","volume":"11","issue":"2","source":"JSTOR","abstract":"Managing and communicating risks have become crucial tasks in today's economy and society. Visualization - through its numerous cognitive and communicative advantages - can play an important role in assessing and conveying risks. This article, thus, examines how (interactive) graphic representations, such as maps, charts, diagrams and visual metaphors, can be applied to risk management by reviewing current approaches and by providing a conceptual framework that is illustrated with several application examples. The article also provides a concise set of guidelines that can be used when visualizing risk to avoid the dangers inherent in graphic representations (such as distortion or manipulation), and concludes with an outlook on future developments in this field. The article's main implication for practice is to understand visualization, not as a static rendering of risk assessments or aggregations but as an important catalyst, for better risk communication to multiple stakeholders along the entire risk management cycle.","URL":"http://www.jstor.org/stable/40468432","ISSN":"1460-3799","journalAbbreviation":"Risk Management","author":[{"family":"Eppler","given":"Martin J."},{"family":"Aeschimann","given":"Markus"}],"issued":{"date-parts":[["2009",4,1]]},"accessed":{"date-parts":[["2015",4,4]]}}},{"key":"http://zotero.org/users/39885/items/BBWQET3V","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BBWQET3V","type":"book","title":"Modeling for all scales: an introduction to system simulation","publisher":"Academic Press","publisher-place":"San Diego","number-of-pages":"458","source":"Library of Congress ISBN","event-place":"San Diego","ISBN":"0-12-524170-4","call-number":"QA76.9.C65 O38 2000","shortTitle":"Modeling for all scales","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/BC8WZ3ST","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BC8WZ3ST","type":"article-journal","title":"EMERGY-based environmental systems assessment of a multi-purpose temperate mixed-forest watershed of the southern Appalachian Mountains, USA","container-title":"Journal of Environmental Management","page":"213-227","volume":"69","issue":"3","abstract":"Emergy (with an ‘m’) synthesis was used to assess the balance between nature and humanity and the equity among forest outcomes of a US Forest Service ecosystem management demonstration project on the Wine Spring Creek watershed, a high-elevation (1600 m), temperate forest located in the southern Appalachian mountains of North Carolina, USA. EM embraces a holistic perspective, accounting for the multiple temporal and spatial scales of forest processes and public interactions, to balance the ecological, economic, and social demands placed on land resources. Emergy synthesis is a modeling tool that allows the structure and function of forest ecosystems to be quantified in common units (solar emergy-joules, sej) for easy and meaningful comparison, determining ‘system-value’ for forcing factors, components, and processes based on the amount of resources required to develop and sustain them, whether they are money, material, energy, or information. The Environmental Loading Ratio (ELR), the units of solar emergy imported into the watershed via human control per unit of indigenous, natural solar emergy, was determined to be 0.42, indicating that the load on the natural environment was not ecologically damaging and that excess ecological capacity existed for increasing non-ecological activities (e.g. timbering, recreation) to achieve an ELR of 1.0 (perfect ecological–economic balance). Three forest outcomes selected to represent the three categories of desired sustainability (ecological, economic, and social) were evaluated in terms of their solar emergy flow to measure outcome equity. Direct economic contribution was an order of magnitude less (224×1012 solar emergy-joules (sej) ha−1) than the ecological and social contributions, which were provided at annual rates of 3083 and 2102×1012 sej ha−1, respectively. Emergy synthesis was demonstrated to holistically integrate and quantify the interconnections of a coupled nature-human system allowing the goals of ecological balance and outcome equity to be measured quantitatively.","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6WJ7-49RCDV4-2&_user=10&_rdoc=1&_fmt=&_orig=search&_sort=d&view=c&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=c3c802be42d298539246cc3c0bf0e7a9","DOI":"10.1016/j.jenvman.2003.08.002","call-number":"0020","author":[{"family":"Tilley","given":"David Rogers"},{"family":"Swank","given":"Wayne T."}],"issued":{"date-parts":[["2003",11]]},"accessed":{"date-parts":[["2008",3,20]]}}},{"key":"http://zotero.org/users/39885/items/BCRU8DRA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BCRU8DRA","type":"article-journal","title":"Metabolic response to exogenous ethanol in yeast: an in vivo NMR and mathematical modelling approach","container-title":"Biophysical chemistry","page":"135–142","volume":"120","issue":"2","source":"Google Scholar","URL":"http://www.sciencedirect.com/science/article/pii/S0301462205002917","shortTitle":"Metabolic response to exogenous ethanol in yeast","author":[{"family":"Martini","given":"Silvia"},{"family":"Ricci","given":"Maso"},{"family":"Bartolini","given":"Fiora"},{"family":"Bonechi","given":"Claudia"},{"family":"Braconi","given":"Daniela"},{"family":"Millucci","given":"Lia"},{"family":"Santucci","given":"Annalisa"},{"family":"Rossi","given":"Claudio"}],"issued":{"date-parts":[["2006"]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/BCWKNQE7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BCWKNQE7","type":"article-journal","title":"Emergy as a function of exergy","container-title":"Energy","page":"1158-1162","volume":"32","issue":"7","abstract":"This paper aims to clarify some aspects of the discussion between “emergists” and “exergists”. First, we address the problem of the differences between energy-based emergy and exergy-based emergy: we show that the two are proportional, having the exergetic equivalent of solar energy as scale factor. In the second part, we show that emergy and transformity can be written as a function of exergy alone, in particular of “partial” efficiencies of the processes involved in a production system, from solar energy to the final product.","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6V2S-4M33VW2-5&_user=10&_coverDate=07%2F31%2F2007&_alid=709724262&_rdoc=1&_fmt=summary&_orig=search&_cdi=5710&_sort=d&_docanchor=&view=c&_ct=6&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=50dacbfd713b9607ee547bddf1564d0b","DOI":"10.1016/j.energy.2006.08.009","call-number":"0009","author":[{"family":"Bastianoni","given":"S."},{"family":"Facchini","given":"A."},{"family":"Susani","given":"L."},{"family":"Tiezzi","given":"E."}],"issued":{"date-parts":[["2007",7]]},"accessed":{"date-parts":[["2008",3,20]]}}},{"key":"http://zotero.org/users/39885/items/BDBGFGDI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BDBGFGDI","type":"article-journal","title":"Leibniz' Binary System and Shao Yong's \"Yijing\"","container-title":"Philosophy East and West","page":"59-90","volume":"46","issue":"1","source":"JSTOR","abstract":"The Yijing/Binary System Episode involved Leibniz' discovery of a de facto representation of the binary number system in the sixty-four-hexagram Fu Xi \"Yijing.\" Scholars have left the match unexplained, since they have found no evidence of a forgotten binary number system in ancient China. The interesting similarities and differences are discussed between the thought of Leibniz and that of Shao Yong, both of whom, it is argued, understood and recognized the importance of the double geometric progression in the diagram.","URL":"http://www.jstor.org/stable/1399337","DOI":"10.2307/1399337","ISSN":"0031-8221","journalAbbreviation":"Philosophy East and West","author":[{"family":"Ryan","given":"James A."}],"issued":{"date-parts":[["1996"]]},"accessed":{"date-parts":[["2016",3,5]]}}},{"key":"http://zotero.org/users/39885/items/BE9AQUEU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BE9AQUEU","type":"article-journal","title":"Untested waters: the rise of hydraulic fracturing in oil and gas production and the need to revisit regulation","container-title":"Fordham Environmental Law Review","page":"115","volume":"20","source":"Google Scholar","URL":"http://papers.ssrn.com/sol3/Papers.cfm?abstract_id=1595092","shortTitle":"Untested waters","author":[{"family":"Wiseman","given":"Hannah Jacobs"}],"issued":{"date-parts":[["2009"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/BEWMB6BX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BEWMB6BX","type":"article-journal","title":"Sentiment analysis and time series with twitter","container-title":"Twitter and Society. Peter Lang Publishing","page":"83–96","source":"Google Scholar","URL":"http://eprints.qut.edu.au/66321/1/Twitter_and_Society_(2014).pdf#page=122","author":[{"family":"Thelwall","given":"Mike"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/BFC7SP6E","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BFC7SP6E","type":"article-journal","title":"Modelling EROEI and net energy in the exploitation of non renewable resources","container-title":"Ecological Modelling","collection-title":"Can We Break the Addiction to Fossil Energy? Special Issue, 7th Biennial International Workshop “Advances in Energy Studies”, Barcelona, Spain, 19-21 October 2010","page":"54-58","volume":"223","issue":"1","source":"ScienceDirect","abstract":"Recently, Bardi and Lavacchi (2009) showed that a simple system of coupled differential equations can be used for a quantitative description of the exploitation of non renewable resources in a free market economy. The present paper examines how the model describes the behavior of the system in terms of energy return for energy invested (EROEI) and net energy (energy returned minus energy expended). We show that the model generates a behavior of these factors comparable to the results obtained by other methods, for instance for the case of crude oil production in the US.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380011003012","DOI":"10.1016/j.ecolmodel.2011.05.021","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Bardi","given":"Ugo"},{"family":"Lavacchi","given":"Alessandro"},{"family":"Yaxley","given":"Leigh"}],"issued":{"date-parts":[["2011",12,24]]},"accessed":{"date-parts":[["2015",2,9]]}}},{"key":"http://zotero.org/users/39885/items/BFK68HGD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BFK68HGD","type":"book","title":"Start late, finish rich : a no-fail plan for achieving financial freedom at any age","publisher":"Penguin","publisher-place":"London","event-place":"London","ISBN":"978-0-14-102877-4","author":[{"family":"Bach","given":"David"}],"issued":{"date-parts":[["2006"]]}}},{"key":"http://zotero.org/users/39885/items/BFRXAFMN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BFRXAFMN","type":"article-journal","title":"Measuring the extent of a Social License to Operate: The influence of marine biodiversity offsets in the oil and gas sector in Western Australia","container-title":"Resources Policy","page":"121–129","volume":"43","source":"Google Scholar","URL":"http://www.sciencedirect.com/science/article/pii/S030142071400097X","shortTitle":"Measuring the extent of a Social License to Operate","author":[{"family":"Richert","given":"Claire"},{"family":"Rogers","given":"Abbie"},{"family":"Burton","given":"Michael"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/BFVHB3D4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BFVHB3D4","type":"article","title":"Continuity of Characters","publisher":"Unpublished","author":[{"family":"Maud","given":"Sholto"}],"issued":{"date-parts":[["2007",5,21]]}}},{"key":"http://zotero.org/users/39885/items/BHFCTEHI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BHFCTEHI","type":"article-journal","title":"Helmut Hoelzer's Fully Electronic Analog Computer","container-title":"Annals of the History of Computing","page":"227-240","volume":"7","issue":"3","source":"IEEE Xplore","abstract":"A fully electronic general-purpose analog computer was designed by Helmut Hoelzer, a German electrical engineer and remote-controlled guidance specialist. He and an assistant built the device in 1941 in Peenemunde, Germany, where they were working as part of Wernher von Braun's long-range rocket development team. The computer was based on an electronic integrator and differentiator conceived by Hoelzer in 1935 and first applied to the guidance system of the A-4 rocket. This computer is significant in the history not only of analog computation but also of the formulation of simulation techniques. It contributed to a system for rocket development that resulted in vehicles capable of reaching the moon.","DOI":"10.1109/MAHC.1985.10025","ISSN":"0164-1239","author":[{"family":"Tomayko","given":"James E."}],"issued":{"date-parts":[["1985",7]]}}},{"key":"http://zotero.org/users/39885/items/BHRBKW22","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BHRBKW22","type":"chapter","title":"Emilie du Châtelet Between Leibniz and Newton: The Transformation of Metaphysics","container-title":"Emilie du Châtelet between Leibniz and Newton","collection-title":"International Archives of the History of Ideas / Archives internationales d'histoire des idées","collection-number":"205","publisher":"Springer Netherlands","page":"1-59","source":"link.springer.com.ezproxy.library.uq.edu.au","abstract":"The most famous remark of Emilie du Chatelet that physics cannot happen without metaphysics is the marker for this essay on the transformation of metaphysics in the eighteenth century. Starting with introductory remarks on the effects that Emilie du Chatelet made in her lifetime, her central position in the French Enlightment with Voltaire, La Mettrie and Maupertuis, as well as the international respect and the especially intensive reception in Germany will be introduced to the debate, which will also document the state of research as well as selected debates of the Enlightment period concerning Newton and Leibniz. The main thesis is built on Du Chatelet’s intellectual independent thought, her early and critical Lockeianism, which consequently shows that the Marquise’s scientific universalism was already outlined before she became acquainted with Leibnizian ideas. The analysis of Du Chatelet’s correspondence to Pierre Louis Moreau de Maupertuis sheds new light on this relationship. Samuel König, who had accused her of having copied from Leibniz or himself, also had a trial of plagiarism against Maupertuis. While Maupertuis ignored her discussion on solid bodies and the problems of conservation in the letters, he took up her ideas in his thoughts concerning his Principle of Least Action. Du Chatelet’s approach to metaphysics even shows interesting relations to La Mettrie. The relationship between La Mettrie, Maupertuis und Du Châtelet is given considerable weight, covering thinking matter, materialism and “dangerous metaphysics”.","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/chapter/10.1007/978-94-007-2093-0_1","ISBN":"978-94-007-2074-9","note":"DOI: 10.1007/978-94-007-2093-0_1","shortTitle":"Emilie du Châtelet Between Leibniz and Newton","language":"en","author":[{"family":"Hagengruber","given":"Ruth"}],"editor":[{"family":"Hagengruber","given":"Ruth"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2016",1,15]]}}},{"key":"http://zotero.org/users/39885/items/BJKN3M5T","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BJKN3M5T","type":"book","title":"Human physiology","publisher":"Saunders College Pub.","publisher-place":"Fort Worth","edition":"2nd ed.","event-place":"Fort Worth","ISBN":"978-0-03-072616-3","author":[{"family":"Rhoades","given":"Rodney"}],"issued":{"date-parts":[["1992"]]}}},{"key":"http://zotero.org/users/39885/items/BJZ6QK4H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BJZ6QK4H","type":"article-journal","title":"Ecological Economic Evaluation Based on Emergy as Embodied Cosmic Exergy: A Historical Study for the Beijing Urban Ecosystem 1978–2004","container-title":"Entropy","page":"1696-1720","volume":"12","source":"CrossRef","URL":"http://www.mdpi.com/search/?q=Ecological+Economic+Evaluation+Based+on+Emergy+as+Embodied+Cosmic+Exergy&s_journal=entropy&s_volume=&s_authors=&s_section=0&s_issue=&s_article_type=0&s_special_issue=0&s_page=&s_search=Search","DOI":"10.3390/e12071696","ISSN":"1099-4300","shortTitle":"Ecological Economic Evaluation Based on Emergy as Embodied Cosmic Exergy","author":[{"family":"Ming","given":"Jiang Mei"},{"family":"Zhan-Ming","given":"Chen"},{"family":"Bo","given":"Zhang"},{"family":"Cheng","given":"Li Shuang"},{"family":"Hua","given":"Xia Xiao"},{"family":"Yi","given":"Zhou Shi"},{"family":"Bo","given":"Zhou Jiang"}],"issued":{"date-parts":[["2010",6,29]]},"accessed":{"date-parts":[["2011",8,28]]}}},{"key":"http://zotero.org/users/39885/items/BMFXAT9A","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BMFXAT9A","type":"book","title":"System Engineering","publisher":"Prentice Hall PTR","ISBN":"0-13-095085-8","call-number":"1012","author":[{"family":"Stevens","given":"Dennis G."}],"issued":{"date-parts":[["1998",6,12]]}}},{"key":"http://zotero.org/users/39885/items/BMMPMRVI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BMMPMRVI","type":"book","title":"Guidebook on mapping groundwater vulnerability","publisher":"Heise","source":"Google Scholar","URL":"http://agris.fao.org/agris-search/search.do?recordID=US201300287789","author":[{"family":"Vrba","given":"Jaroslav"},{"family":"Zaporozec","given":"Alexander"}],"issued":{"date-parts":[["1994"]]},"accessed":{"date-parts":[["2015",8,26]]}}},{"key":"http://zotero.org/users/39885/items/BQB8I22A","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BQB8I22A","type":"book","title":"History Of Electricity","publisher":"Hawthorne Books","source":"Amazon.com","call-number":"0049","author":[{"family":"Canby","given":"Edward Tatnall"}],"issued":{"date-parts":[["1968"]]}}},{"key":"http://zotero.org/users/39885/items/BQFDTC6T","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BQFDTC6T","type":"book","title":"A Practical Guide to SysML: The Systems Modeling Language","publisher":"Morgan Kaufmann","number-of-pages":"578","source":"Google Books","abstract":"Systems engineers and architects must understand how all the parts of a system work together to satisfy its requirements. SysML is a general purpose graphical modeling language used to specify, analyze, and design systems that may include hardware, software, and personnel. It allows engineers to describe how a system interacts with its environment, and how its parts must interact to achieve the desired system behavior and performance. The SysML model provides a shared view of the system, enabling a design team to surface issues early and prevent problems that would otherwise delay development and degrade design quality. Since SysML is based on UML, it also facilitates integration between systems and software development. SysML is now being adopted by companies across a broad range of industry, including Aerospace and Defense, Automotive, and IT System Developers. This book provides a comprehensive and practical guide for modeling systems with SysML. It includes a full description of the language along with a quick reference guide, and shows how the language can be applied to specify, analyze, and design systems. It contains examples to help readers understand how SysML can be used in practice. The book also includes guidance on how an organization or project can transition to model based systems engineering using SysML, with considerations for processes, methods, tools, and training. *The authoritative guide for understanding and applying SysML *Authored by the foremost experts on the language *Language description, examples, and quick reference guide included","ISBN":"978-0-12-374379-4","shortTitle":"A Practical Guide to SysML","language":"en","author":[{"family":"Friedenthal","given":"Sanford"},{"family":"Moore","given":"Alan"},{"family":"Steiner","given":"Rick"}],"issued":{"date-parts":[["2008"]]}}},{"key":"http://zotero.org/users/39885/items/BSDBITIT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BSDBITIT","type":"article-journal","title":"Transformity dynamics related to maximum power for improved emergy yield estimations","container-title":"Ecological Modelling","source":"ScienceDirect","abstract":"H.T. Odum originally defined transformity as the amount of energy of one type required to generate a unit of energy of another type with the caveat that the energy production system was operating under competition at optimum loading for maximum power. The caveat has been mostly ignored in emergy evaluations, often because it is difficult to identify when or whether a transformity was produced at maximum empower. We developed the model TechnoPulse to explore the temporally dynamic relationship between transformity and empower. As TechnoPulse cycled through four distinct phases of birth, growth, decline and recovery, maximum empower was accompanied by minimum transformity for the production flow. Conversely, the period of minimum empower corresponded to maximum transformity. After the “birth” of the new energy form, the period of growth saw empower increase as tranformity declined. Since transformity is the reciprocal of efficiency, maximizing empower also increased efficiency. We found that the non-pulsing situation had higher empower than pulsing, but that pulsing maximized power and minimized tranformity (maximized efficiency). We found that the national production of electricity in the US followed the pattern observed from the growth portion of the TechnPulse simulation by maximizing empower and minimizing transformity over the period 1995–2006. A contrast of two methods for estimating the emergy yield of systems (emergy summation based on common practices and transformity multiplication based on using minimum transformity at maximum empower) applied to PV electricity production revealed starkly different interpretations for PV’s role and viability as a primary source of electricity, but more importantly suggested that there is a easy rationale for employing each method. Finally, emergy evaluations can be improved by heeding Odum’s original definition of tranformity and using the minimum tranformity corresponding to maximum empower.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380014005535","DOI":"10.1016/j.ecolmodel.2014.10.035","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Tilley","given":"David"}],"accessed":{"date-parts":[["2015",1,23]]}}},{"key":"http://zotero.org/users/39885/items/BT2B4ANU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BT2B4ANU","type":"book","title":"Beginning database design","publisher":"Apress ;;Distributed to the book trade worldwide by Springer-Verlag New York","publisher-place":"Berkeley  CA  ;New York","event-place":"Berkeley  CA  ;New York","ISBN":"978-1-59059-769-9","author":[{"family":"Churcher","given":"Clare"}],"issued":{"date-parts":[["2007"]]}}},{"key":"http://zotero.org/users/39885/items/BUAH4X7I","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BUAH4X7I","type":"article-journal","title":"An emergy evaluation of complexity, information and technology, towards maximum power and zero emissions","container-title":"Journal of Cleaner Production","page":"1359-1372","volume":"15","issue":"13-14","abstract":"This paper mostly deals with the role of energy, matter and information flows within both environmental and human-dominated systems. Sustainable growth and development of both kinds of systems require optimum use of available resources for maximum power output, as suggested by Lotka's Maximum Power Principle [Lotka AJ. Contribution to the energetics of evolution. In: Proceedings of the national academy of sciences of the United States of America, vol. 8. 1922, p. 147–50; Lotka AJ. Natural selection as a physical principle. In: Proceedings of the national academy of sciences of the United States of America, vol. 8. 1922, p. 151–5.], recently restated by Odum [Odum HT. Maximum power and efficiency: a rebuttal. Ecol Model 1983;20:71–82; Odum HT. Environmental accounting. Emergy and environmental decision making. N.Y.: John Wiley & Sons; 1996.] as Maximum Em-Power Principle within the framework of his Emergy Synthesis approach. In times of declining resources, this principle translates into increased efficiency and optimum use of any kind of waste and co-products. Ecosystems and any self-organizing systems always apply this strategy and their selection–evolution mechanisms are based on their ability of growing on any untapped resource available. In order to do so, they increase the number of components and patterns for resource degradation in order to optimize the resource throughput and power output. Such a strategy also applies to human-dominated, economic systems, where the ability of dealing with co-products and wastes by means of appropriate designs as well as reuse and recycling processes may lead to “zero-emission” patterns (increased complexity, optimal resource throughput, minimization of emissions, resource exchange among system's components) and be the key for successful and sustainable development. In this paper Life Cycle Assessment and Emergy Synthesis approaches are suggested as joint tools for qualitative and quantitative evaluation of progresses towards industrial symbiosis and more sustainable production and consumption patterns within a zero emission framework.","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6VFX-4KYXHPJ-2&_user=10&_rdoc=1&_fmt=&_orig=search&_sort=d&view=c&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=61f1ad2635d83734fa540f2bae414772","DOI":"10.1016/j.jclepro.2006.07.008","call-number":"0006","author":[{"family":"Ulgiati","given":"Sergio"},{"family":"Bargigli","given":"Silvia"},{"family":"Raugei","given":"Marco"}],"issued":{"date-parts":[["2007",9]]},"accessed":{"date-parts":[["2008",4,10]]}}},{"key":"http://zotero.org/users/39885/items/BZXXKU26","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/BZXXKU26","type":"book","title":"An Entangled Bank: The Origins of Ecosystem Ecology","publisher":"Rutgers University Press","ISBN":"0-8135-1824-5","call-number":"0159","shortTitle":"An Entangled Bank","author":[{"family":"Hagen","given":"Joel B."}],"issued":{"date-parts":[["1992",12]]}}},{"key":"http://zotero.org/users/39885/items/C27V663U","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C27V663U","type":"book","title":"Computer Simulation Techniques in Hydrology","publisher":"Elsevier Science Ltd","source":"Amazon.com","ISBN":"0-444-00157-3","author":[{"family":"Fleming","given":"George"}],"issued":{"date-parts":[["1975",11]]}}},{"key":"http://zotero.org/users/39885/items/C324NWP2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C324NWP2","type":"book","title":"Software Engineering And Quality Assurance","publisher":"Technical Publications","number-of-pages":"302","source":"Google Books","ISBN":"978-81-8431-779-4","language":"en","author":[{"family":"Puntambekar","given":""}],"issued":{"date-parts":[["2010",1,1]]}}},{"key":"http://zotero.org/users/39885/items/C39RSJAH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C39RSJAH","type":"article-journal","title":"Sustainable water management by coupling human and engineered systems","source":"espace.library.uq.edu.au","URL":"https://espace.library.uq.edu.au/view/UQ:300488","language":"eng","author":[{"family":"Kunz","given":"Nadja"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",12,17]]}}},{"key":"http://zotero.org/users/39885/items/C4US58IW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C4US58IW","type":"webpage","title":"Underground water","abstract":"Extracting water from coal seams is essential for coal seam gas (CSG) production. The Queensland Government recognises that protecting groundwater resources and access to good quality groundwater is vital for agriculture in many areas.","URL":"https://www.ehp.qld.gov.au/management/non-mining/groundwater.html","language":"en-AU","author":[{"family":"EHP","given":"Department of Environment Heritate and Planning"}],"issued":{"date-parts":[["2010",5,13]]},"accessed":{"date-parts":[["2015",8,12]]}}},{"key":"http://zotero.org/users/39885/items/C5EMTTF5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C5EMTTF5","type":"paper-conference","title":"Differential Bases of Emergy Algebra","publisher":"The Center for Environmental Policy, Department of Environmental Engineering Sciences, University of Florida","publisher-place":"University of Florida","page":"45-62","volume":"3","event":"Emergy Synthesis 3: Theory and Applications of the Emergy Methodology","event-place":"University of Florida","call-number":"0013","author":[{"family":"Giannantoni","given":"Corrado"}],"issued":{"date-parts":[["2005"]]}}},{"key":"http://zotero.org/users/39885/items/C5PVZC54","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C5PVZC54","type":"book","title":"Representing and Intervening: Introductory Topics in the Philosophy of Natural Science","publisher":"Cambridge University Press","ISBN":"0-521-28246-2","call-number":"0029","shortTitle":"Representing and Intervening","author":[{"family":"Hacking","given":"Ian"}],"issued":{"date-parts":[["1983",11,25]]}}},{"key":"http://zotero.org/users/39885/items/C6HR457S","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C6HR457S","type":"chapter","title":"The Ecology of Dune","container-title":"Dune","publisher":"Chilton Publishing Company","call-number":"0051","author":[{"family":"Herbert","given":"Frank"}],"issued":{"date-parts":[["1965"]]}}},{"key":"http://zotero.org/users/39885/items/C6PERIIU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C6PERIIU","type":"article-journal","title":"Complexity in Chemistry","container-title":"Science","page":"89-92","volume":"284","issue":"5411","URL":"http://www.sciencemag.org/cgi/content/abstract/284/5411/89","DOI":"10.1126/science.284.5411.89","call-number":"0105","author":[{"family":"Whitesides","given":"George M."},{"family":"Ismagilov","given":"Rustem F."}],"issued":{"date-parts":[["1999",4,2]]},"accessed":{"date-parts":[["2008",8,20]]}}},{"key":"http://zotero.org/users/39885/items/C6WNBP37","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C6WNBP37","type":"article-journal","title":"Finance, risk and accounting perspectives","container-title":"Venture Capital","page":"185 - 188","volume":"16","issue":"3","source":"UQ Library Search, Summon 2.0","DOI":"10.1080/13691066.2014.921080","ISSN":"1369-1066","language":"English","author":[{"family":"Lehner","given":"Othmar M"}],"issued":{"date-parts":[["2014",7]]}}},{"key":"http://zotero.org/users/39885/items/C7XT936Q","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C7XT936Q","type":"book","title":"Dawn of Innovation : The First American Industrial Revolution","publisher":"PublicAffairs","publisher-place":"New York","event-place":"New York","ISBN":"978-1-61039-049-1","shortTitle":"Dawn of Innovation","author":[{"family":"Morris","given":"Charles R."}],"issued":{"date-parts":[["2012"]]}}},{"key":"http://zotero.org/users/39885/items/C9T6MIGR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C9T6MIGR","type":"book","title":"The Dialogues of Plato","publisher":"Random House New York","volume":"1","edition":"The Random House Lifetime Library","source":"Amazon.com","call-number":"0004","author":[{"family":"jowett","given":""}],"issued":{"date-parts":[["1937"]]}}},{"key":"http://zotero.org/users/39885/items/C9VPTGX4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/C9VPTGX4","type":"legislation","title":"Water Act 2000","section":"418","URL":"http://www5.austlii.edu.au/cgi-bin/download.cgi/cgi-bin/download.cgi/download/au/legis/qld/consol_act/wa200083.pdf","author":[{"family":"QSG","given":"Queensland State Government"}],"issued":{"date-parts":[["2000"]]},"accessed":{"date-parts":[["2015",10,3]]}}},{"key":"http://zotero.org/users/39885/items/CA6GADD5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CA6GADD5","type":"article","title":"WaterML 2.0","publisher":"Open Geospatial Consortium","URL":"https://portal.opengeospatial.org/files/?artifact_id=48531","author":[{"family":"OGC","given":""}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",11,11]]}}},{"key":"http://zotero.org/users/39885/items/CA7HZK5P","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CA7HZK5P","type":"article-journal","title":"Experimental Demonstration of Violations of the Second Law of Thermodynamics for Small Systems and Short Time Scales","container-title":"Physical Review Letters","page":"50601","volume":"89","issue":"5","call-number":"0270","author":[{"family":"Wang","given":"G. M."},{"family":"Sevick","given":"E. M."},{"family":"Mittag","given":"E."},{"family":"Searles","given":"D. J."},{"family":"Evans","given":"D. J."}],"issued":{"date-parts":[["2002"]]}}},{"key":"http://zotero.org/users/39885/items/CAPNQ2JR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CAPNQ2JR","type":"speech","title":"Open System Engineering Environment","abstract":"If you are interested in collaborating on the current effort to apply the Open System Engineering Environment (OSEE) to the Aerospace and Automotive industries or in learning how OSEE might be applied to your industry, then this BOF is for you.\n\nIndustries that build complex, mission-critical systems typically work with many suppliers in order to create a single integrated product. These products often have long development lifecycles and have stringent requirements for verification, traceability, and document deliverables. In order to effectively manage this complexity, these industries are required to assemble a wide array of tools that provide only piecemeal capabilities. Often, the resulting toolset provides disconnected access to partially redundant data and may carry with it multi-million dollar software licensing, customization, and maintenance costs.\n\nOSEE is being developed to provide an integrated solution to these challenges. At the heart of OSEE is an Application Framework which provides a powerful persistence layer allowing applications to utilize a common data model that is accessible to all OSEE applications. Two such applications, that are widely applicable, have already been created: a powerful requirements and document management solution, OSEE Define, and a full featured change management system, OSEE ATS.\n\nThe OSEE Eclipse project provides tremendous opportunities to collaborate on industry wide solutions and build upon lessons already learned.","URL":"http://eclipsecon.org/2008/index.php?page=sub/&id=590","author":[{"family":"Brooks","given":"R"},{"family":"Dunne","given":"D"},{"family":"Finkbeiner","given":"A"},{"family":"Phillips","given":"J"}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2011",6,3]]}}},{"key":"http://zotero.org/users/39885/items/CARESXFP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CARESXFP","type":"article","title":"Independent Review of Coal Seam Gas (CSG) Activities in NSW - Final Report","publisher":"Chief Scientist NSW","URL":"http://www.chiefscientist.nsw.gov.au/__data/assets/pdf_file/0005/56912/140930-CSG-Final-Report.pdf","author":[{"family":"O'Kane","given":"Mary"}],"issued":{"date-parts":[["2014"]]}}},{"key":"http://zotero.org/users/39885/items/CBEHAGF9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CBEHAGF9","type":"book","title":"Emergy Synthesis 7: Theory and Applications of the Emergy Methodology","publisher":"Center for Environmental Policy, University of Florida","source":"Google Scholar","URL":"http://cep.ees.ufl.edu/emergy/conferences/ERC07_2012/proceedings.shtml","shortTitle":"Emergy Synthesis 7","author":[{"family":"Brown","given":"Mark Theodore"},{"family":"Sweeney","given":"S."},{"family":"Campbell","given":"D. E."},{"family":"Huang","given":"S."},{"family":"Kang","given":"D."},{"family":"Rydberg","given":"T."},{"family":"Tilley","given":"D."},{"family":"Ulgiati","given":"S."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",11,5]]}}},{"key":"http://zotero.org/users/39885/items/CBJ3WPRT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CBJ3WPRT","type":"book","title":"INTRODUCTION TO LOGICAL THEORY","publisher":"METHUEN","call-number":"0941","author":[{"family":"STRAWSON","given":""}],"issued":{"date-parts":[["1964"]]}}},{"key":"http://zotero.org/users/39885/items/CBRHRVHR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CBRHRVHR","type":"article-journal","title":"Sleep variety: physiology, psychology and epidemiology","container-title":"Journal of Sleep Research","page":"381-383","volume":"19","issue":"3","source":"CrossRef","URL":"http://onlinelibrary.wiley.com.ezproxy.lib.rmit.edu.au/doi/10.1111/j.1365-2869.2010.00879.x/full","DOI":"10.1111/j.1365-2869.2010.00879.x","ISSN":"09621105","shortTitle":"Sleep variety","author":[{"family":"Dijk","given":"Derk-Jan"}],"issued":{"date-parts":[["2010",3]]},"accessed":{"date-parts":[["2011",3,19]]}}},{"key":"http://zotero.org/users/39885/items/CC3VGZKD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CC3VGZKD","type":"article-journal","title":"The evolutionary origin of hedgehog proteins","container-title":"Current Biology","page":"R836-R837","volume":"17","issue":"19","source":"www.cell.com","abstract":"Animal development is orchestrated largely by diffusible ligands of the Wnt, TGF-β, hedgehog (Hh) and FGF signaling pathways, as well as cell-surface molecules, such as Notch, cadherins, integrins and the immunoglobulin-like proteins  [1,2] . Here, we show that Hh proteins are likely to have evolved very early in metazoan evolution by domain shuffling. We identify in sponges and cnidarians a transmembrane protein, Hedgling, that contains the amino-terminal, signalling domain of Hh (hedge-domain), as well as cadherin, EGF and immunoglobulin domains. While Hedgling appears to have been lost in bilaterians, the likely capture of a hedge-domain by the more ancient, intein derived hog-domain may have given rise to the Hh proteins.","URL":"http://www.cell.com/article/S0960982207017861/abstract","DOI":"10.1016/j.cub.2007.08.010","ISSN":"0960-9822","note":"PMID: 17925209","journalAbbreviation":"Current Biology","language":"English","author":[{"family":"Adamska","given":"Maja"},{"family":"Matus","given":"David Q."},{"family":"Adamski","given":"Marcin"},{"family":"Green","given":"Kathryn"},{"family":"Rokhsar","given":"Daniel S."},{"family":"Martindale","given":"Mark Q."},{"family":"Degnan","given":"Bernard M."}],"issued":{"date-parts":[["2007",10,9]]},"accessed":{"date-parts":[["2016",3,8]]},"PMID":"17925209"}},{"key":"http://zotero.org/users/39885/items/CC56X6RB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CC56X6RB","type":"article","title":"Risk Assessment and Management: Leading Practice Sustainable Development Program for the Mining Industry","publisher":"Australian Government Department of resource energy and tourism","URL":"http://www.industry.gov.au/resource/Documents/LPSDP/LPSDP-RiskHandbook.pdf","author":[{"family":"Australian Government","given":""}],"issued":{"date-parts":[["2008"]]}}},{"key":"http://zotero.org/users/39885/items/CCBPQMS6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CCBPQMS6","type":"book","title":"Public Health and Human Ecology","publisher":"McGraw-Hill Professional","edition":"2","ISBN":"0-8385-8080-7","call-number":"0147","author":[{"family":"Last","given":"John M."}],"issued":{"date-parts":[["1998",3,28]]}}},{"key":"http://zotero.org/users/39885/items/CCDZ72S5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CCDZ72S5","type":"book","title":"Environment, Power and Society","publisher":"John Wiley & Sons Inc","edition":"illustrated edition","source":"Amazon.com","ISBN":"0-471-65270-9","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1971",2,17]]}}},{"key":"http://zotero.org/users/39885/items/CCQ63T6X","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CCQ63T6X","type":"article-journal","title":"Coal seam gas–toward a risk management framework for a novel intervention","container-title":"Environmental and Planning Law Journal","page":"152","volume":"29","source":"Google Scholar","author":[{"family":"Randall","given":"Alan"}],"issued":{"date-parts":[["2012"]]}}},{"key":"http://zotero.org/users/39885/items/CE2ZJZ5B","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CE2ZJZ5B","type":"article-journal","title":"Towards a global governance of risks: international health organisations and the surveillance of emerging infectious diseases","container-title":"Journal of Risk Research","page":"469-483","volume":"17","issue":"4","source":"Taylor and Francis+NEJM","abstract":"The World Health Organisation (WHO) and the World Organisation for Animal Health (OIE) have introduced normative and cognitive changes in response to the challenge of emerging infectious diseases (EIDs). These changes take the form of a paradigm shift from ‘an international management of threats’ towards ‘a global governance of risks’. The distinction between these two paradigms is developed in this paper based on literature on public health policy and on risk sociology. Here, we suggest that risks differ from threats (or classical risks) by being uncertain, global and anticipated catastrophes. They require an alternative paradigm of risk governance based on precaution, transparency and participation. To demonstrate empirically this shift, the paper analysed the WHO and OIE’s response to recent EIDs, and in particular bird flu (H5N1). With H5N1, these organisations have shown an unprecedented ambition to handle a ‘pre-pandemic’ virus; they have called for increased transparency from Member States on their epidemiologic status, and for the inclusion of a wider range of stakeholders into the task of epidemiologic surveillance. This paper shows that the WHO and the OIE framed EIDs as modern risks and handled them using the ‘global risks governance’ paradigm. In doing so, they seized the opportunity, in a competitive way, to legitimise a wider scope of intervention for themselves by revising their regulatory tools (the International Health Regulation and the Terrestrial Animal Health Code) and by extending the obligations of the Member States via their system of notifiable events. This shift raises the issue of the instrumentalisation of the paradigm of global risk governance. It questions States’ sovereignty, and stakeholder’s participation and it highlights the political potential of modern risks, the link with the production of knowledge and the activity of surveillance in a world at risk.","URL":"http://dx.doi.org/10.1080/13669877.2012.761277","DOI":"10.1080/13669877.2012.761277","ISSN":"1366-9877","shortTitle":"Towards a global governance of risks","author":[{"family":"Figuié","given":"Muriel"}],"issued":{"date-parts":[["2014",4,21]]},"accessed":{"date-parts":[["2015",10,12]]}}},{"key":"http://zotero.org/users/39885/items/CEW7E3T2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CEW7E3T2","type":"article-journal","title":"The Oregon resource interaction model: an application of systems energetics principles to decision-making in Oregon state government--1974","container-title":"Ecological Modelling","page":"169-170","volume":"178","issue":"1-2","URL":"http://www.sciencedirect.com/science/article/B6VBS-4BJX1HY-G/1/09e5ebf07251c1f29bbc3b1686356c1e","DOI":"10.1016/j.ecolmodel.2003.12.029","call-number":"0000","shortTitle":"The Oregon resource interaction model","author":[{"family":"Peterson","given":"Larry L."}],"issued":{"date-parts":[["2004",10,15]]},"accessed":{"date-parts":[["2008",6,29]]}}},{"key":"http://zotero.org/users/39885/items/CHTAAZMZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CHTAAZMZ","type":"thesis","title":"The biogeochemistry of strontium: with discussion of the ecological integration of elements","call-number":"0010","shortTitle":"The biogeochemistry of strontium","author":[{"family":"Odum","given":"H.T."}],"issued":{"date-parts":[["1950"]]}}},{"key":"http://zotero.org/users/39885/items/CJC8XXJE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CJC8XXJE","type":"book","title":"Eclipse Web Tools Platform: Developing Java™ Web Applications","publisher":"Addison-Wesley","number-of-pages":"1007","source":"Google Books","abstract":"This is the eBook version of the printed book. Discover WTP, the New End-to-End Toolset for Java-Based Web Development The Eclipse Web Tools Platform (WTP) seamlessly integrates all the tools today’s Java Web developer needs. WTP is both an unprecedented Open Source resource for working developers and a powerful foundation for state-of-the-art commercial products. Eclipse Web Tools Platform offers in-depth descriptions of every tool included in WTP, introducing powerful capabilities never before available in Eclipse. The authors cover the entire Web development process–from defining Web application architectures and development processes through testing and beyond. And if you’re seeking to extend WTP, this book provides an introduction to the platform’s rich APIs. The book alsoPresents step-by-step coverage of developing persistence, business logic, and presentation tiers with WTP and JavaIntroduces best practices for multiple styles of Web and Java EE developmentDemonstrates JDBC database access and configurationShows how to configure application servers for use with WTPWalks through creating Web service application interfaces Covers automated testing with JUnit and Cactus, and automated builds utilizing Ant, Maven, and CruiseControlIntroduces testing and profiling Web applications with the Eclipse Test and Performance Tools Platform (TPTP) projectDescribes how to extend WTP with new servers, file types, and WSDL extensions Foreword  Preface  Acknowledgments  About the Authors  Part I: Getting Started  Chapter 1: Introduction  Chapter 2: About the Eclipse Web Tools Platform Project  Chapter 3: Quick Tour  Chapter 4: Setting Up Your Workspace  Part II: Java Web Application Development  Chapter 5: Web Application Architecture and Design  Chapter 6: Organizing Your Development Project  Chapter 7: The Presentation Tier  Chapter 8: The Business Logic Tier  Chapter 9: The Persistence Tier  Chapter 10: Web Services  Chapter 11: Testing  Part III: Extending WTP  Chapter 12: Adding New Servers  Chapter 13: Supporting New File Types  Chapter 14: Creating WSDL Extensions Chapter 15: Customizing Resource Resolution  Part IV: Products and Plans  Chapter 16: Other Web Tools Based on Eclipse  Chapter 17: The Road Ahead  Glossary   References  Index    This book is an invaluable resource for every Eclipse and enterprise Java Web developer: both those who use Eclipse to build other Web applications, and those who build Eclipse technologies into their own products. Complete source code examples are available at www.eclipsewtp.org.","ISBN":"978-0-13-270219-5","shortTitle":"Eclipse Web Tools Platform","language":"en","author":[{"family":"Dai","given":"Naci"},{"family":"Mandel","given":"Lawrence"},{"family":"Ryman","given":"Arthur"}],"issued":{"date-parts":[["2007",5,21]]}}},{"key":"http://zotero.org/users/39885/items/CJKANIEA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CJKANIEA","type":"article-journal","title":"Systems engineering-key to modern development","container-title":"IRE Transactions on Engineering Management","page":"64-66","volume":"EM-3","issue":"3","source":"IEEE Xplore","abstract":"Not Available","DOI":"10.1109/IRET-EM.1956.5007383","ISSN":"0096-2252","author":[{"family":"Schlager","given":"Kenneth J."}],"issued":{"date-parts":[["1956",7]]}}},{"key":"http://zotero.org/users/39885/items/CJSZCDNE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CJSZCDNE","type":"article-journal","title":"The Cybernetic Nature of Ecosystems","container-title":"The American Naturalist","page":"886-895","volume":"118","issue":"6","source":"JSTOR","URL":"http://www.jstor.org/stable/2460822","ISSN":"0003-0147","journalAbbreviation":"The American Naturalist","author":[{"family":"Patten","given":"Bernard C."},{"family":"Odum","given":"Eugene P."}],"issued":{"date-parts":[["1981"]]},"accessed":{"date-parts":[["2016",2,19]]}}},{"key":"http://zotero.org/users/39885/items/CMUIIS6H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CMUIIS6H","type":"book","title":"Sustainable Energy Production and Consumption: Benefits, Strategies and Environmental Costing","publisher":"Springer","edition":"1","ISBN":"1-4020-8493-5","call-number":"0001","shortTitle":"Sustainable Energy Production and Consumption","author":[{"family":"Barbir","given":"Frano"},{"family":"Ulgiati","given":"Sergio"}],"issued":{"date-parts":[["2008",7,1]]}}},{"key":"http://zotero.org/users/39885/items/CQWW9PPN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CQWW9PPN","type":"book","title":"Introduction to Systems Engineering","publisher":"Wiley-Interscience","edition":"1","ISBN":"0-471-02766-9","call-number":"0106","author":[{"family":"Sage","given":"Andrew P."},{"family":"Armstrong","given":"James E.","suffix":"Jr."}],"issued":{"date-parts":[["2000",3,27]]}}},{"key":"http://zotero.org/users/39885/items/CR646AR2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CR646AR2","type":"webpage","title":"The Berlin Academy and forgery","URL":"http://www-history.mcs.st-andrews.ac.uk/history/HistTopics/Forgery_2.html","author":[{"family":"O'Connor","given":"J J"},{"literal":"E F Robertson"}],"issued":{"date-parts":[["2003",4]]},"accessed":{"date-parts":[["2016",3,2]]}}},{"key":"http://zotero.org/users/39885/items/CRHPG9AK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CRHPG9AK","type":"article-journal","title":"XVII. On the propagation of electric waves through wires","container-title":"Philosophical Magazine Series 5","page":"117-127","volume":"28","issue":"171","source":"Taylor and Francis+NEJM","URL":"http://dx.doi.org/10.1080/14786448908619840","DOI":"10.1080/14786448908619840","ISSN":"1941-5982","author":[{"family":"Hertz","given":"Prof H."}],"issued":{"date-parts":[["1889",8,1]]},"accessed":{"date-parts":[["2015",8,21]]}}},{"key":"http://zotero.org/users/39885/items/CUJCI3TJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CUJCI3TJ","type":"book","title":"Maximum Power: The Ideas and Applications of H.T. Odum","publisher":"University Press of Colorado","ISBN":"0-87081-362-5","call-number":"0050","shortTitle":"Maximum Power","author":[{"family":"Hall","given":"Charles A. S."}],"issued":{"date-parts":[["1995",11]]}}},{"key":"http://zotero.org/users/39885/items/CW8TZ9TK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CW8TZ9TK","type":"paper-conference","title":"Hydrological modeling in Modelica","container-title":"Paper presented at the 4th International Modelica Conference","source":"Google Scholar","author":[{"family":"Nyström","given":"K.B.K."}],"issued":{"date-parts":[["2005"]]}}},{"key":"http://zotero.org/users/39885/items/CXAVBCQU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/CXAVBCQU","type":"article","title":"Activity 5: Vulnerability of aquifers to coal seam gas water extraction","publisher":"Queensland Department of Natural Resources and Mines","abstract":"Activity 5: Vulnerability of aquifers to coal seam gas water extraction","URL":"https://www.dnrm.qld.gov.au/water/catchments-planning/healthy-headwaters/coal-seam-gas-water-feasibility-study/activity-5","shortTitle":"Activity 5","language":"en-AU","author":[{"family":"DNRM","given":""}],"issued":{"date-parts":[["2013",11,6]]},"accessed":{"date-parts":[["2015",8,19]]}}},{"key":"http://zotero.org/users/39885/items/D2HPA8R9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/D2HPA8R9","type":"webpage","title":"The Socialist Origins of Big Data","container-title":"The New Yorker","abstract":"Evgeny Morozov on how the ideas behind Project Cybersyn, a futuristic experiment in cybernetics from nineteen-seventies Chile, still shapes technology.","URL":"http://www.newyorker.com/magazine/2014/10/13/planning-machine","author":[{"family":"Morozov","given":"Evgeny"}],"issued":{"date-parts":[["2014",10,6]]},"accessed":{"date-parts":[["2015",3,16]]}}},{"key":"http://zotero.org/users/39885/items/D3SDN9KB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/D3SDN9KB","type":"article-journal","title":"Emergy Evaluation of the Biosphere and Natural Capital","container-title":"Ambio","page":"486-493","volume":"28","issue":"6","call-number":"0078","author":[{"family":"Brown","given":"M. T."},{"family":"Ulgiati","given":"S."}],"issued":{"date-parts":[["1999"]]}}},{"key":"http://zotero.org/users/39885/items/D4IW5U2H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/D4IW5U2H","type":"article","title":"Guidelines for the Petroleum and Geothermal Energy Resources and Petroleum (Submerged Lands)","publisher":"Government of Western Australia, Department of Mines and Petroleum","URL":"http://www.dmp.wa.gov.au/documents/PD-SBD-ADM-180D.pdf","author":[{"family":"DMP","given":""}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",12,11]]}}},{"key":"http://zotero.org/users/39885/items/D5UJTT3F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/D5UJTT3F","type":"book","title":"Dictionary of the history of science","publisher":"Princeton University Press","publisher-place":"Princeton  N.J.","event-place":"Princeton  N.J.","ISBN":"978-0-691-02384-7","call-number":"0000","author":[{"family":"Bynum","given":"W"}],"issued":{"date-parts":[["1985"]]}}},{"key":"http://zotero.org/users/39885/items/D69E6F57","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/D69E6F57","type":"book","title":"Energy and the Ecological Economics of Sustainability","publisher":"Island Press","number-of-pages":"333","source":"Google Books","abstract":"Energy and the Ecological Economics of Sustainability examines the roots of the present environmental crisis in the neoclassical economics upon which modern industrial society is based. The author explains that only when we view ourselves in the larger context of the global ecosystem and accept the physical limits to what is possible can sustainability be achieved.","ISBN":"978-1-59726-913-1","language":"en","author":[{"family":"Peet","given":"John"}],"issued":{"date-parts":[["1992",5,1]]}}},{"key":"http://zotero.org/users/39885/items/D6EBW94H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/D6EBW94H","type":"article-journal","title":"Sustainability indicators, policy and governance: Issues for ecological economics","container-title":"Ecological Economics","page":"86-99","volume":"60","issue":"1","source":"ScienceDirect","abstract":"Ecological economics is a major forum for discussion of theoretical and analytical aspects of measuring sustainability. The role of sustainability indicators as an evaluation method for sustainability within the emerging context of governance merits further analysis. Focusing on policy processes surrounding the production of sustainability indicators, this paper addresses two questions: what is the potential utility of indicators for policy; and in what ways can indicators influence governance? The former is addressed by exploring three disciplines with long histories of indicator application: public administration studies, urban studies and environmental sciences. The latter is addressed by distilling key perspectives from public policy literature on knowledge utilisation and policy learning, which become the foundation for clarifying the notion of policy-resonant indicators. This clarification is achieved by canvassing the spectrum of the influences on indicators and the mechanisms of their resonance in policy processes. The final section of the paper brings these arguments together by exploring two major insights in terms of challenges for ecological economics: strengthening indicator theory and practice by addressing four key ingredients; and mobilisation of indicators through their active use within the context of governance.","URL":"http://www.sciencedirect.com/science/article/pii/S092180090500529X","DOI":"10.1016/j.ecolecon.2005.11.019","ISSN":"0921-8009","shortTitle":"Sustainability indicators, policy and governance","journalAbbreviation":"Ecological Economics","author":[{"family":"Hezri","given":"Adnan A."},{"family":"Dovers","given":"Stephen R."}],"issued":{"date-parts":[["2006",11,1]]},"accessed":{"date-parts":[["2015",12,12]]}}},{"key":"http://zotero.org/users/39885/items/DCTVH8RA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DCTVH8RA","type":"book","title":"Risk communication, risk statistics, and risk comparisons: A manual for plant managers","publisher":"Chemical Manufacturers Association Washington, DC","source":"Google Scholar","URL":"http://www.psandman.com/articles/cma-1.htm","shortTitle":"Risk communication, risk statistics, and risk comparisons","author":[{"family":"Covello","given":"Vincent T."},{"family":"Sandman","given":"Peter M."},{"family":"Slovic","given":"Paul"},{"family":"Association","given":"Chemical Manufacturers"},{"literal":"others"}],"issued":{"date-parts":[["1988"]]},"accessed":{"date-parts":[["2015",10,9]]}}},{"key":"http://zotero.org/users/39885/items/DCXNJES2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DCXNJES2","type":"article-journal","title":"Potential Public Health Hazards, Exposures and Health Effects from Unconventional Natural Gas Development","container-title":"Environmental Science & Technology","page":"8307-8320","volume":"48","issue":"15","source":"ACS Publications","abstract":"The rapid increase in unconventional natural gas (UNG) development in the United States during the past decade has brought wells and related infrastructure closer to population centers. This review evaluates risks to public health from chemical and nonchemical stressors associated with UNG, describes likely exposure pathways and potential health effects, and identifies major uncertainties to address with future research. The most important occupational stressors include mortality, exposure to hazardous materials and increased risk of industrial accidents. For communities near development and production sites the major stressors are air pollutants, ground and surface water contamination, truck traffic and noise pollution, accidents and malfunctions, and psychosocial stress associated with community change. Despite broad public concern, no comprehensive population-based studies of the public health effects of UNG operations exist. Major uncertainties are the unknown frequency and duration of human exposure, future extent of development, potential emission control and mitigation strategies, and a paucity of baseline data to enable substantive before and after comparisons for affected populations and environmental media. Overall, the current literature suggests that research needs to address these uncertainties before we can reasonably quantify the likelihood of occurrence or magnitude of adverse health effects associated with UNG production in workers and communities.","URL":"http://dx.doi.org/10.1021/es404621d","DOI":"10.1021/es404621d","ISSN":"0013-936X","journalAbbreviation":"Environ. Sci. Technol.","author":[{"family":"Adgate","given":"John L."},{"family":"Goldstein","given":"Bernard D."},{"family":"McKenzie","given":"Lisa M."}],"issued":{"date-parts":[["2014",8,5]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/DDEKJ9JS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DDEKJ9JS","type":"article","title":"Emergy Simulator: A Systems Ecology Platform for Sustainable Development.","abstract":"Project Report followed by Technical Report","URL":"ftp://ftp.heanet.ie/mirrors/sourceforge/e/em/emsim/OldFiles/report.pdf","shortTitle":"Emergy Simulator","language":"En","author":[{"family":"Valyi","given":"Raphaël"}],"issued":{"date-parts":[["2004"]]},"accessed":{"date-parts":[["2013",2,24]]}}},{"key":"http://zotero.org/users/39885/items/DFN9M6VZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DFN9M6VZ","type":"article","title":"How to do hydrological data validation using hydrological models","publisher":"World Bank & Government of The Netherlands","URL":"http://www.cwc.nic.in/main/HP/DOWNLOAD/38%20How%20to%20do%20data%20validation%20using%20hydrological%20models.pdf","shortTitle":"Training module # SWDP - 38","author":[{"family":"DHV Consultants BV","given":""}],"issued":{"date-parts":[["2002"]]},"accessed":{"date-parts":[["2011",9,9]]}}},{"key":"http://zotero.org/users/39885/items/DHN452R5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DHN452R5","type":"article-journal","title":"Geochemistry of coalbed gas–A review","container-title":"International Journal of Coal Geology","page":"159–173","volume":"35","issue":"1","source":"Google Scholar","URL":"http://www.sciencedirect.com/science/article/pii/S0166516297000177","author":[{"family":"Clayton","given":"J. L."}],"issued":{"date-parts":[["1998"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/DI879QZR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DI879QZR","type":"article-journal","title":"Application of systems engineering to optimize sustainable performance of gas export systems","container-title":"Proc. INCOSE Symposium","call-number":"0000","author":[{"family":"Nørstebø","given":"Vibeke"}],"issued":{"date-parts":[["2008"]]}}},{"key":"http://zotero.org/users/39885/items/DICHWNZN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DICHWNZN","type":"article-journal","title":"Modelling Australian land use competition and ecosystem services with food price feedbacks at high spatial resolution","container-title":"Environmental Modelling & Software","page":"141-154","volume":"69","source":"ScienceDirect","abstract":"In a globalised world, land use change outlooks are influenced by both locally heterogeneous land attributes and world markets. We demonstrate the importance of high resolution land heterogeneity representation in understanding local impacts of future global scenarios with carbon markets and land competition influencing food prices. A methodologically unique Australian continental model is presented with bottom-up parcel scale granularity in land use change, food, carbon, water, and biodiversity ecosystem service supply determination, and partial equilibrium food price impacts of land competition. We show that food price feedbacks produce modest aggregate national land use and ecosystem service supply changes. However, high resolution results show amplified land use change and ecosystem service impact in some places and muted impacts in other areas relative to national averages. We conclude that fine granularity modelling of geographic diversity produces local land use change and ecosystem service impact insights not discernible with other approaches.","URL":"http://www.sciencedirect.com/science/article/pii/S1364815215001036","DOI":"10.1016/j.envsoft.2015.03.015","ISSN":"1364-8152","journalAbbreviation":"Environmental Modelling & Software","author":[{"family":"Connor","given":"Jeffery D."},{"family":"Bryan","given":"Brett A."},{"family":"Nolan","given":"Martin"},{"family":"Stock","given":"Florian"},{"family":"Gao","given":"Lei"},{"family":"Dunstall","given":"Simon"},{"family":"Graham","given":"Paul"},{"family":"Ernst","given":"Andreas"},{"family":"Newth","given":"David"},{"family":"Grundy","given":"Mike"},{"family":"Hatfield-Dodds","given":"Steve"}],"issued":{"date-parts":[["2015",7]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/DICRGMEU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DICRGMEU","type":"article-journal","title":"Modelling of the steel-concrete interface to obtain information on reinforcement bar corrosion","container-title":"Journal of Applied Electrochemistry","page":"429-436","volume":"35","source":"CrossRef","URL":"http://www.deepdyve.com/lp/springer-journals/modelling-of-the-steel-concrete-interface-to-obtain-information-on-ah4GVIvQcD","DOI":"10.1007/s10800-004-8348-0","ISSN":"0021-891X, 1572-8838","shortTitle":"Modelling of the steel?","author":[{"family":"Feliu","given":"V."},{"family":"Gonzalez","given":"J.A."},{"family":"Feliu","given":"S."}],"issued":{"date-parts":[["2005",5]]},"accessed":{"date-parts":[["2011",8,28]]}}},{"key":"http://zotero.org/users/39885/items/DJNKDJTS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DJNKDJTS","type":"article-journal","title":"Metabolic response to exogenous ethanol in yeast: An in vivo statistical total correlation NMR spectroscopy approach","container-title":"Journal of Biosciences","page":"749-55","volume":"37","issue":"4","source":"ProQuest","abstract":"In vivo NMR spectroscopy, together with selectively 13C-labelled substrates and 'statistical total correlation spectroscopy' analysis (STOCSY), are valuable tools to collect and interpret the metabolic responses of a living organism to external stimuli. In this study, we applied this approach to evaluate the effects of increasing concentration of exogenous ethanol on the Saccharomyces cerevisiae fermentative metabolism. We show that the STOCSY analysis correctly identifies the different types of correlations among the enriched metabolites involved in the fermentation, and that these correlations are quite stable even in presence of a stressing factor such as the exogenous ethanol.[PUBLICATION ABSTRACT]","URL":"http://search.proquest.com.ezproxy.library.uq.edu.au/docview/1038902587/abstract/8EC9F9D2135841F7PQ/1","DOI":"http://dx.doi.org.ezproxy.library.uq.edu.au/10.1007/s12038-012-9237-z","ISSN":"0250-5991","shortTitle":"Metabolic response to exogenous ethanol in yeast","language":"English","author":[{"family":"Ricci","given":"Maso"},{"family":"Aggravi","given":"Marianna"},{"family":"Bonechi","given":"Claudia"},{"family":"Martini","given":"Silvia"},{"family":"Aloisi","given":"Anna Maria"},{"family":"Rossi","given":"Claudio"}],"issued":{"date-parts":[["2012",9]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/DKEAHVIM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DKEAHVIM","type":"article-journal","title":"Brown Correspondance","container-title":"Ecological Engineering","page":"213-214","volume":"9","issue":"3-4","call-number":"0000","author":[{"family":"Brown","given":"Mark T"}],"issued":{"date-parts":[["1997"]]}}},{"key":"http://zotero.org/users/39885/items/DKGSQ3VM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DKGSQ3VM","type":"webpage","title":"Groundwater Database - Queensland - Data | Queensland Government","abstract":"Database storing registered water bore data from private water bores and Queensland Government groundwater investigation and monitoring bores. Data includes bore location, water levels,...","URL":"https://data.qld.gov.au/dataset/groundwater-database-queensland","author":[{"literal":"DNRM"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,13]]}}},{"key":"http://zotero.org/users/39885/items/DKJI32W5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DKJI32W5","type":"article-journal","title":"Question from Sholto Maud","call-number":"0000","author":[{"family":"Maud","given":"S."},{"family":"Lovelock","given":"J."}]}},{"key":"http://zotero.org/users/39885/items/DMVREIG7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DMVREIG7","type":"article-journal","title":"Global oil peaking: Responding to the case for [`]abundant supplies of oil'","container-title":"Energy","page":"1179-1184","volume":"33","issue":"8","abstract":"This paper examines aspects of the case against global oil peaking, and in particular sets out to answer a viewpoint that the world can have abundant supplies of oil \"for years to come\". Arguments supporting the latter view include: past forecasts of oil shortage have proved incorrect, so current predictions should also be discounted; many modellers depend on Hubbert's analysis but this contained fundamental flaws; new oil supply will result from reserves growth and from the wider deployment of advanced extraction technology; and that the world contains large resources of unconventional oil that can come on-stream if the production of conventional oil declines. These arguments are examined in turn and shown to be incorrect, or to need setting into a broader context. The paper concludes therefore that such arguments cannot be used to rule out calculations that the resource-limited peak in the world's production of conventional oil will occur in the near term. Moreover, peaking of conventional oil is likely to impact the world's total availability of oil where the latter includes non-conventional oil and oil substitutes.","URL":"http://www.sciencedirect.com/science/article/B6V2S-4SP49TB-1/1/f993fa8165cbe4e04567a1e7dd613fb3","DOI":"10.1016/j.energy.2008.04.001","call-number":"0011","shortTitle":"Global oil peaking","author":[{"family":"Meng","given":"Q.Y."},{"family":"Bentley","given":"R.W."}],"issued":{"date-parts":[["2008",8]]},"accessed":{"date-parts":[["2008",7,22]]}}},{"key":"http://zotero.org/users/39885/items/DNGHX5QA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DNGHX5QA","type":"report","title":"Water Quality Metadata Guidelines","collection-title":"National Information Management Protocols for Water Quality Monitoring","publisher":"Environment and Resource Sciences Department of Environment and Resource Management","publisher-place":"State of Queensland","event-place":"State of Queensland","URL":"http://www.bom.gov.au/water/standards/projects/documents/wq_metadata_guidelines.pdf","number":"Report A","author":[{"family":"Ryan","given":"Jennifer"},{"literal":"Rodrigues, Katrina"},{"literal":"De Hayr, Rob"}],"issued":{"date-parts":[["2011"]]}}},{"key":"http://zotero.org/users/39885/items/DPQIBK56","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DPQIBK56","type":"book","title":"Marx and Nature: A Red and Green Perspective","publisher":"Palgrave Macmillan","edition":"1st ed","ISBN":"0-312-21940-7","call-number":"0119","shortTitle":"Marx and Nature","author":[{"family":"Burkett","given":"Paul"}],"issued":{"date-parts":[["1999",2,15]]}}},{"key":"http://zotero.org/users/39885/items/DS8WZ6G2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DS8WZ6G2","type":"article","title":"Water Quality Metadata","publisher":"Bureau of Meteorology","URL":"http://www.bom.gov.au/water/standards/projects/documents/Initial-Draft-National-Industry-Guideline-for-Water-Quality-Medadata-April-2014.docx","shortTitle":"Water Quality Metadata","language":"en","author":[{"family":"Bureau of Meterology","given":""}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",9,22]]}}},{"key":"http://zotero.org/users/39885/items/DSHSC449","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DSHSC449","type":"article-journal","title":"Risk Communication: Facing Public Outrage","container-title":"EPA Journal","page":"21","volume":"13","URL":"http://heinonline.org/HOL/Page?handle=hein.journals/epajrnl13&id=314&div=&collection=","shortTitle":"Risk Communication","journalAbbreviation":"EPA J.","author":[{"family":"Sandman","given":"Peter M."}],"issued":{"date-parts":[["1987"]]}}},{"key":"http://zotero.org/users/39885/items/DSJDWFK9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DSJDWFK9","type":"article-journal","title":"The life of James Clerk Maxwell: With Selections from his Correspondence and Occasional Writings. By Lewis Campbell, M. A., LL. D., and Wm. Garnett, M. A. London: Macmillan & Co.","container-title":"Journal of the Franklin Institute","page":"392","volume":"120","issue":"5","source":"ScienceDirect","URL":"http://www.sciencedirect.com/science/article/pii/S0016003285904958","DOI":"10.1016/S0016-0032(85)90495-8","ISSN":"0016-0032","shortTitle":"The life of James Clerk Maxwell","journalAbbreviation":"Journal of the Franklin Institute","author":[{"literal":"E.A.S."}],"issued":{"date-parts":[["1885",11]]},"accessed":{"date-parts":[["2015",2,24]]}}},{"key":"http://zotero.org/users/39885/items/DT4WSJAV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DT4WSJAV","type":"book","title":"jQuery Mobile","publisher":"O'Reilly Media","number-of-pages":"130","source":"Amazon.com","ISBN":"1-4493-0668-3","author":[{"family":"Reid","given":"Jon"}],"issued":{"date-parts":[["2011",7,7]]}}},{"key":"http://zotero.org/users/39885/items/DT5SM7UX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DT5SM7UX","type":"book","title":"Ajax: The Definitive Guide","publisher":"O'Reilly Media","number-of-pages":"992","edition":"First Edition","source":"Amazon.com","ISBN":"0-596-52838-8","shortTitle":"Ajax","author":[{"family":"III","given":"Anthony T. Holdener"}],"issued":{"date-parts":[["2008",2,1]]}}},{"key":"http://zotero.org/users/39885/items/DT9IVFRW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DT9IVFRW","type":"article-journal","title":"Evaluation of oasis ecosystem risk by reliability theory in an arid area: A case study in the Shiyang River Basin, China","container-title":"Journal of Environmental Sciences","page":"508-512","volume":"19","issue":"4","source":"ScienceDirect","abstract":"Ecosystem risk is a new concept in understanding environmental problems. It is important to study and develop quantitative methods for regional ecosystem risk analysis. In this study some new indicators and methods for measuring oasis ecosystem risk were established using reliability theory. These indicators are linked to water resource which is the key restricting factor in arid area oasis ecosystems. They have clear meanings and can also be compared in different arid area oases. A case study in the Liangzhou oasis of the Shiyang River Basin in China shows how to calculate these ecosystem risk indicators. The results of the case study are as follows: the reliability indicator risk indicator stability indicator and integrated loss indicator of the Liangzhou oasis are 0.686 0.314 0.743 and 0.301 respectively. This means that the reliability degree of the oasis's ecosystem safety is 68.6%; the degree of risk that it is unsafe is 31.4%; the stability degree is 74.3%; and 30.1% of the oasis's area is supported by over-exploiting underground water and damaging the lower reaches of the ecosystem. This result can be used as a guide in controlling and managing ecosystem risk in the research area.","URL":"http://www.sciencedirect.com/science/article/pii/S1001074207600850","DOI":"10.1016/S1001-0742(07)60085-0","ISSN":"1001-0742","shortTitle":"Evaluation of oasis ecosystem risk by reliability theory in an arid area","journalAbbreviation":"Journal of Environmental Sciences","author":[{"family":"LI","given":"Wei-de"},{"family":"LI","given":"Zi-zhen"},{"family":"WANG","given":"Ji-quan"}],"issued":{"date-parts":[["2007"]]},"accessed":{"date-parts":[["2015",3,13]]}}},{"key":"http://zotero.org/users/39885/items/DUHWGU7T","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DUHWGU7T","type":"article-journal","title":"Somatic retrotransposition alters the genetic landscape of the human brain","container-title":"Nature","page":"534-537","volume":"479","issue":"7374","source":"www.nature.com","abstract":"Retrotransposons are mobile genetic elements that use a germline /`copy-and-paste/' mechanism to spread throughout metazoan genomes. At least 50 per cent of the human genome is derived from retrotransposons, with three active families (L1, Alu and SVA) associated with insertional mutagenesis and disease. Epigenetic and post-transcriptional suppression block retrotransposition in somatic cells, excluding early embryo development and some malignancies. Recent reports of L1 expression and copy number variation in the human brain suggest that L1 mobilization may also occur during later development. However, the corresponding integration sites have not been mapped. Here we apply a high-throughput method to identify numerous L1, Alu and SVA germline mutations, as well as 7,743 putative somatic L1 insertions, in the hippocampus and caudate nucleus of three individuals. Surprisingly, we also found 13,692 somatic Alu insertions and 1,350 SVA insertions. Our results demonstrate that retrotransposons mobilize to protein-coding genes differentially expressed and active in the brain. Thus, somatic genome mosaicism driven by retrotransposition may reshape the genetic circuitry that underpins normal and abnormal neurobiological processes.","URL":"http://www.nature.com/nature/journal/v479/n7374/full/nature10531.html","DOI":"10.1038/nature10531","ISSN":"0028-0836","journalAbbreviation":"Nature","language":"en","author":[{"family":"Baillie","given":"J. Kenneth"},{"family":"Barnett","given":"Mark W."},{"family":"Upton","given":"Kyle R."},{"family":"Gerhardt","given":"Daniel J."},{"family":"Richmond","given":"Todd A."},{"family":"De Sapio","given":"Fioravante"},{"family":"Brennan","given":"Paul M."},{"family":"Rizzu","given":"Patrizia"},{"family":"Smith","given":"Sarah"},{"family":"Fell","given":"Mark"},{"family":"Talbot","given":"Richard T."},{"family":"Gustincich","given":"Stefano"},{"family":"Freeman","given":"Thomas C."},{"family":"Mattick","given":"John S."},{"family":"Hume","given":"David A."},{"family":"Heutink","given":"Peter"},{"family":"Carninci","given":"Piero"},{"family":"Jeddeloh","given":"Jeffrey A."},{"family":"Faulkner","given":"Geoffrey J."}],"issued":{"date-parts":[["2011",11,24]]},"accessed":{"date-parts":[["2016",3,2]]}}},{"key":"http://zotero.org/users/39885/items/DUXWRV63","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DUXWRV63","type":"book","title":"Emergy Synthesis 7: Theory and Applications of the Emergy Methodology","publisher":"Center for Environmental Policy, University of Florida","source":"Google Scholar","URL":"http://cep.ees.ufl.edu/emergy/conferences/ERC07_2012/proceedings.shtml","shortTitle":"Emergy Synthesis 7","author":[{"family":"Brown","given":"Mark Theodore"},{"family":"Sweeney","given":"S."},{"family":"Campbell","given":"D. E."},{"family":"Huang","given":"S."},{"family":"Kang","given":"D."},{"family":"Rydberg","given":"T."},{"family":"Tilley","given":"D."},{"family":"Ulgiati","given":"S."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",11,5]]}}},{"key":"http://zotero.org/users/39885/items/DVX6TN5G","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DVX6TN5G","type":"book","title":"Power Quality: Mitigation Technologies in a Distributed Environment","publisher":"Springer","edition":"1","ISBN":"1-84628-771-5","call-number":"0037","shortTitle":"Power Quality","author":[{"family":"Moreno-Muñoz","given":"Antonio"}],"issued":{"date-parts":[["2007",4,25]]}}},{"key":"http://zotero.org/users/39885/items/DW7KVPUM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DW7KVPUM","type":"paper-conference","title":"Enhanced concept for control systems of electric power networks","page":"1125-1130 vol.2","volume":"2","event":"Power System Technology, 2000. Proceedings. PowerCon 2000. International Conference on","abstract":"This paper presents a hard- and software concept for the integration of modern condition monitoring devices into electric power network control and management systems. The concept is based on a distributed database and on a central system definition, which describes the entire setup. A system definition language is proposed, where all aspects of data such as location within the system, permission of access, interfaces, statistical and economical evaluation, storage and visualization can be defined. The system definition language is hierarchical and object oriented. An experimental setup for online monitoring purposes is described, where the methods proposed are applied","DOI":"10.1109/ICPST.2000.897178","call-number":"0002","author":[{"family":"Oechsle","given":"F."},{"family":"Feser","given":"K."},{"family":"Bertsch","given":"J."}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/DZWNUII8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/DZWNUII8","type":"article","title":"Energy Diagram of Australia","publisher":"Unpublished","author":[{"family":"Odum","given":"Howard T."},{"family":"Scienceman","given":"David M"}],"issued":{"date-parts":[["1993"]]}}},{"key":"http://zotero.org/users/39885/items/E26JZ99F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/E26JZ99F","type":"paper-conference","title":"Modeling freshwater uses in coastal areas–the case of Pertuis Charentais (France)","container-title":"DAVID A., SWAYNE, WANHONG YANG A.; A. VOINOV, A. RIZZOLI, T. FILATOVA (Eds.)“Modelling for Environment’s Sake”, Proceedings of the 2010 International Congress on Environmental Modelling and Software, Fifth Biennial Meeting","source":"Google Scholar","URL":"http://www.iemss.org/iemss2010/papers/S10/S.10.22.Modeling%20freshwater%20uses%20in%20coastal%20areas%20the%20case%20of%20Pertuis%20Charentais%20France%20-%20CEDRIC%20BACHER.pdf","author":[{"family":"Bachera","given":"Cédric"},{"family":"Balle-Begantonb","given":"Johanna"},{"family":"Neveuc","given":"Julien"},{"family":"Rethoretd","given":"Harold"},{"family":"Verniere","given":"Françoise"},{"family":"Bordenavef","given":"Paul"},{"family":"Mongruelg","given":"Rémi"},{"family":"Perezh","given":"José"}],"issued":{"date-parts":[["2010"]]},"accessed":{"date-parts":[["2015",10,25]]}}},{"key":"http://zotero.org/users/39885/items/E495MH7E","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/E495MH7E","type":"article-journal","title":"Managing produced water from coal seam gas projects: implications for an emerging industry in Australia","container-title":"Environmental Science and Pollution Research","page":"10981-11000","volume":"22","issue":"14","source":"link.springer.com","abstract":"This paper reviews the environmental problems, impacts and risks associated with the generation and disposal of produced water by the emerging coal seam gas (CSG) industry and how it may be relevant to Australia and similar physical settings. With only limited independent research on the potential environmental impacts of produced water, is it necessary for industry and government policy makers and regulators to draw upon the experiences of related endeavours such as mining and groundwater extraction accepting that the conclusions may not always be directly transferrable. CSG is widely touted in Australia as having the potential to provide significant economic and energy security benefits, yet the environmental and health policies and the planning and regulatory setting are yet to mature and are continuing to evolve amidst ongoing social and environmental concerns and political indecision. In this review, produced water has been defined as water that is brought to the land surface during the process of recovering methane gas from coal seams and includes water sourced from CSG wells as well as flowback water associated with drilling, hydraulic fracturing and gas extraction. A brief overview of produced water generation, its characteristics and environmental issues is provided. A review of past lessons and identification of potential risks, including disposal options, is included to assist in planning and management of this industry.","URL":"http://link.springer.com/article/10.1007/s11356-015-4254-8","DOI":"10.1007/s11356-015-4254-8","ISSN":"0944-1344, 1614-7499","shortTitle":"Managing produced water from coal seam gas projects","journalAbbreviation":"Environ Sci Pollut Res","language":"en","author":[{"family":"Davies","given":"Peter J."},{"family":"Gore","given":"Damian B."},{"family":"Khan","given":"Stuart J."}],"issued":{"date-parts":[["2015",3,19]]},"accessed":{"date-parts":[["2015",8,24]]}}},{"key":"http://zotero.org/users/39885/items/E4TR9QKA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/E4TR9QKA","type":"article-journal","title":"A Measurable and Testable Brain-Based Emergent Interactionism","container-title":"Journal of Mind and Behavior","page":"201–219","volume":"201","issue":"2","source":"PhilPapers","author":[{"family":"Vandervert","given":"Larry R."}],"issued":{"date-parts":[["1991"]]}}},{"key":"http://zotero.org/users/39885/items/E63UUNQD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/E63UUNQD","type":"article-journal","title":"Social License to Operate for Mining Companies in the Russian Arctic: Two Cases in the Murmansk Region","container-title":"Arctic yearbook 2014","source":"Google Scholar","URL":"http://www.arcticyearbook.com/index.php/briefing-notes2014/120-social-license-to-operate-for-mining-companies-in-the-russian-arctic-two-cases-in-the-murmansk-region","shortTitle":"Social License to Operate for Mining Companies in the Russian Arctic","author":[{"family":"Riabova","given":"Larissa"},{"family":"Didyk","given":"Vladimir"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/E6UMH6IB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/E6UMH6IB","type":"article-journal","title":"Towards the sequential assimilation of SAR-derived water stages into hydraulic models using the Particle Filter: proof of concept","container-title":"Hydrol. Earth Syst. Sci.","page":"1773-1785","volume":"14","issue":"9","source":"Copernicus Online Journals","URL":"http://www.hydrol-earth-syst-sci.net/14/1773/2010/","DOI":"10.5194/hess-14-1773-2010","ISSN":"1607-7938","shortTitle":"Towards the sequential assimilation of SAR-derived water stages into hydraulic models using the Particle Filter","journalAbbreviation":"Hydrol. Earth Syst. Sci.","author":[{"family":"Matgen","given":"P."},{"family":"Montanari","given":"M."},{"family":"Hostache","given":"R."},{"family":"Pfister","given":"L."},{"family":"Hoffmann","given":"L."},{"family":"Plaza","given":"D."},{"family":"Pauwels","given":"V. R. N."},{"family":"De Lannoy","given":"G. J. M."},{"family":"De Keyser","given":"R."},{"family":"Savenije","given":"H. H. G."}],"issued":{"date-parts":[["2010",9,27]]},"accessed":{"date-parts":[["2014",3,5]]}}},{"key":"http://zotero.org/users/39885/items/E7CIEQJS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/E7CIEQJS","type":"paper-conference","title":"How Many \"Fourth\" Principles Are There In Thermodynamics?","publisher":"The Center for Environmental Policy, Department of Environmental Engineering Sciences, University of Florida","publisher-place":"University of Florida","page":"103-114","volume":"3","event":"Proceedings of the 3rd Biennial Emergy Conference","event-place":"University of Florida","call-number":"0068","author":[{"family":"Giannantoni","given":"Corrado"}],"issued":{"date-parts":[["2005"]]}}},{"key":"http://zotero.org/users/39885/items/EB34S752","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EB34S752","type":"article-journal","title":"The histories of computing(s)","container-title":"Interdisciplinary Science Reviews","page":"119-135","volume":"30","issue":"2","source":"CrossRef","URL":"http://www.maneyonline.com/doi/abs/10.1179/030801805X25927","DOI":"10.1179/030801805X25927","ISSN":"0308-0188, 1743-2790","language":"en","author":[{"family":"Mahoney","given":"Michael S."}],"issued":{"date-parts":[["2005",6]]},"accessed":{"date-parts":[["2015",2,23]]}}},{"key":"http://zotero.org/users/39885/items/EBDZZ8IZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EBDZZ8IZ","type":"book","title":"Vladimir I. Vernadsky (1863-1945), founder of the biosphere concept.","volume":"4","URL":"http://www.ncbi.nlm.nih.gov/pubmed/11770820","call-number":"0000","author":[{"family":"Lapo","given":"A V"}],"issued":{"date-parts":[["2001"]]},"accessed":{"date-parts":[["2008",7,2]]}}},{"key":"http://zotero.org/users/39885/items/EBMEMBR8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EBMEMBR8","type":"article-journal","title":"Portfolio Selection","container-title":"The Journal of Finance","page":"77-91","volume":"7","issue":"1","source":"JSTOR","URL":"http://www.jstor.org/stable/2975974","DOI":"10.2307/2975974","ISSN":"0022-1082","journalAbbreviation":"The Journal of Finance","author":[{"family":"Markowitz","given":"Harry"}],"issued":{"date-parts":[["1952"]]},"accessed":{"date-parts":[["2015",12,15]]}}},{"key":"http://zotero.org/users/39885/items/EBNH4MD4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EBNH4MD4","type":"book","title":"The Complexity of Cooperation: Agent-Based Models of Competition and Collaboration","publisher":"Princeton: Princeton University Press","ISBN":"978-0-691-01567-5","shortTitle":"The Complexity of Cooperation","author":[{"family":"Axelrod","given":"&#32;Robert"}],"issued":{"date-parts":[["1997"]]}}},{"key":"http://zotero.org/users/39885/items/EBPJDMZI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EBPJDMZI","type":"book","title":"Rethinking the Fifth Discipline: Learning Within the Unknowable","publisher":"Routledge","edition":"1","ISBN":"0-415-18530-0","call-number":"0358","shortTitle":"Rethinking the Fifth Discipline","author":[{"family":"Flood","given":"Robert Lo"}],"issued":{"date-parts":[["1999",8,3]]}}},{"key":"http://zotero.org/users/39885/items/ECW9XW64","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ECW9XW64","type":"article-magazine","title":"How the world should invest in energy efficiency","container-title":"The McKinsey Quarterly","abstract":"A program that targets cost-effective opportunities in energy productivity could halve \nthe growth in energy demand, cut emissions of greenhouse gases, and generate attractive returns.","call-number":"0004","author":[{"family":"Farrell","given":"Diana"},{"family":"Remes","given":"Jaana"}],"issued":{"date-parts":[["2008",7]]}}},{"key":"http://zotero.org/users/39885/items/ED4VCPZT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ED4VCPZT","type":"article","title":"MIL-HDBK-217F: Military Standard, Reliability Prediction Of Electronic Equipment","publisher":"DEPARTMENT OF DEFENSE WASHINGTON DC 20301","URL":"http://www.weibull.com/mil_std/mil_hdbk_217f.pdf","author":[{"family":"DoD","given":""}],"issued":{"date-parts":[["1991"]]}}},{"key":"http://zotero.org/users/39885/items/EDJZAB6M","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EDJZAB6M","type":"article-journal","title":"Maximum Power and Maximum Entropy Production: Finalities in Nature","container-title":"Cosmos and History: The Journal of Natural and Social Philosophy","page":"114-121","volume":"6","issue":"1","source":"cosmosandhistory.org","abstract":"72   544x376            Normal   0                       \n /* Style Definitions */\n table.MsoNormalTable\n\t{mso-style-name:\"Table Normal\";\n\tmso-tstyle-rowband-size:0;\n\tmso-tstyle-colband-size:0;\n\tmso-style-noshow:yes;\n\tmso-style-parent:\"\";\n\tmso-padding-alt:0in 5.4pt 0in 5.4pt;\n\tmso-para-margin:0in;\n\tmso-para-margin-bottom:.0001pt;\n\tmso-pagination:widow-orphan;\n\tfont-size:10.0pt;\n\tfont-family:\"Times New Roman\";}\n      I begin with the definition of power, and find that it is finalistic inasmuch as work directs energy dissipation in the interests of some system. The maximum power principle of Lotka and Odum     implies an optimal energy efficiency for any work; optima are also finalities.    I advance a statement of the maximum entropy production principle, suggesting that most work of dissipative structures is carried out at rates entailing energy flows faster than those that would associate with maximum power. This is finalistic in the sense that the out-of-equilibrium universe, taken as an isolated system, entrains work in the interest of global thermodynamic equilibration.    I posit an evolutionary scenario, with a development on Earth from abiotic times, when promoting convective energy flows could be viewed as the important function of dissipative structures, to biotic times when the preservation of living dissipative structures was added to the teleology.    Dissipative structures are required by the equilibrating universe to enhance local energy gradient dissipation.","URL":"http://cosmosandhistory.org/index.php/journal/article/view/189","ISSN":"1832-9101","shortTitle":"Maximum Power and Maximum Entropy Production","language":"en","author":[{"family":"Salthe","given":"Stanley"}],"issued":{"date-parts":[["2010",11,9]]},"accessed":{"date-parts":[["2016",1,24]]}}},{"key":"http://zotero.org/users/39885/items/EDM9B5XD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EDM9B5XD","type":"webpage","title":"Secret report reveals toxic legacy of coal gasification trials near SE Queensland town","container-title":"ABC News","genre":"Text","abstract":"Hundreds of square kilometres of prime agricultural land in Queensland are at risk from a cocktail of toxic chemicals and explosive gases unleased by underground coal gasification, according to a secret State Government report.","URL":"http://www.abc.net.au/news/2015-08-10/linc-energy-secret-report-reveals-toxic-chemical-risk/6681740","language":"en-AU","author":[{"family":"Solomons","given":"the National Reporting Team's Mark"},{"family":"Willacy","given":"Mark"}],"issued":{"date-parts":[["2015",8,10]]},"accessed":{"date-parts":[["2015",10,13]]}}},{"key":"http://zotero.org/users/39885/items/EDP9NPV7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EDP9NPV7","type":"article-journal","title":"The entropy of water and third law of thermodynamics. The heat capacity of ice from 15 to 273K","container-title":"Journal of the American Chemical Society","page":"1144","volume":"58","abstract":"Not Available","URL":"http://adsabs.harvard.edu/abs/1936JAChS..58.1144G","call-number":"0031","author":[{"family":"Giauque","given":"W. F."},{"family":"Stout","given":"J. W."}],"issued":{"date-parts":[["1936"]]},"accessed":{"date-parts":[["2008",3,28]]}}},{"key":"http://zotero.org/users/39885/items/EF76K3RV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EF76K3RV","type":"book","title":"Food for the Seasons","publisher":"Black Dog Books","ISBN":"1-876372-11-7","call-number":"0000","author":[{"family":"Wong","given":"Lun"},{"family":"Knapsey","given":"Kath"}],"issued":{"date-parts":[["2004",1,1]]}}},{"key":"http://zotero.org/users/39885/items/EFMJK78A","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EFMJK78A","type":"article-journal","title":"Leibniz and the Vis Viva Controversy","container-title":"Isis","page":"21-35","volume":"62","issue":"1","source":"JSTOR","URL":"http://www.jstor.org/stable/228997","ISSN":"0021-1753","journalAbbreviation":"Isis","author":[{"family":"Iltis","given":"Carolyn"}],"issued":{"date-parts":[["1971"]]},"accessed":{"date-parts":[["2016",3,13]]}}},{"key":"http://zotero.org/users/39885/items/EFXTMNFD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EFXTMNFD","type":"paper-conference","title":"World3 in Modelica: Creating System Dynamics Models in the Modelica Framework","container-title":"Proc. 6th Interna-tional Modelica Conference","page":"393–400","source":"Google Scholar","shortTitle":"World3 in Modelica","author":[{"family":"Cellier","given":"F. E"}]}},{"key":"http://zotero.org/users/39885/items/EHGIRS7A","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EHGIRS7A","type":"article-journal","title":"Varieties of systems thinking: the case of soft systems methodology","container-title":"System dynamics review","page":"189–197","volume":"10","issue":"2-3","source":"Google Scholar","shortTitle":"Varieties of systems thinking","author":[{"family":"Checkland","given":"P.B."},{"family":"Haynes","given":"M.G."}],"issued":{"date-parts":[["1994"]]}}},{"key":"http://zotero.org/users/39885/items/EIITB8WD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EIITB8WD","type":"article-journal","title":"Kinetics of the binding of bilirubin to human serum albumin studied by stopped-flow technique","container-title":"Archives of Biochemistry and Biophysics","page":"282-289","volume":"184","issue":"1","abstract":"The binding of bilirubin to human serum albumin has been studied in stopped-flow measurements of the absorbance at 472 nm. The binding kinetics at 5.5 �C and pH 8.8 is described by a second-order rate constant of 1.6 � 107, -1, -1, and four first-order rate constants in five consecutive steps. The absorption spectrum of the short-lived complex initially formed has been determined in the range from 420 to 490 nm.","URL":"http://www.sciencedirect.com/science/article/B6WB5-4DYTNJ1-GC/2/109d712dd3328a0d7f78116ad8704305","DOI":"10.1016/0003-9861(77)90352-6","call-number":"0022","author":[{"family":"Ferch","given":"Thyge"},{"family":"Jacobsen","given":"Jorgen"}],"issued":{"date-parts":[["1977",11]]},"accessed":{"date-parts":[["2008",8,17]]}}},{"key":"http://zotero.org/users/39885/items/EITZICCZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EITZICCZ","type":"book","title":"General chemistry.","publisher":"Scientific American Books  ;Distributed by W.H. Freeman","publisher-place":"New York","edition":"2nd ed. /","event-place":"New York","ISBN":"978-0-7167-2234-2","author":[{"family":"Atkins","given":"P"}],"issued":{"date-parts":[["1992"]]}}},{"key":"http://zotero.org/users/39885/items/EK4398RG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EK4398RG","type":"chapter","title":"War, Peace, and the Computer: Simulation of Disordering and Ordering Energies in South Vietnam","container-title":"Ecosystem Modelling in Theory and Practice: An Introduction with Case Histories","publisher":"Wiley-Interscience","page":"684","ISBN":"0-471-34165-7","call-number":"0006","language":"English","author":[{"family":"Brown","given":"Mark T"}],"issued":{"date-parts":[["1977"]]}}},{"key":"http://zotero.org/users/39885/items/EKCHWSZB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EKCHWSZB","type":"book","title":"Lessons from developments of resource extraction industries in rural areas: a literature review report to the Gas Industry Social and Environmental Research Alliance (GISERA). June 2013","publisher":"CSIRO, Canberra","source":"Google Scholar","URL":"http://www.gisera.org.au/publications/tech_reports_papers/socioeco-proj-1-lit-review.pdf","shortTitle":"Lessons from developments of resource extraction industries in rural areas","author":[{"family":"Measham","given":"T."},{"family":"Fleming","given":"D."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/EM2HB777","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EM2HB777","type":"article-journal","title":"Towards Unified System Modeling with the ModelicaML UML Profile","container-title":"IN PROCEEDINGS OF THE 1ST INTERNATIONAL WORKSHOP ON EQUATION-BASED OBJECT-ORIENTED LANGUAGES AND TOOLS (EOOLT’07","page":"13--24","URL":"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.138.104","author":[{"family":"Pop","given":"Adrian"},{"family":"Akhvlediani","given":"David"},{"family":"Fritzson","given":"Peter"}],"issued":{"date-parts":[["2007"]]}}},{"key":"http://zotero.org/users/39885/items/EM4VMS4S","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EM4VMS4S","type":"chapter","title":"Chapter 8 - A Final Speculation about Ultimate Temperatures—A Fourth Law of Thermodynamics?","container-title":"Thermodynamics (Fourth Edition)","publisher":"Academic Press","publisher-place":"Boston","page":"407-408","source":"ScienceDirect","event-place":"Boston","abstract":"A lighthearted discussion of the question whether there is an upper limit to the temperature for physical processes.","URL":"http://www.sciencedirect.com/science/article/pii/B9780124167056000087","ISBN":"978-0-12-416705-6","author":[{"family":"Honig","given":"Jurgen M."}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2016",3,11]]}}},{"key":"http://zotero.org/users/39885/items/EMI87ATJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EMI87ATJ","type":"article-journal","title":"The critical conversion efficiency of light energy to hydrogen from photocatalytic water decomposition","container-title":"International Journal of Hydrogen Energy","volume":"In Press, Corrected Proof","abstract":"Abstracts The hydrogen production from photocatalytic water decomposition is one of the best approaches that convert solar energy to hydrogen energy. At present, the hydrogen production from photocatalytic water decomposition has a low efficiency. In order to determine a valuable hydrogen production process from photocatalytic water decomposition in the aspect of energy conversion, the concept of critical conversion efficiency of light energy is proposed in this paper. Critical conversion efficiency of light energy is defined as the conversion efficiency of light energy when the hydrogen energy output is equal to an equivalent energy input of the system. The criterion introduced is that only if the conversion efficiency of light energy is greater than the critical one, an energy profit can be achieved in a system. A hypothetical system with 20,000�tons annual hydrogen production by using Na2S/Na2SO3 as the sacrificial reagent is analyzed and calculated in this paper to determine the critical conversion efficiency of light energy by means of energy balance, cumulative exergy balance, and emergy balance, respectively. The results show that the critical conversion efficiency of light energy determined by emergy balance is the most reasonable, which gives the figure around 15%.","URL":"http://www.sciencedirect.com/science/article/B6V3F-4SNPPXV-4/1/76cd65037d06a6e76504bb82a719844c","DOI":"10.1016/j.ijhydene.2008.04.033","call-number":"0004","author":[{"family":"Feng","given":"Xiao"},{"family":"Mao","given":"Wenyi"},{"family":"Yan","given":"Wei"}],"issued":{"date-parts":[["2008",6,29]]},"accessed":{"date-parts":[["2008",6,29]]}}},{"key":"http://zotero.org/users/39885/items/ENDH6FNI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ENDH6FNI","type":"book","title":"Energy systems overview of the Amazon basin: Report to the Cousteau Society","publisher":"Center for Wetlands, University of Florida","call-number":"0076","shortTitle":"Energy systems overview of the Amazon basin","author":[{"family":"Odum","given":"Howard T"}],"issued":{"date-parts":[["1986"]]}}},{"key":"http://zotero.org/users/39885/items/EQJ9D275","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EQJ9D275","type":"book","title":"Simulation-Based Engineering of Complex Systems","publisher":"Wiley-Interscience","edition":"1","source":"Amazon.com","ISBN":"0-470-40129-X","author":[{"family":"Clymer","given":"John R."}],"issued":{"date-parts":[["2009",3,16]]}}},{"key":"http://zotero.org/users/39885/items/ESPM24PX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ESPM24PX","type":"article-journal","title":"Energy hierarchy and transformity in the universe","container-title":"Ecological Modelling","page":"17–28","volume":"178","issue":"1","source":"Google Scholar","URL":"http://www.sciencedirect.com/science/article/pii/S030438000300512X","author":[{"family":"Brown","given":"Mark T."},{"family":"Odum","given":"Howard T."},{"family":"Jorgensen","given":"S. E."}],"issued":{"date-parts":[["2004"]]},"accessed":{"date-parts":[["2015",11,4]]}}},{"key":"http://zotero.org/users/39885/items/ET25F8E4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ET25F8E4","type":"article-journal","title":"The A thermodynamic framework for ecologically conscious process systems engineering","container-title":"Computers and Chemical Engineering","page":"1767-1773","volume":"24","URL":"http://www.che.eng.ohio-state.edu/~bakshi/ecopseCACE.pdf","call-number":"0000","author":[{"family":"Bakshi","given":"B.R."}],"issued":{"date-parts":[["2000"]]},"accessed":{"date-parts":[["2008",3,25]]}}},{"key":"http://zotero.org/users/39885/items/ETT53VZF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ETT53VZF","type":"article-journal","title":"China and Universals","container-title":"Monumenta Serica","page":"287-314","volume":"53","issue":"1","source":"Taylor and Francis+NEJM","URL":"http://www.tandfonline.com/doi/abs/10.1179/mon.2005.53.1.009","DOI":"10.1179/mon.2005.53.1.009","ISSN":"0254-9948","author":[{"family":"Sypniewski","given":"Bernard Paul"}],"issued":{"date-parts":[["2005",12,1]]},"accessed":{"date-parts":[["2016",3,5]]}}},{"key":"http://zotero.org/users/39885/items/EUQ82X5H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EUQ82X5H","type":"article-journal","title":"Technocratic optimism, H. T. Odum, and the partial transformation of ecological metaphor after World War II","container-title":"Journal of the History of Biology","page":"213-244","volume":"21","issue":"2","URL":"http://dx.doi.org/10.1007/BF00146987","DOI":"10.1007/BF00146987","call-number":"0080","author":[{"family":"Taylor","given":"Peter J."}],"issued":{"date-parts":[["1988",6,1]]},"accessed":{"date-parts":[["2008",8,17]]}}},{"key":"http://zotero.org/users/39885/items/EV7B9HER","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EV7B9HER","type":"book","title":"SS Brotherhood of the Bell: The Nazis’ Incredible Secret Technology","publisher":"SCB Distributors","number-of-pages":"559","source":"Google Books","abstract":"In 1945, a mysterious Nazi secret weapons project code-named \"The Bell\" left its underground bunker in lower Silesia, along with all its project documentation, and a four-star SS general named Hans Kammler. Taken aboard a massive six engine Junkers 390 ultra-long range aircraft, \"The Bell,\" Kammler, and all project records disappeared completely, along with the gigantic airecraft. It is thought to have flown to America or Argentina. As a prelude to this disappearing act, the SS murdered most of the scientists and technicians involved with the project, a secret weapon that according to one German Nobel prize-winning physicist, was given a classification of \"decisive for the war,\" a security classification higher than any other secret weapons project in the Third Reich, including its atomic bomb. What was \"The Bell\"? What new physics might the Nazis have discovered with it? How far did the Nazis go after the war to protect the advanced energy technology that it represented? In The SS Brotherhood of The Bell, alternative science and history researcher Joseph P. Farrell reveals a range of exotic technologies the Nazis had researched, and challenges the conventional views of the end of World War Two, the Roswell incident, and the beginning of MAJIC-12, the government's alleged secret team of UFO investigators.","ISBN":"978-1-935487-60-9","shortTitle":"SS Brotherhood of the Bell","language":"en","author":[{"family":"Farrell","given":"Joseph P."}],"issued":{"date-parts":[["2011",6,1]]}}},{"key":"http://zotero.org/users/39885/items/EW47BD8E","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EW47BD8E","type":"book","title":"Application of Selected Industrial Engineering Techniques to Wastewater Treatment Plants","publisher":"United States Environmental Protection Agency","URL":"http://nepis.epa.gov/Exe/ZyPURL.cgi?Dockey=9100TFS3.txt","author":[{"family":"Mallory","given":"Charles W."}],"issued":{"date-parts":[["1973"]]}}},{"key":"http://zotero.org/users/39885/items/EX4BGMX9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EX4BGMX9","type":"article-journal","title":"Response to embodied energy and emergy analyses of a concentrating solar power (CSP) system (2012)","container-title":"Energy Policy","page":"424-426","volume":"60","source":"ScienceDirect","abstract":"While emergy analysis (i.e. emergy synthesis, environmental accounting) was developed in the early 1980s by H.T. Odum, building upon his seminal work outlining the energy basis for man and nature, the method is still developing. Some very important aspects of the method, such as the global baseline for renewable emergy and how the emergy yield ratio (EYR), a critical index for implicating the contribution of a process to society, is to be calculated are still under debate in the scientific community. This makes it all the more critical that when an emergy analysis is done all methodology is laid bare and justified. Unfortunately, Zhang et al. (2012. Energy Policy 42, pp 232–238) is deficient in doing so. In the response below I lay out the problems I observed in the paper and propose a revision to their analysis. I should note that no issues were found with the embodied energy portion of the analysis and the inconsistencies with accepted methodology were likely due to an unfamiliarity with the emergy method.","URL":"http://www.sciencedirect.com/science/article/pii/S0301421513003200","DOI":"10.1016/j.enpol.2013.04.067","ISSN":"0301-4215","journalAbbreviation":"Energy Policy","author":[{"family":"Campbell","given":"Elliott"}],"issued":{"date-parts":[["2013",9]]},"accessed":{"date-parts":[["2015",12,9]]}}},{"key":"http://zotero.org/users/39885/items/EXJQW353","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EXJQW353","type":"book","title":"The dialectical biologist","publisher":"Harvard University Press","publisher-place":"Cambridge, Mass","number-of-pages":"ix, 303","source":"UQ Library Search, Summon 2.0","event-place":"Cambridge, Mass","ISBN":"978-0-674-20281-8","call-number":"QH331 .L529 1985","language":"English","author":[{"family":"Levins","given":"Richard"},{"family":"Lewontin","given":"Richard C."}],"issued":{"date-parts":[["1985"]]}}},{"key":"http://zotero.org/users/39885/items/EZEUAZAG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/EZEUAZAG","type":"article","title":"The National Harmonised Regulatory Framework for Natural Gas from Coal Seams","publisher":"Australian Government","URL":"http://www.scer.gov.au/files/2013/09/National-Harmonised-Regulatory-Framework-for-Natural-Gas-from-Coal-Seams.pdf","author":[{"family":"SCER","given":"Standing Council on Energy and Resources"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/F36EIG7A","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/F36EIG7A","type":"webpage","title":"Environmental assessments and conditions","genre":"Collection","abstract":"Queensland CSG and LNG operators must be issued with an environmental authority (EA) before they can start work.","URL":"https://www.business.qld.gov.au/industry/csg-lng-industry/water-environmental-management-csg/environmental-assessments-conditions","language":"en-AU","author":[{"family":"DNRM","given":""}],"issued":{"date-parts":[["2012",2,6]]},"accessed":{"date-parts":[["2015",3,10]]}}},{"key":"http://zotero.org/users/39885/items/F3HRZSIC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/F3HRZSIC","type":"article-journal","title":"The maximum power principle predicts the outcomes of two-species competition experiments","container-title":"Oikos","page":"1329–1336","volume":"117","issue":"9","source":"Google Scholar","URL":"http://onlinelibrary.wiley.com/doi/10.1111/j.0030-1299.2008.16832.x/pdf","author":[{"family":"DeLong","given":"John P."}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2015",12,30]]}}},{"key":"http://zotero.org/users/39885/items/F4PMKDZI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/F4PMKDZI","type":"book","title":"Physics for JavaScript games, animation, and simulations: with HTML5 canvas","collection-title":"The expert's voice in Web development","publisher":"Apress","publisher-place":"Berkeley, CA","number-of-pages":"1 online resource (xxiv, 466 pages)","source":"UQ Library Search, Summon 2.0","event-place":"Berkeley, CA","abstract":"\"Have you ever wanted to include believable physical behaviors in your games and projects to give them that extra edge? Physics for JavaScript Games, Animation, and Simulations teaches you how to incorporate real physics, such as gravity, friction, and buoyancy, into your HTML5 games, animations, and simulations. It also includes more advanced topics, such as particle systems, which are essential for creating effects such as sparks or smoke. The book also addresses the key issue of balancing accuracy and simplicity in your games and simulations, and the final chapters provide you with the information and the code to make the right choice for your project. Physics for JavaScript Games, Animation, and Simulations assumes you have a basic knowledge of JavaScript and HTML5. However, no previous knowledge of physics is required - only some very basic math skills. The authors present everything from basic principles to advanced concepts in an approachable way, so you'll be able to follow the logic and easily adapt the principles to your own applications. The book is packed full of practical examples of how you can apply physics to your own games and applications. Spring behaviors can be used for anything from tweaking lowrider suspension to creating cloth simulation; flotation mechanics enable the simulation of submersibles or dirigibles; you can even create your own solar system with accurate orbits and gravity. It doesn't matter if you're modeling the Lorentz force in an electromagnetic field or you're modeling the lift force in a flight simulator, Physics for JavaScript Games, Animation, and Simulations enables you to fill your games and applications with accurate and realistic effects. What you'll learn: Learn all the basic math and physics you'll need to incorporate realism into your projects; Incorporate a wide range of forces, such as gravity, friction, and buoyancy; Build a number of realistic simulations; Model particle systems and use them to create visual effects; Create complex systems using rigid bodies and mass-spring systems; Deal with numerical subtleties, including accuracy and stability of integration schemes. This book is for JavaScript developers interested in incorporating real physics into their games, animations, simulations, or generative art projects.\" --","URL":"http://ezproxy.library.uq.edu.au/login?url=http://dx.doi.org/10.1007/978-1-4302-6338-8","ISBN":"1-4302-6338-5","call-number":"QC52","shortTitle":"Physics for JavaScript games, animation, and simulations","language":"English","author":[{"family":"Ramtal","given":"Dev"},{"family":"Dobre","given":"Adrian"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",11,10]]}}},{"key":"http://zotero.org/users/39885/items/F4UCA647","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/F4UCA647","type":"book","title":"General System Theory: Foundations, Development, Applications","publisher":"George Braziller Inc","edition":"Revised edition","source":"Amazon.com","ISBN":"0-8076-0453-4","shortTitle":"General System Theory","author":[{"family":"Bertalanffy","given":"Ludwig Von"}],"issued":{"date-parts":[["2003",12,1]]}}},{"key":"http://zotero.org/users/39885/items/F7NA9CTA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/F7NA9CTA","type":"book","title":"Leibnizens und Huygens' Briefwechsel mit Papin, nebst der Biographie Papin's und einigen Briefen ...","publisher":"Dr. Martin Sändig oHG","number-of-pages":"423","source":"Internet Archive","abstract":"Book digitized by Google from the library of Oxford University and uploaded to the Internet Archive by user tpb.","URL":"http://archive.org/details/leibnizensundhu00leibgoog","language":"German","author":[{"family":"Ernst Gerland","given":"Christiaan Huygens"}],"issued":{"date-parts":[["1881"]]},"accessed":{"date-parts":[["2016",1,16]]}}},{"key":"http://zotero.org/users/39885/items/F9R78QFB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/F9R78QFB","type":"article-journal","title":"Revisiting Odum (1956): A synthesis of aquatic ecosystem metabolism","container-title":"Limnol. Oceanogr","page":"2089–2100","volume":"58","issue":"6","source":"Google Scholar","URL":"https://faculty.newpaltz.edu/davidrichardson/files/Hoellein2013-LO-RevisitingOdumAquaticMetabolism.pdf","shortTitle":"Revisiting Odum (1956)","author":[{"family":"Hoellein","given":"Timothy J."},{"family":"Bruesewitz","given":"Denise A."},{"family":"Richardson","given":"David C."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2014",4,2]]}}},{"key":"http://zotero.org/users/39885/items/F9RFX7MS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/F9RFX7MS","type":"article","title":"Independent Review of Coal Seam Gas (CSG) Activities in NSW - Initial Report","publisher":"Chief Scientist NSW","URL":"http://www.chiefscientist.nsw.gov.au/__data/assets/pdf_file/0005/56912/140930-CSG-Final-Report.pdf","author":[{"family":"O'Kane","given":"Mary"}],"issued":{"date-parts":[["2013"]]}}},{"key":"http://zotero.org/users/39885/items/FBT2BI3E","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FBT2BI3E","type":"article-journal","title":"Is risk assessment the new clinical model in public mental health?","container-title":"Australasian Psychiatry","page":"541 - 544","volume":"21","issue":"6","source":"UQ Library Search, Summon 2.0","abstract":"Australian public mental health services have seen a rapid adoption of risk assessment into clinical practice over the past decade. It is timely to review the role of risk assessment in clinical practice, evidence for its validity and to explore its role in clinical decision-making. There is little evidence to support the current form of risk assessment used in public mental health. The continued focus in risk may lead public psychiatrists into a bind where their specialist role is defined by a capacity that they do not fully possess. Further work is required to find ways of demonstrating our attention to the possibility of adverse outcomes whilst maintaining our skills and capacity to manage mental illness with complexity and balance within the limitations of rational decision-making.","URL":"http://www.ncbi.nlm.nih.gov/pubmed/23897731","DOI":"10.1177/1039856213498288","ISSN":"1039-8562","language":"English","author":[{"family":"Holmes","given":"Alex"}],"issued":{"date-parts":[["2013",12]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/FCIPE7I5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FCIPE7I5","type":"article-journal","title":"A unifying neuro-fasciagenic model of somatic dysfunction – Underlying mechanisms and treatment – Part II","container-title":"Journal of Bodywork and Movement Therapies","page":"526-543","volume":"19","issue":"3","source":"ScienceDirect","abstract":"Summary\nThis paper offers an extensive review of the main fascia-mediated mechanisms underlying various therapeutic processes of clinical relevance for manual therapy. The concept of somatic dysfunction is revisited in light of the several fascial influences that may come into play during and after manual treatment. A change in perspective is thus proposed: from a nociceptive model that for decades has viewed somatic dysfunction as a neurologically-mediated phenomenon, to a unifying neuro-fascial model that integrates neural influences into a multifactorial and multidimensional interpretation of manual therapeutic effects as being partially, if not entirely, mediated by the fascia. By taking into consideration a wide spectrum of fascia-related factors – from cell-based mechanisms to cognitive and behavioural influences – a model emerges suggesting, amongst other results, a multidisciplinary-approach to the intervention of somatic dysfunction. Finally, it is proposed that a sixth osteopathic ‘meta-model’ – the connective tissue-fascial model – be added to the existing five models in osteopathic philosophy as the main interface between all body systems, thus providing a structural and functional framework for the body's homoeostatic potential and its inherent abilities to heal.","URL":"http://www.sciencedirect.com/science/article/pii/S136085921500056X","DOI":"10.1016/j.jbmt.2015.03.002","ISSN":"1360-8592","journalAbbreviation":"Journal of Bodywork and Movement Therapies","author":[{"family":"Tozzi","given":"Paolo"}],"issued":{"date-parts":[["2015",7]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/FF47TSRI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FF47TSRI","type":"article-journal","title":"MES (multi-energy systems): An overview of concepts and evaluation models","container-title":"Energy","page":"1-17","volume":"65","source":"ScienceDirect","abstract":"MES (multi-energy systems) whereby electricity, heat, cooling, fuels, transport, and so on optimally interact with each other at various levels (for instance, within a district, city or region) represent an important opportunity to increase technical, economic and environmental performance relative to “classical” energy systems whose sectors are treated “separately” or “independently”. This performance improvement can take place at both the operational and the planning stage. While such systems and in particular systems with distributed generation of multiple energy vectors (DMG (distributed multi-generation)) can be a key option to decarbonize the energy sector, the approaches needed to model and relevant tools to analyze them are often of great complexity. Likewise, it is not straightforward to identify performance metrics that are capable to properly capture costs and benefits that are relating to various types of MES according to different criteria. The aim of this invited paper is thus to provide the reader with a comprehensive and critical overview of the latest models and assessment techniques that are currently available to analyze MES and in particular DMG systems, including for instance concepts such as energy hubs, microgrids, and VPPs (virtual power plants), as well as various approaches and criteria for energy, environmental, and techno-economic assessment.","URL":"http://www.sciencedirect.com/science/article/pii/S0360544213008931","DOI":"10.1016/j.energy.2013.10.041","ISSN":"0360-5442","shortTitle":"MES (multi-energy systems)","journalAbbreviation":"Energy","author":[{"family":"Mancarella","given":"Pierluigi"}],"issued":{"date-parts":[["2014",2,1]]},"accessed":{"date-parts":[["2015",12,15]]}}},{"key":"http://zotero.org/users/39885/items/FF9H77HP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FF9H77HP","type":"book","title":"The Concept of Law","publisher":"Oxford University Press, USA","edition":"2","source":"Amazon.com","ISBN":"0-19-876123-6","call-number":"6896","author":[{"family":"Hart","given":"H. L. A."}],"issued":{"date-parts":[["1961"]]}}},{"key":"http://zotero.org/users/39885/items/FG8XHPED","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FG8XHPED","type":"article-journal","title":"Modelling EROEI and net energy in the exploitation of non renewable resources","container-title":"Ecological Modelling","collection-title":"Can We Break the Addiction to Fossil Energy? Special Issue, 7th Biennial International Workshop “Advances in Energy Studies”, Barcelona, Spain, 19-21 October 2010","page":"54-58","volume":"223","issue":"1","source":"ScienceDirect","abstract":"Recently, Bardi and Lavacchi (2009) showed that a simple system of coupled differential equations can be used for a quantitative description of the exploitation of non renewable resources in a free market economy. The present paper examines how the model describes the behavior of the system in terms of energy return for energy invested (EROEI) and net energy (energy returned minus energy expended). We show that the model generates a behavior of these factors comparable to the results obtained by other methods, for instance for the case of crude oil production in the US.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380011003012","DOI":"10.1016/j.ecolmodel.2011.05.021","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Bardi","given":"Ugo"},{"family":"Lavacchi","given":"Alessandro"},{"family":"Yaxley","given":"Leigh"}],"issued":{"date-parts":[["2011",12,24]]},"accessed":{"date-parts":[["2015",2,4]]}}},{"key":"http://zotero.org/users/39885/items/FGA3JEMU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FGA3JEMU","type":"article-journal","title":"Simulation of oxygen utilization in storage-treatment plant system","container-title":"The Use of analog and digital computers in hydrology: L'utilisation des calculatrices analogiques et des ordinateurs en hydrologie","page":"661","volume":"2","source":"Google Scholar","author":[{"family":"Phillips","given":"J.C."},{"family":"Quimpo","given":"R.G."},{"family":"Miller","given":"J.P."}],"issued":{"date-parts":[["1969"]]}}},{"key":"http://zotero.org/users/39885/items/FGI72XID","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FGI72XID","type":"webpage","title":"Water entitlements - Data | Queensland Government","abstract":"Information about water licences across Queensland","URL":"https://data.qld.gov.au/dataset/water-entitlements","author":[{"literal":"DNRM"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,13]]}}},{"key":"http://zotero.org/users/39885/items/FHEHVBA4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FHEHVBA4","type":"article-journal","title":"Time's speed regulator: the optimum efficiency for maximum power output in physical and biological systems","container-title":"American Scientist","page":"331-343","volume":"43","issue":"2","source":"JSTOR","URL":"http://www.jstor.org/stable/27826618","ISSN":"0003-0996","shortTitle":"Time's speed regulator","journalAbbreviation":"American Scientist","author":[{"family":"Odum","given":"HOWARD T."},{"family":"Pinkerton","given":"R. C."}],"issued":{"date-parts":[["1955",4,1]]},"accessed":{"date-parts":[["2015",2,7]]}}},{"key":"http://zotero.org/users/39885/items/FJ9K4HUK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FJ9K4HUK","type":"article-journal","title":"Review of Leibniz: Sämtliche Schuften und Briefe. Reihe I: Allgemeiner, politischer und historischer Briefwechsel, Supplementband Harzbergbau 1692-1696","container-title":"Studia Leibnitiana","page":"221-223","volume":"24","issue":"2","source":"JSTOR","URL":"http://www.jstor.org/stable/40694219","ISSN":"0039-3185","shortTitle":"Review of Leibniz","journalAbbreviation":"Studia Leibnitiana","author":[{"family":"Parkinson","given":"G. H. R."}],"issued":{"date-parts":[["1992"]]},"accessed":{"date-parts":[["2016",1,11]]}}},{"key":"http://zotero.org/users/39885/items/FJD6HG9X","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FJD6HG9X","type":"report","title":"Advanced Energetics for Aeronautical Applications. Volume II","source":"NASA NTRS","abstract":"NASA has identified water vapor emission into the upper atmosphere from commercial transport aircraft, particularly as it relates to the formation of persistent contrails, as a potential environmental problem. Since 1999, MSE has been working with NASA-LaRC to investigate the concept of a transport-size emissionless aircraft fueled with liquid hydrogen combined with other possible breakthrough technologies. The goal of the project is to significantly advance air transportation in the next decade and beyond. The power and propulsion  system currently being studied would be based on hydrogen fuel cells  powering electric motors, which drive fans for propulsion. The liquid water reaction product is retained onboard the aircraft until a flight mission is completed. As of now, NASA-LaRC and MSE have identified P/P system components that, according to the high-level analysis conducted to date, are light enough to make the emissionless aircraft concept feasible. Calculated maximum aircraft ranges  and other performance predictions are included in this report. This report also includes current information on advanced energy-related technologies, which are still being researched, as well as breakthrough physics concepts that may be applicable for advanced energetics and aerospace propulsion in the future.","URL":"http://ntrs.nasa.gov/search.jsp?R=20050170447","author":[{"family":"Alexander","given":"David S."}],"issued":{"date-parts":[["2005",4,1]]},"accessed":{"date-parts":[["2016",1,9]]}}},{"key":"http://zotero.org/users/39885/items/FKS2VZA5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FKS2VZA5","type":"book","title":"Guidelines for Quantitative Risk Assessment: \"Purple Book \"","publisher":"Directorate-General for Social Affairs and Employment","publisher-place":"Den Haag","source":"Amazon.com","event-place":"Den Haag","URL":"http://infonorma.gencat.cat/pdf/AG_AQR_3_PB_%202005.pdf","ISBN":"978-90-12-08796-4","shortTitle":"Guidelines for Quantitative Risk Assessment","language":"English","author":[{"family":"Stoffen","given":"Netherlands Commissie Preventie van Rampen door Gevaarlijke"}],"issued":{"date-parts":[["2005"]]},"accessed":{"date-parts":[["2015",3,13]]}}},{"key":"http://zotero.org/users/39885/items/FMBRW276","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FMBRW276","type":"article-journal","title":"Beyond accuracy:  What data quality means to data consumers","container-title":"Journal of Management Information Systems","volume":"12","issue":"4","URL":"http://w3.cyu.edu.tw/ccwei/PAPER/ERP/data%20quality(JMIS).pdf","author":[{"family":"Wang","given":"R"},{"family":"Strong","given":"D"}],"accessed":{"date-parts":[["2011",7,6]]}}},{"key":"http://zotero.org/users/39885/items/FMVVENQV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FMVVENQV","type":"book","title":"Handbook in Monte Carlo Simulation: Applications in Financial Engineering, Risk Management, and Economics","publisher":"Wiley","publisher-place":"Hoboken, New Jersey","number-of-pages":"688","edition":"1 edition","source":"Amazon","event-place":"Hoboken, New Jersey","ISBN":"978-0-470-53111-2","shortTitle":"Handbook in Monte Carlo Simulation","language":"English","author":[{"family":"Brandimarte","given":"Paolo"}],"issued":{"date-parts":[["2014",5,5]]}}},{"key":"http://zotero.org/users/39885/items/FP3G4H76","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FP3G4H76","type":"article-journal","title":"Ecology and Ideology in the General Systems Community","container-title":"Environment and History","page":"197-207","volume":"3","issue":"2","source":"IngentaConnect","abstract":"This paper gives an account of the participatory, democratic and pluralistic perspectives of Boulding and other important figures in the General Systems Community (GSC). It contrasts their perspectives with the technocratic approach of H.T. Odum, as analysed in particular by Peter Taylor. It argues that GSC's concern with systems in relation to their environment is more complex than simply mediated energy, information or currency flows crossing the boundaries of Odum's systems. This ensures there is no privileged place for an outside observer/manipulator of the GSC system; in fact, the analyst is often part of the GSC system. Moreover, the interactions within GSC systems are not reduced to a simple metric, such as Odum's energy currency.","DOI":"10.3197/096734097779555926","journalAbbreviation":"Environment and History","author":[{"family":"Hammond","given":"Debora"}],"issued":{"date-parts":[["1997",6,1]]}}},{"key":"http://zotero.org/users/39885/items/FP8BCDXP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FP8BCDXP","type":"thesis","title":"Energy analysis of watersheds","publisher":"University of Florida","publisher-place":"United States -- Florida","event-place":"United States -- Florida","abstract":"This research uses a new approach to study the organization of watersheds and to provide insight for their management. It evaluates work done by water energies on the landscape and explores an hypothesis that \"self organizing watersheds couple the geopotential and chemical potential energy use to maximize biological and geological production\". Work of water in the mountains was measured by the geopotential energy use and related to work on terrestrial productivity of valleys measured by the chemical potential energy evapotranspired. Using data on rainfall and river flow data and topographic geographic information, spatial and temporal energy analysis and sc EMERGY evaluations were performed for six Brazilian watersheds of the Ribeira de Iguape River basin, and for the Coweeta River basin in North Carolina. sc EMERGY is the energy of one kind used directly and indirectly to make a product or service. Maps and graphs included.                 Evaluations revealed two typical watershed shapes--bowl-shaped and plateau basins. Bowl-shaped basins optimized the use of the water energies, with a ratio of chemical potential energy used to geopotential energy used between 1.3 and 1.5. This ratio was 0.4 to 0.6 for the plateau basins. The geopotential energy use per area and the empower densities for the bowl-shaped basins were maximum at middle elevations, coinciding with cited zones of maximum native biodiversity.                 sc EMERGY of the river waters accumulated through the river network enabled the pulsed delivery of residual geopotential energy, nutrients and sediments to have a large effect on lowland productivity, measured by the high transformities of about 2E6 solar emjoules per joule. About half of the rain chemical potential energy was transferred to estuaries dowstream. From headwaters to delta, transformities of chemical potential energy ranged from 2E4 to 6E4 solar emjoules per joule.                 A computer model simulated changes in the valley productivity due to construction of one or more small dams. Dams reduced flood pulses and decreased floodplain productivity by 15 to 26%. Multiple small dams minimized the impacts.","URL":"http://search.proquest.com/docview/304349621?accountid=13552","note":"Ph.D.; University of Florida","author":[{"family":"Romitelli","given":"Maria Silvia"}],"issued":{"date-parts":[["1997"]]}}},{"key":"http://zotero.org/users/39885/items/FQNN6KTB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FQNN6KTB","type":"book","title":"Handbook of Dynamic System Modeling (Cpaman \\& Hall/Crc Computer and Information Science)","publisher":"Chapman \\& Hall/CRC","source":"ACM","URL":"http://portal.acm.org/citation.cfm?id=1296134","ISBN":"1-58488-565-3","call-number":"0003","author":[{"family":"Fishwick","given":"Paul A."}],"issued":{"date-parts":[["2007"]]},"accessed":{"date-parts":[["2010",5,29]]}}},{"key":"http://zotero.org/users/39885/items/FSFW464M","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FSFW464M","type":"article","title":"ModelicaML: Getting Started","publisher":"EADS Innovation Works","author":[{"family":"Schamai","given":"Wladimir"}],"issued":{"date-parts":[["2010"]]},"accessed":{"date-parts":[["2010",5,25]]}}},{"key":"http://zotero.org/users/39885/items/FSW742G4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FSW742G4","type":"article-journal","title":"Energetic basis of brain activity: implications for neuroimaging","container-title":"Trends in Neurosciences","page":"489-495","volume":"27","issue":"8","abstract":"The complex activities of the brain need not distract us from the certainty that it uses energy and performs work very efficiently. The human brain, which claims ~2% of our body mass, is responsible for ~20% of our body oxygen consumption. In vivo magnetic resonance spectroscopy (MRS) follows the metabolic pathways of energy production (as glucose oxidation) and work (as monitored by the cycling of glutamate and GABA neurotransmitters). In the resting awake state, ~80% of energy used by the brain supports events associated with neuronal firing and cycling of GABA and glutamate neurotransmitters. Small differences in neuronal activity between stimulation and control conditions can be measured and localized using functional magnetic resonance imaging (fMRI). MRS and fMRI experiments show that the majority of cerebral activity, which is often disregarded in imaging experiments, is ongoing even when the brain appears to be doing nothing.","URL":"http://www.sciencedirect.com/science/article/B6T0V-4CPM210-1/1/f50a65991a54750ffad57d5a3ac50229","DOI":"10.1016/j.tins.2004.06.005","call-number":"0125","shortTitle":"Energetic basis of brain activity","author":[{"family":"Shulman","given":"Robert G."},{"family":"Rothman","given":"Douglas L."},{"family":"Behar","given":"Kevin L."},{"family":"Hyder","given":"Fahmeed"}],"issued":{"date-parts":[["2004",8,1]]},"accessed":{"date-parts":[["2008",5,13]]}}},{"key":"http://zotero.org/users/39885/items/FT6JI3KG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FT6JI3KG","type":"thesis","title":"Emergy evaluation of water","publisher":"University of Florida","publisher-place":"United States -- Florida","event-place":"United States -- Florida","abstract":"To better understand the values of water within different contexts and spatial scales, the emergy inputs to water were evaluated and compared at four scales: (1) global, (2) regional (the state of Florida), (3) local (water supply utilities), and (4) small-scale (home water purification). Emergy (spelled with an \"m\") represents all the previous work of one kind required to generate a product or provide a service.                 Since water can be found at all stages of the global hierarchy of biogeochemical processes, it has many emergy values and transformities. Transformities of water indicate the convergence of energy and materials that are required to produce the water. Global water storages were evaluated using the total emergy driving the geobiochemical processes of the biosphere and storage turnover times. Transformities for these water storages varied between 3.54 E3 sej/J (water vapor) and 1.05 E6 sej/J (glaciers). Calculated transformities for global water flows ranged from 3.96 E3 sej/J (precipitation) to 9.55 E5 sej/J (ice melt).                 Regional transformities of water resources reflected specific conditions of the landscape. The mean transformities for water in estuaries, rivers, lakes, wetlands and deep groundwater storages in Florida were calculated at 3.19 E4, 4.26 E4, 5.64 E4, 7.09 E4 and 1.66 E5 sej/J, respectively.                 Eight local water supply utilities in Florida were evaluated to determine the emergy cost of producing potable water. Potable water transformities ranged from 1.39 E5 (West Palm Beach plant) to 1.39 E6 (Stock Island reverse osmosis plant). Five home water purification processes were evaluated to compare the emergy costs of producing potable water just for drinking, yielding transformities between 5.19 E6 (filtered water) and 3.16 E7 sej/J (bottled water).                 To test theories of the appropriate use of water to maximize economic vitality, a computer model of a generalized regional production function was simulated. Using Florida as a case study, maximum total production occurred when the economic/urban sector, the agricultural sector, and the environment received approximately 25, 30, and 45%, respectively, of the fresh water remaining after evapotranspiration.                 Since the calculated transformities for potable water are equivalent in magnitude to gasoline and electricity, the use of potable water should correspond with its high value. Therefore, measures need to be taken at local and regional levels to use potable water more appropriately.","URL":"http://search.proquest.com/docview/304692621?accountid=13552","note":"Ph.D.; University of Florida","author":[{"family":"Buenfil","given":"Andres A"}],"issued":{"date-parts":[["2001"]]}}},{"key":"http://zotero.org/users/39885/items/FTJ8P9VC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FTJ8P9VC","type":"article-journal","title":"Trophic Structure and Productivity of a Windward Coral Reef Community on Eniwetok Atoll","container-title":"Ecological Monographs","page":"291-320","volume":"25","issue":"3","call-number":"0508","author":[{"family":"Odum","given":"H. T."},{"family":"Odum","given":"E. P."}],"issued":{"date-parts":[["1955"]]}}},{"key":"http://zotero.org/users/39885/items/FTSD8UGW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FTSD8UGW","type":"book","title":"The Hunt for Zero Point: Inside the Classified World of Antigravity Technology","publisher":"Crown/Archetype","number-of-pages":"305","source":"Google Books","abstract":"This riveting work of investigative reporting and history exposes classified government projects to build gravity-defying aircraft--which have an uncanny resemblance to flying saucers.The atomic bomb was not the only project to occupy government scientists in the 1940s. Antigravity technology, originally spearheaded by scientists in Nazi Germany, was another high priority, one that still may be in effect today. Now for the first time, a reporter with an unprecedented access to key sources in the intelligence and military communities reveals suppressed evidence that tells the story of a quest for a discovery that could prove as powerful as the A-bomb.The Hunt for Zero Point explores the scientific speculation that a \"zero point\" of gravity exists in the universe and can be replicated here on Earth. The pressure to be the first nation to harness gravity is immense, as it means having the ability to build military planes of unlimited speed and range, along with the most deadly weaponry the world has ever seen. The ideal shape for a gravity-defying vehicle happens to be a perfect disk, making antigravity tests a possible explanation for the numerous UFO sightings of the past 50 years.Chronicling the origins of antigravity research in the world's most advanced research facility, which was operated by the Third Reich during World War II, The Hunt for Zero Point traces U.S. involvement in the project, beginning with the recruitment of former Nazi scientists after the war. Drawn from interviews with those involved with the research and who visited labs in Europe and the United States, The Hunt for Zero Point journeys to the heart of the twentieth century's most puzzling unexplained phenomena.From the Hardcover edition.","ISBN":"978-0-307-41943-9","shortTitle":"The Hunt for Zero Point","language":"en","author":[{"family":"Cook","given":"Nick"}],"issued":{"date-parts":[["2007",12,18]]}}},{"key":"http://zotero.org/users/39885/items/FUWQZDQ6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FUWQZDQ6","type":"book","title":"Biofeedback and somatics : toward personal evolution","publisher":"Freeperson Press","publisher-place":"Novato  Calif.","edition":"1st ed.","event-place":"Novato  Calif.","ISBN":"978-0-918236-06-7","call-number":"0013","author":[{"family":"Criswell","given":"Eleanor"}],"issued":{"date-parts":[["1995"]]}}},{"key":"http://zotero.org/users/39885/items/FXT43ZBZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FXT43ZBZ","type":"article-journal","title":"The Earth is not yet an artifact","container-title":"Technology and Society Magazine, IEEE","page":"25-28","volume":"19","issue":"4","abstract":"Responds to B. Allenby (see ibid., p.10-24) who argues the case for Earth systems engineering and management (ESEM). In advocating ESEM, Allenby stresses the extent of human transformation of the environment, arguing that the Earth has become a human artifact. He implies that, if the world is an artifact, then it is naive to try to maintain a landscape in its natural state, and naive to practice stewardship. I argue that while one may accept that artificiality demands active management, one ought to reject the claim that the world is now artificial. We should learn to control our environmental imprint before embarking on active planetary management","DOI":"10.1109/44.890079","ISSN":"0278-0097","call-number":"0000","journalAbbreviation":"Technology and Society Magazine, IEEE","author":[{"family":"Keith","given":"D.W."}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/FZ5AKAB6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/FZ5AKAB6","type":"article-journal","title":"Site-Specific Applications of Probabilistic Health Risk Assessment: Review of the Literature Since 2000","container-title":"Risk Analysis","page":"635-658","volume":"27","issue":"3","source":"Wiley Online Library","abstract":"Whether and to what extent contaminated sites harm ecologic and human health are topics of considerable interest, but also considerable uncertainty. Several federal and state agencies have approved the use of some or many aspects of probabilistic risk assessment (PRA), but its site-specific application has often been limited to high-profile sites and large projects. Nonetheless, times are changing: newly developed software tools, and recent federal and state guidance documents formalizing PRA procedures, now make PRA a readily available method of analysis for even small-scale projects. This article presents and discusses a broad review of PRA literature published since 2000.3","URL":"http://onlinelibrary.wiley.com/doi/10.1111/j.1539-6924.2007.00890.x/abstract","DOI":"10.1111/j.1539-6924.2007.00890.x","ISSN":"1539-6924","shortTitle":"Site-Specific Applications of Probabilistic Health Risk Assessment","language":"en","author":[{"family":"Lester","given":"Richard R."},{"family":"Green","given":"Laura C."},{"family":"Linkov","given":"Igor"}],"issued":{"date-parts":[["2007",6,1]]},"accessed":{"date-parts":[["2015",8,26]]}}},{"key":"http://zotero.org/users/39885/items/G3H3UP3F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/G3H3UP3F","type":"chapter","title":"Specimen dynamicum","container-title":"Philosophical Papers and Letters","publisher":"Springer","page":"435–452","source":"Google Scholar","URL":"http://link.springer.com/chapter/10.1007/978-94-010-1426-7_47","author":[{"family":"Leibniz","given":"Gottfried Wilhelm"}],"issued":{"date-parts":[["1989"]]},"accessed":{"date-parts":[["2015",12,31]]}}},{"key":"http://zotero.org/users/39885/items/G4JMZVD7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/G4JMZVD7","type":"paper-conference","title":"Survey of Model-Based Systems Engineering (MBSE) Methodologies","container-title":"INCOSE MBSE Focus Group","publisher":"California Institute of Technology","publisher-place":"Jet Propulsion Laboratory","event-place":"Jet Propulsion Laboratory","URL":"http://docs.google.com/viewer?a=v&q=cache:7qhBduQul1MJ:www.omgsysml.org/MBSE_Methodology_Survey_RevA.pdf+Model+based+systems+engineering&hl=en&gl=au&pid=bl&srcid=ADGEESgc34NK2ZJWYxFM32lSFkvv-YJQ9VJe2olCSh6fHCwGudBy2-LyenG4HUEnpS51O5tmtFgJZkgbn36MQgec2bcpbR1qSnXw4SFs6KpnBq6SftbG2She2acfq71REBlF5O9dK9SI&sig=AHIEtbQ1-TRDHKVwkLRkUjCiA5M6dZj5ww","author":[{"family":"Estefan","given":"Jeffrey"}],"issued":{"date-parts":[["2007"]]},"accessed":{"date-parts":[["2011",3,19]]}}},{"key":"http://zotero.org/users/39885/items/G5GH92SS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/G5GH92SS","type":"article-journal","title":"Emergy analysis of cassava-based fuel ethanol in China","container-title":"Biomass and Bioenergy","volume":"In Press, Corrected Proof","source":"ScienceDirect","abstract":"Emergy analysis considers both energy quality and energy used in the past, and compensates for the inability of money to value non-market inputs in an objective manner. Its common unit allows all resources to be compared on a fair basis. As feedstock for fuel ethanol, cassava has some advantages over other feedstocks. The production system of cassava-based fuel ethanol (CFE) was evaluated by emergy analysis. The emergy indices for the system of cassava-based fuel ethanol (CFE) are as follows: transformity is 1.10 E + 5 sej/J, EYR is 1.07, ELR is 2.55, RER is 0.28, and ESI is 0.42. Compared with the emergy indices of wheat ethanol and corn ethanol, CFE is the most sustainable. CFE is a good alternative to substitute for oil in China. Non-renewable purchased emergy accounts for 71.15% of the whole input emergy. The dependence on non-renewable energy increases environmental degradation, making the system less sustainable relative to systems more dependent on renewable energies. For sustainable development, it is vital to reduce the consumption of non-renewable energy in the production of CFE.","URL":"http://www.sciencedirect.com.ezproxy.lib.rmit.edu.au/science/article/B6V22-51N7C78-2/2/8010ad21b4f455ae10e1f1ae4ea8b8d4","DOI":"10.1016/j.biombioe.2010.10.027","ISSN":"0961-9534","author":[{"family":"Yang","given":"Hui"},{"family":"Chen","given":"Li"},{"family":"Yan","given":"Zongcheng"},{"family":"Wang","given":"Honglin"}],"accessed":{"date-parts":[["2010",12,14]]}}},{"key":"http://zotero.org/users/39885/items/G6QN8SZN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/G6QN8SZN","type":"book","title":"Ecopsychology, phenomenology, and the environment: the experience of nature","publisher":"Springer","publisher-place":"New York","number-of-pages":"1 online resource.","source":"UQ Library Search, Summon 2.0","event-place":"New York","abstract":"Explores environmental issues through wilderness retreats, naturalist's forest walks and organic gardening Identifies new foundations for environmental ethics that promote sustainability Finds commonalities between Eastern and Western psychological and contemplative traditions","URL":"http://ezproxy.library.uq.edu.au/login?url=http://dx.doi.org/10.1007/978-1-4614-9619-9","ISBN":"978-1-4614-9619-9","call-number":"BF353.5.N37","shortTitle":"Ecopsychology, phenomenology, and the environment","language":"English","author":[{"family":"Vakoch","given":"Douglas A."},{"family":"Castrillón","given":"Fernando"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2016",2,29]]}}},{"key":"http://zotero.org/users/39885/items/G76GK37Z","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/G76GK37Z","type":"report","title":"Risk of energy production","publisher":"Atomic Energy Control Board, Ottawa, Ontario (Canada)","source":"inis.iaea.org","URL":"http://inis.iaea.org/Search/search.aspx?orig_q=RN:11528032","author":[{"family":"Inhaber","given":"Herbert"}],"issued":{"date-parts":[["1978"]]},"accessed":{"date-parts":[["2015",1,27]]}}},{"key":"http://zotero.org/users/39885/items/G7JWWAQN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/G7JWWAQN","type":"book","title":"Basic Mathematics for Biochemists","publisher":"Oxford University Press, USA","edition":"2","ISBN":"0-19-850216-8","call-number":"0013","author":[{"family":"Cornish-Bowden","given":"Athel"}],"issued":{"date-parts":[["2000",2,10]]}}},{"key":"http://zotero.org/users/39885/items/G7X2SHZC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/G7X2SHZC","type":"book","title":"Electric circuits fundamentals","publisher":"Pearson/Prentice Hall","publisher-place":"Upper Saddle River  N.J.","edition":"6th ed.","event-place":"Upper Saddle River  N.J.","ISBN":"978-0-13-111139-4","author":[{"family":"Floyd","given":"Thomas"}],"issued":{"date-parts":[["2003"]]}}},{"key":"http://zotero.org/users/39885/items/G8TKPDT5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/G8TKPDT5","type":"article-journal","title":"Leading the Way to the Promised Land","container-title":"Acta Cientifica","page":"155-158","volume":"6","issue":"1-3","call-number":"0002","author":[{"family":"Odum","given":"Howard T"}],"issued":{"date-parts":[["1992"]]}}},{"key":"http://zotero.org/users/39885/items/G92HFUC7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/G92HFUC7","type":"book","title":"The complete idiot's guide to Microsoft Excel 2000","publisher":"Que","publisher-place":"Indianapolis  Ind.","event-place":"Indianapolis  Ind.","ISBN":"978-0-7897-1868-6","author":[{"family":"Kinkoph","given":"Sherry"}],"issued":{"date-parts":[["1999"]]}}},{"key":"http://zotero.org/users/39885/items/GBXIC6ZT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GBXIC6ZT","type":"article-journal","title":"Zooming the macroscope: medium-resolution remote sensing as a framework for the assessment of a small-scale fishery","container-title":"ICES Journal of Marine Science: Journal du Conseil","page":"696 -706","volume":"68","issue":"4","source":"Highwire 2.0","abstract":"Amoroso, R. O., Parma, A. M., Orensanz, J. M., and Gagliardini, D. A. 2011. Zooming the macroscope: medium-resolution remote sensing as a framework for the assessment of a small-scale fishery. – ICES Journal of Marine Science, 68: 696–706.\n\nManagement of small-scale fisheries targeting sedentary stocks requires integration of information about processes operating and observable at different spatial and temporal scales. An integrated approach was developed with a scallop (Aequipecten tehuelchus) fishery in a small, semi-enclosed Patagonian basin as a demonstration case. Medium-resolution (30 m2) satellite (Landsat) data, used to identify circulation patterns, were combined with information from fishery surveys and recruitment experiments to link oceanographic processes with population dynamics. A frontal system splits San José Gulf (northern Argentine Patagonia) into two oceanographic domains (East and West) with distinct hydrographic regimes. In the West Domain, where circulation is highly advective and governed by turbulent vorticial fluxes, larval settlement on artificial collectors was insignificant over five reproductive seasons and no important scallop grounds were ever found. In the East Domain, where the main fishing grounds are, spat abundance varied between sites and years, but was always significant. Growth rates displayed strong clinal variation within the East Domain, decreasing clockwise away from the entrance to the Gulf and reflecting inferred circulation and gradual nutrient extinction. A physical mechanism capable of dispersing larvae over long distances towards the north, into the adjacent San Matias Gulf, was identified from Landsat images. The large-scale patterns of variation in growth, distribution, and recruitment of the Tehuelche scallop stock could not have been interpreted without an integrative approach to data assemblage and analysis, including satellite remote sensing.","URL":"http://icesjms.oxfordjournals.org/content/68/4/696.abstract","DOI":"10.1093/icesjms/fsq162","shortTitle":"Zooming the macroscope","author":[{"family":"Amoroso","given":"Ricardo O."},{"family":"Parma","given":"Ana M."},{"family":"Orensanz","given":"J. M. (Lobo)"},{"family":"Gagliardini","given":"Domingo A."}],"issued":{"date-parts":[["2011",3,1]]},"accessed":{"date-parts":[["2011",8,28]]}}},{"key":"http://zotero.org/users/39885/items/GC6FR2N4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GC6FR2N4","type":"chapter","title":"Energy Circuit Language and Energy Transformation in Asymptotic Growth","container-title":"Unity Through Diversity: A Festschrift for Ludwig Von Bertalanffy","publisher":"Gordon and Breach Science Publishers","publisher-place":"New York","event-place":"New York","call-number":"0008","author":[{"family":"Odum","given":"HT"}],"issued":{"date-parts":[["1973"]]}}},{"key":"http://zotero.org/users/39885/items/GFW5GNFT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GFW5GNFT","type":"book","title":"Dune","publisher":"Ace","edition":"25 Anv","ISBN":"0-441-17271-7","call-number":"0237","author":[{"family":"Herbert","given":"Frank"}],"issued":{"date-parts":[["1990",9,1]]}}},{"key":"http://zotero.org/users/39885/items/GGKK9FIA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GGKK9FIA","type":"book","title":"Review of Digital Globes 2015","source":"Google Scholar","URL":"http://www.crcsi.com.au/assets/Resources/Globe-review-paper-March-2015.pdf","author":[{"family":"Keysers","given":"Jessica"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/GHCW3QGR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GHCW3QGR","type":"article-journal","title":"CHEMICAL CYCLES WITH ENERGY CIRCUIT MODELS","container-title":"IN: THE CHANGING CHEMISTRY OF THE OCEANS","call-number":"0005","author":[{"family":"ODUM","given":"HT"}],"issued":{"date-parts":[["1972"]]}}},{"key":"http://zotero.org/users/39885/items/GJWJJ5T6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GJWJJ5T6","type":"book","title":"A Survey of Ecological Economics","publisher":"Island Press","edition":"1","ISBN":"1-55963-411-1","call-number":"0085","author":[{"family":"Krishnan","given":"Rajaram"},{"family":"Harris","given":"Jonathan"},{"family":"Goodwin","given":"Neva R."}],"issued":{"date-parts":[["1995",9,1]]}}},{"key":"http://zotero.org/users/39885/items/GP4QEDN9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GP4QEDN9","type":"report","title":"Risk Assessment for Contaminated Sites in Europe: Vol 1: Scientific Basis","publisher":"Nottingham: LQM Press","source":"Google Scholar","URL":"http://forskningsbasen.deff.dk/Share.external?sp=Sa3474da0-7e9c-11dd-a5a8-000ea68e967b&sp=Sau","shortTitle":"Risk Assessment for Contaminated Sites in Europe","author":[{"family":"Ferguson","given":"Colin"},{"family":"Darmendrail","given":"D."},{"family":"Freier","given":"K."},{"family":"Jensen","given":"B. K."},{"family":"Jensen","given":"J."},{"family":"Kasamas","given":"H."},{"family":"Urzelai","given":"A."},{"family":"Vegter","given":"J."}],"issued":{"date-parts":[["1998"]]},"accessed":{"date-parts":[["2015",8,17]]}}},{"key":"http://zotero.org/users/39885/items/GPQ7GFRH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GPQ7GFRH","type":"article-journal","title":"The worth of land use: A GIS–emergy evaluation of natural and human-made capital","container-title":"Science of The Total Environment","page":"137-148","volume":"506-507","source":"CrossRef","URL":"http://www-scopus-com.ezproxy.library.uq.edu.au/record/display.url?eid=2-s2.0-84910652273&origin=resultslist&sort=plf-f&src=s&st1=Emergy&sid=495D763ECF42D5FDD2BC016979708754.WXhD7YyTQ6A7Pvk9AlA%3a20&sot=b&sdt=b&sl=21&s=TITLE-ABS-KEY%28Emergy%29&relpos=1&relpos=1&citeCnt=0&searchTerm=TITLE-ABS-KEY%28Emergy%29","DOI":"10.1016/j.scitotenv.2014.10.085","ISSN":"00489697","shortTitle":"The worth of land use","language":"en","author":[{"family":"Mellino","given":"Salvatore"},{"family":"Buonocore","given":"Elvira"},{"family":"Ulgiati","given":"Sergio"}],"issued":{"date-parts":[["2015",2]]},"accessed":{"date-parts":[["2015",1,23]]}}},{"key":"http://zotero.org/users/39885/items/GQIF5BMM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GQIF5BMM","type":"article-journal","title":"Translational Ecology","container-title":"Science","page":"609","volume":"329","issue":"5992","source":"HighWire","URL":"http://www.sciencemag.org.ezproxy.lib.rmit.edu.au/","DOI":"10.1126/science.1195624","author":[{"family":"Schlesinger","given":"William H."}],"issued":{"date-parts":[["2010",8,6]]},"accessed":{"date-parts":[["2010",8,30]]}}},{"key":"http://zotero.org/users/39885/items/GRHH36Q6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GRHH36Q6","type":"article-journal","title":"Water planning in the Condamine Alluvium, Queensland: Sharing information and eliciting views in a context of overallocation","container-title":"Journal of Hydrology","collection-title":"Water Planning in Australia: meeting the challenges of incorporating social, cultural and scientific information into decision-making","page":"38-46","volume":"474","source":"ScienceDirect","abstract":"Summary\nThe Central Condamine Alluvium, at the head of Australia’s Murray–Darling River system, provides groundwater for food, fibre and a fast expanding urban population. Current extraction is assessed at 67 GL/a (gigalitres per annum), while the best available scientific data estimates the sustainable groundwater system yield is closer to 40 GL/a (CSIRO, 2008). Peak organisations accept overallocation as a critical issue but conflict over water has disrupted several past attempts at regulation. To assist local communities and the planning agency, seven planning tools were used: (1) an extended stakeholder analysis and context report, (2) a program of engagement with Traditional Custodians, (3) intergenerational workshops, (4) a survey of groundwater users covering issues in setting and meeting the agreed system yield, (5) a multi-criteria analysis relating to setting and apportioning the available yield, (6) a pilot workshop addressing adaptation to climate risk, and (7) development of a three-dimensional groundwater visualisation tool relating to the regional aquifers. Results fed directly into pre-planning processes undertaken by the State water agency. The tools allowed a much broader range of voices, values and depth of information to feed into the planning process than otherwise available. Participants found the Indigenous engagement tool and the GVT the most useful. The latter addressed identified information gaps and allowed for aquifer characteristics and the interaction with bores to be presented in a user-friendly manner. Intergenerational perspectives about using water within sustainable limits were also obtained but the Community Reference Panel did not place any weight on this perspective in discussions over the plan amendment. Evaluations of the tools demonstrate that a range of planning tools can be readily used to enhance existing planning processes, particularly by sharing information and eliciting views that may not be readily accessible to water planners.","URL":"http://www.sciencedirect.com/science/article/pii/S0022169412000236","DOI":"10.1016/j.jhydrol.2012.01.004","ISSN":"0022-1694","shortTitle":"Water planning in the Condamine Alluvium, Queensland","journalAbbreviation":"Journal of Hydrology","author":[{"family":"Tan","given":"Poh-Ling"},{"family":"Baldwin","given":"C."},{"family":"White","given":"I."},{"family":"Burry","given":"K."}],"issued":{"date-parts":[["2012",12,12]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/GSGM7SEC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GSGM7SEC","type":"webpage","title":"Bore search","container-title":"Department of Natural Resources and Mines","genre":"document","abstract":"The Underground Water Impact Report for the Surat Cumulative Management Area assessed the impacts of water extraction by petroleum tenure holders on underground water.","URL":"https://www.dnrm.qld.gov.au/ogia/surat-underground-water-impact-report/bore-search","language":"en-AU","author":[{"family":"Mines","given":"Queensland Department of Natural Resources","dropping-particle":"and"}],"issued":{"date-parts":[["2015",3,6]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/GT2WC5ST","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GT2WC5ST","type":"article-journal","title":"Maximum (em)power: a foundational principle linking man and nature","container-title":"Ecological Modelling","page":"115-119","volume":"178","issue":"1-2","abstract":"Hypothesized as a universal principle of system self-organization, selection for maximum power provided the basis for H.T. Odum’s systems-based understanding of energy transformation dynamics, which ultimately resulted in his emergy-based methods of ecosystem and environmental policy analysis. Odum’s formulation of the principle emphasized the selective advantage potentially available to systems that acquire useful energy at the maximum rate possible within their environments, with energy deemed useful if it reinforces production through increased available energy acquisition. Based on this principle, Odum postulated a correspondence of the maintenance requirements of energy fluxes with their contributions to system power acquisition. A quantitative correlate with usefulness is thus provided by emergy, i.e., by the available energy of one kind used directly or indirectly to maintain storages and flows. A more explicit and precise understanding of the energetics of self-organization was thus suggested, and Odum accordingly reformulated the principle as selection for maximum rate of emergy acquisition (i.e., empower), which provides the standard for assessment of system adaptedness in current methods of emergy analysis. The many corollary hypotheses derived from the principle include the selective prevalence of intermediate efficiencies and process rates and of pulsing dynamics, emergy hierarchies, and territoriality under appropriate energy-influx regimes. Assessments of socioeconomic and environmental alternatives might be further improved by integrating this principle with modern theories of multilevel selection.","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6VBS-4CKNMVB-1&_user=10&_rdoc=1&_fmt=&_orig=search&_sort=d&view=c&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=f88f6eaf2106b71a176d82a4381c1a44","DOI":"10.1016/j.ecolmodel.2003.12.009","call-number":"0007","shortTitle":"Maximum (em)power","author":[{"family":"Cai","given":"T. T"},{"family":"Olsen","given":"T. W"},{"family":"Campbell","given":"D. E"}],"issued":{"date-parts":[["2004",10,15]]},"accessed":{"date-parts":[["2008",3,24]]}}},{"key":"http://zotero.org/users/39885/items/GTCAG7ZA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GTCAG7ZA","type":"book","title":"Leadership: Theory and Practice","publisher":"Sage Publications, Inc","edition":"Fifth Edition","source":"Amazon.com","ISBN":"1-4129-7488-7","shortTitle":"Leadership","author":[{"family":"Northouse","given":"Dr. Peter"}],"issued":{"date-parts":[["2009",10,6]]}}},{"key":"http://zotero.org/users/39885/items/GTUXB9WJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GTUXB9WJ","type":"article-journal","title":"Energy quality, emergy, and transformity: H.T. Odum’s contributions to quantifying and understanding systems","container-title":"Ecological Modelling","page":"201-213","volume":"178","issue":"1-2","abstract":"We present in this article, a brief historical overview of the development of the concepts and theories of energy quality, and net energy that were the precursors to emergy. The concepts evolved over decades, beginning in the 1950s with Odum’s work on tracing energy flows in ecosystems. During the 1970s, Odum’s attention was drawn to larger scale systems that included the economies of humans and the concept of net energy. In the 1980s, Odum quantified energy quality and defined it as a “donor-based” evaluation technique. In the 1990s, energy quality was further refined and rigorous definitions for “emergy” and “transformity” were given. The units of emergy were defined as solar emjoules (abbreviated seJ) and the units of transformity were seJ/J. In addition, we provide some insights into the types of processes and systems that have been evaluated using emergy methods.","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6VBS-4CBV3D4-1&_user=10&_rdoc=1&_fmt=&_orig=search&_sort=d&view=c&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=3bc27088fd458a4549c7cabf334c2fcf","DOI":"10.1016/j.ecolmodel.2004.03.002","call-number":"0061","shortTitle":"Energy quality, emergy, and transformity","author":[{"family":"Brown","given":"Mark T"},{"family":"Ulgiati","given":"Sergio"}],"issued":{"date-parts":[["2004",10,15]]},"accessed":{"date-parts":[["2008",3,20]]}}},{"key":"http://zotero.org/users/39885/items/GV8G3CSP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GV8G3CSP","type":"book","title":"Design for a Brain:The Origin of Adaptive Behavior","publisher":"Chapman and Hall","source":"Amazon.com","ISBN":"0-412-20090-2","call-number":"0436","shortTitle":"Design for a Brain","author":[{"family":"Ashby","given":"W. Ross"}],"issued":{"date-parts":[["1965"]]}}},{"key":"http://zotero.org/users/39885/items/GW85AEM6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GW85AEM6","type":"article-journal","title":"Bilirubin is cytotoxic to rat oligodendrocytes in vitro","container-title":"Brain Research","page":"135-141","volume":"985","issue":"2","abstract":"High levels of unconjugated bilirubin can be neurotoxic and gliotoxic. However, the effect of bilirubin on oligodendrocyte viability has never been investigated. In the present study, we searched the possible toxic effect of bilirubin on differentiated rat oligodendrocytes. Bilirubin was added to oligodendrocyte cultures at different concentrations varied between 10 and 100 [mu]M, and cultures were incubated for different times (24, 48 and 72 h). Cell viability was evaluated by trypan blue exclusion. The results showed that bilirubin decreased oligodendroglial cell viability in a concentration and time-dependent manner. Bilirubin induced apoptotic cell death as revealed by TUNEL staining and poly(ADP-ribose) polymerase cleavage. We found that bilirubin induced inducible nitric oxide synthase (NOS) mRNA expression in rat oligodendrocytes. Bilirubin also increased oligodendroglial nitrite production in a concentration-dependent manner and NOS inhibitor partly blocked bilirubin-induced cytotoxicity. These results suggest that bilirubin induces cytotoxicity, at least partly, via the induction of nitric oxide production in oligodendrocytes.","URL":"http://www.sciencedirect.com/science/article/B6SYR-4967MHM-D/2/3f52a1d689a2a442d5e55842d840e703","DOI":"10.1016/S0006-8993(03)03037-3","call-number":"0014","author":[{"family":"Genc","given":"Sermin"},{"family":"Genc","given":"Kursad"},{"family":"Kumral","given":"Abdullah"},{"family":"Baskin","given":"Huseyin"},{"family":"Ozkan","given":"Hasan"}],"issued":{"date-parts":[["2003",9,26]]},"accessed":{"date-parts":[["2008",8,17]]}}},{"key":"http://zotero.org/users/39885/items/GWDFBEB7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GWDFBEB7","type":"article-journal","title":"Concepts and methods of ecological engineering","container-title":"Ecological Engineering","collection-title":"The Philosophy and Energence of Ecological Engineering","page":"339-361","volume":"20","issue":"5","source":"ScienceDirect","abstract":"Ecological engineering was defined as the practice of joining the economy of society to the environment symbiotically by fitting technological design with ecological self design. The boundary of ecological engineering systems includes the ecosystems that self organize to fit with technology, whereas environmental engineering designs normally stop at the end of the pipe. For example, the coastal marsh wildlife sanctuary at Port Aransas, Texas, developed when municipal wastewaters were released on bare sands. The energy hierarchy concept provides principles for planning spatial and temporal organization that can be sustained. Techniques of ecological engineering are given with examples that include maintaining biodiversity with multiple seeding, experimental mesocosms, enclosed systems with people like Biosphere 2, wetland filtration of heavy metals, overgrowth and climax ecosystems, longitudinal succession, exotics, domestication of ecosystems, closing material cycles, and controlling water with vegetation reflectance.","URL":"http://www.sciencedirect.com/science/article/pii/S0925857403000594","DOI":"10.1016/j.ecoleng.2003.08.008","ISSN":"0925-8574","journalAbbreviation":"Ecological Engineering","author":[{"family":"Odum","given":"Howard T"},{"family":"Odum","given":"B"}],"issued":{"date-parts":[["2003",10]]},"accessed":{"date-parts":[["2016",1,24]]}}},{"key":"http://zotero.org/users/39885/items/GWWEEKDI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GWWEEKDI","type":"article-journal","title":"NRDS - Annual Report","container-title":"Journal of Natural Resource Data","page":"1-11","volume":"1","issue":"1","source":"nrds.github.io","URL":"http://nrds.github.io/","author":[{"family":"Maud","given":"Sholto"}],"issued":{"date-parts":[["2015",1,17]]},"accessed":{"date-parts":[["2015",8,26]]}}},{"key":"http://zotero.org/users/39885/items/GXK2ATHQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/GXK2ATHQ","type":"article-journal","title":"Nonequilibrium fluctuations in a resistor","container-title":"[[Physical Review E]]","page":"060101R;2404","volume":"71","call-number":"0042","author":[{"family":"Ciliberto","given":"N. Garnier & S."}],"issued":{"date-parts":[["2005"]]}}},{"key":"http://zotero.org/users/39885/items/H36KACDZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/H36KACDZ","type":"chapter","title":"Reversing the Picture Superiority Effect","container-title":"Imagery and Related Mnemonic Processes","publisher":"Springer New York","page":"151-174","source":"link.springer.com","abstract":"Imaginal coding typically enhances retention. Pictures are remembered better than words; words for which subjects imagine referents are better remembered than words studied without such coding; concrete words are better retained than abstract words; and mnemonic devices employing imagery can produce dramatic effects on retention. These facts have long been noted (Paivio, 1971) and many contributions in this volume confirm the efficacy of imagery and imagination in remembering.","URL":"http://link.springer.com/chapter/10.1007/978-1-4612-4676-3_7","ISBN":"978-1-4612-9111-4","note":"DOI: 10.1007/978-1-4612-4676-3_7","language":"en","author":[{"family":"Iii","given":"Henry L. Roediger"},{"family":"Weldon","given":"Mary Susan"}],"editor":[{"family":"McDaniel","given":"Mark A."},{"family":"Pressley","given":"Michael"}],"issued":{"date-parts":[["1987"]]},"accessed":{"date-parts":[["2016",3,13]]}}},{"key":"http://zotero.org/users/39885/items/H3S7K9MI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/H3S7K9MI","type":"book","title":"War and Peace","publisher":"Modern Library","source":"Amazon.com","call-number":"0266","author":[{"family":"Garnett","given":"Count Leo Tolstoy; Translator-Constance"}],"issued":{"date-parts":[["1001",1,1]]}}},{"key":"http://zotero.org/users/39885/items/H564SCWS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/H564SCWS","type":"article-journal","title":"Classical Marxism and the Second Law of Thermodynamics: Marx/Engels, the Heat Death of the Universe Hypothesis, and the Origins of Ecological Economics","container-title":"Organization Environment","page":"3-37","volume":"21","issue":"1","abstract":"Today's understanding of the significance of Karl Marx and Frederick Engels's work for the development of both ecological economics in particular and ecology in general has been hindered by persistent claims that Engels (and by imputation Marx) rejected the second law of thermodynamics. It is demonstrated here through textual analysis that Engels criticized not the entropy law itself but the extrapolation of this into the \"heat death theory of the universe\" hypothesis. The historical debate surrounding this hypothesis is examined, showing that Engels and Marx remained consistent with the natural science of their day. This opens the way to the recognition that Marx's political economy was unique in the 19th century in incorporating thermodynamics into the core of its analysis, thus providing the foundations for an ecological economics. The materialist-dialectical view of classical Marxism led to a dynamic, open, contingent approach to the earth system, reflecting a general evolutionary perspective.","URL":"http://oae.sagepub.com/cgi/content/abstract/21/1/3","DOI":"10.1177/1086026607313580","call-number":"0003","shortTitle":"Classical Marxism and the Second Law of Thermodynamics","author":[{"family":"Bellamy Foster","given":"John"},{"family":"Burkett","given":"Paul"}],"issued":{"date-parts":[["2008",3,1]]},"accessed":{"date-parts":[["2008",7,2]]}}},{"key":"http://zotero.org/users/39885/items/H6463KZG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/H6463KZG","type":"article-journal","title":"Contribution to the Energetics of Evolution","container-title":"Proceedings of the National Academy of Sciences of the United States of America","page":"147-151","volume":"8","issue":"6","URL":"http://www.pubmedcentral.nih.gov/picrender.fcgi?artid=1085052&blobtype=pdf","call-number":"0328","author":[{"family":"Lotka","given":"A. J."}],"issued":{"date-parts":[["1922"]]}}},{"key":"http://zotero.org/users/39885/items/H67TDS8U","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/H67TDS8U","type":"book","title":"Introduction to risk and uncertainty in hydrosystem engineering","collection-title":"Topics in safety, risk, reliability and quality","publisher":"Springer","publisher-place":"Dordrecht","volume":"22.","number-of-pages":"1 online resource.","edition":"1. Aufl.","source":"UQ Library Search, Summon 2.0","event-place":"Dordrecht","abstract":"Water engineers require knowledge of stochastic, frequency concepts, uncertainty analysis, risk assessment, and the processes that predict unexpected events. This book presents the basics of stochastic, risk and uncertainty analysis, and random sampling techniques in conjunction with straightforward examples which are solved step by step. In addition, appropriate Excel functions are included as an alternative to solve the examples, and two real case studies is presented in the last chapters of book.","URL":"http://ezproxy.library.uq.edu.au/login?url=http://dx.doi.org/10.1007/978-94-007-5851-3","ISBN":"978-94-007-5851-3","call-number":"TC153 .G66 2013","language":"English","author":[{"family":"Goodarzi","given":"Ehsan"},{"family":"Ziaei","given":"Mina"},{"family":"Teang Shui","given":"Lee"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/H8QSNTZH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/H8QSNTZH","type":"article-journal","title":"Two Models in Statistical Mechanics","container-title":"The American Mathematical Monthly","page":"121-126","volume":"31","issue":"3","source":"JSTOR","URL":"http://www.jstor.org/stable/2299889","DOI":"10.2307/2299889","ISSN":"0002-9890","journalAbbreviation":"The American Mathematical Monthly","author":[{"family":"Lotka","given":"A. J."}],"issued":{"date-parts":[["1924",3,1]]},"accessed":{"date-parts":[["2015",11,7]]}}},{"key":"http://zotero.org/users/39885/items/H99IFCBF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/H99IFCBF","type":"article-journal","title":"Kinetic Analysis and Comparison of Models of Xylose Metabolism byKlebsiella planticola","container-title":"Biochemical and Biophysical Research Communications","page":"41-46","volume":"227","issue":"1","source":"ScienceDirect","abstract":"A model for the degradation of xylose and ethanol production byKlebsiella planticolais proposed and compared with the exponential and Michaelis–Menten approaches. This model is based on the energy system diagrams and it is a simplified version of a previous model developed for the glucose and ethanol kinetics of the yeastSaccharomices cerevisiae.In this model the dynamics of the substrate and of the final product are strictly related by means of the cellular activity. This model shows superior performances with respect to the two alternatives, behaving better along the whole dynamics.","URL":"http://www.sciencedirect.com/science/article/pii/S0006291X96914643","DOI":"10.1006/bbrc.1996.1464","ISSN":"0006-291X","journalAbbreviation":"Biochemical and Biophysical Research Communications","author":[{"family":"Bastianoni","given":"Simone"},{"family":"Gastaldelli","given":"Amalia"},{"family":"Bonechi","given":"Claudia"},{"family":"Mocenni","given":"Chiara"},{"family":"Rossi","given":"Claudio"}],"issued":{"date-parts":[["1996",10,3]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/HATK3KT8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HATK3KT8","type":"article-journal","title":"Simulation models of ecological economics developed with energy language methods","container-title":"SIMULATION","page":"69-75","volume":"53","issue":"2","source":"sim.sagepub.com.ezproxy.library.uq.edu.au","abstract":"The energy-systems language method of modelling and simula tion, because of its energy con strained rules, is a means for trans ferring homologous concepts be tween levels of the hierarchies of nature. Mathematics of self-organi zation may justify \"emulation\" as the simulation of systems overview without details. Here, these methods are applied to the new fields of \"ecological economics\" and \"ecological engineering.\" Since the vitality of national economies depends on the symbiotic coupling of environmental resources and human economic behavior, the energy language is adapted to develop overview models of nations relevant to public policies. An overview model of a developing nation is given as an example with simulations for alternative policies. Maximum economic vitality was obtained with trade for external resources, but ultimate economic carrying capacity and standard of living was determined by indige nous resources, optimum utilization and absence of foreign debt.","URL":"http://sim.sagepub.com.ezproxy.library.uq.edu.au/content/53/2/69","DOI":"10.1177/003754978905300205","ISSN":"0037-5497, 1741-3133","journalAbbreviation":"SIMULATION","language":"en","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1989",8,1]]},"accessed":{"date-parts":[["2015",11,4]]}}},{"key":"http://zotero.org/users/39885/items/HB2IQQEK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HB2IQQEK","type":"book","title":"Divine Machines : Leibniz and the Sciences of Life","publisher":"Princeton University Press","publisher-place":"Princeton","event-place":"Princeton","ISBN":"978-1-4008-3872-1","shortTitle":"Divine Machines","author":[{"family":"Smith","given":"Justin E. H."}],"issued":{"date-parts":[["2011"]]}}},{"key":"http://zotero.org/users/39885/items/HC3V7I7P","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HC3V7I7P","type":"webpage","title":"Coal seam gas water feasibility study","container-title":"Department of Natural Resources and Mines","genre":"document","abstract":"This study examined the feasibility of using coal seam gas water in addressing water sustainability and adjustment issues in the QMDB.","URL":"https://www.dnrm.qld.gov.au/water/catchments-planning/healthy-headwaters/coal-seam-gas-water-feasibility-study","language":"en-AU","author":[{"family":"DNRM","given":""}],"issued":{"date-parts":[["2013",11,6]]},"accessed":{"date-parts":[["2015",8,12]]}}},{"key":"http://zotero.org/users/39885/items/HD9IVDP4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HD9IVDP4","type":"article","title":"Where to with ‘Emergy’ Literacy?","publisher":"CSIRO Waite Laboratories","URL":"http://www.naturaledgeproject.net/Documents/netwl50E.pdf","call-number":"0000","author":[{"family":"Maud","given":"Sholto"}],"issued":{"date-parts":[["2005"]]},"accessed":{"date-parts":[["2015",9,12]]}}},{"key":"http://zotero.org/users/39885/items/HDTW6AI7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HDTW6AI7","type":"book","title":"Wastewater Engineering: Treatment and Reuse","ISBN":"0-07-041878-0","call-number":"1354","shortTitle":"Wastewater Engineering","author":[{"family":"Tchobanoglous","given":"George"},{"family":"Burton","given":"Franklin L."},{"family":"Stensel","given":"H. David"}]}},{"key":"http://zotero.org/users/39885/items/HDXUV3T2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HDXUV3T2","type":"webpage","title":"Coal seam gas","URL":"http://www.nwc.gov.au/nwi/position-statements/coal-seam-gas","language":"en","author":[{"family":"Commission","given":"National Water"},{"family":"Commission","given":"National Water"}],"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/HEXKWDGV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HEXKWDGV","type":"webpage","title":"A JavaScript library for building user interfaces | React","abstract":"A JavaScript library for building user interfaces","URL":"https://facebook.github.io/react/index.html","author":[{"family":"facebook","given":""}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",8,21]]}}},{"key":"http://zotero.org/users/39885/items/HFCA4RAE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HFCA4RAE","type":"book","title":"Ecological engineering and civil engineering works : a practical set of ecological engineering principles for road infrastructure and coastal management","source":"Open WorldCat","ISBN":"978-90-369-5561-4","shortTitle":"Ecological engineering and civil engineering works","author":[{"family":"Bohemen","given":"Heinrich"}],"issued":{"date-parts":[["2004"]]}}},{"key":"http://zotero.org/users/39885/items/HGVQ4CEN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HGVQ4CEN","type":"article-journal","title":"The continuing importance of maximum power","container-title":"Ecological Modelling","collection-title":"Through the MACROSCOPE: the legacy of H.T. Odum","page":"107-113","volume":"178","issue":"1–2","source":"ScienceDirect","abstract":"Of the many extremely ingenious, powerful and, yes, frustrating concepts and approaches that Howard Odum left us, the one with the most power to change how we understand the Earth, was that of maximum power. This theoretical framework, has subverted how most of his students and colleagues think about systems in general, transformed the way we think about ecosystems, natural selection, and even our environmental and general politics. The concept has not always been a comfortable one, but it is an exceedingly exciting and commanding one … and therein lies its interest. For most of us who have been exposed to it in some detail, there is no doubt as to its veracity [Maximum Power: The Ideas and Applications of H.T. Odum, University Press of Colorado, Niwot]. What remains to be answered, however, is just how wide is its net?","URL":"http://www.sciencedirect.com/science/article/pii/S0304380004001206","DOI":"10.1016/j.ecolmodel.2004.03.003","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Hall","given":"Charles A. S"}],"issued":{"date-parts":[["2004",10,15]]},"accessed":{"date-parts":[["2015",11,8]]}}},{"key":"http://zotero.org/users/39885/items/HGXS2DKB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HGXS2DKB","type":"chapter","title":"Emergy Accounting of Human-Dominated, Large-Scale Ecosystems","container-title":"Thermodynamics and Ecological Modelling","publisher":"CRC","ISBN":"1-56670-272-0","call-number":"0003","author":[{"family":"Ulgiati","given":"S."},{"family":"Brown","given":"M. T."}],"editor":[{"family":"Jorgensen","given":"Sven E."}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/HHM3XMNG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HHM3XMNG","type":"motion_picture","title":"EDM Lesson 3: Calibrating TANK","source":"YouTube","dimensions":"589 seconds","abstract":"This video is about EDM Lesson 3: Calibrating TANK","URL":"https://www.youtube.com/watch?v=bEfO7sQD7zA&feature=youtube_gdata_player","shortTitle":"EDM Lesson 3","issued":{"date-parts":[["2014",10,16]]},"accessed":{"date-parts":[["2015",4,5]]}}},{"key":"http://zotero.org/users/39885/items/HHTCEXEH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HHTCEXEH","type":"webpage","title":"Australian Water Resources Information System: Water Information: Bureau of Meteorology","URL":"http://www.bom.gov.au/water/about/wip/awris.shtml","shortTitle":"Australian Water Resources Information System","language":"en","author":[{"literal":"BoM"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,13]]}}},{"key":"http://zotero.org/users/39885/items/HJFN5G7G","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HJFN5G7G","type":"report","title":"The value of the tidal marsh","publisher":"No LSU-SG-74-03. Center for Wetland Resources, Louisiana State University, Baton Rouge, La","source":"Google Scholar","author":[{"family":"Gosselink","given":"J. G."},{"family":"Odum","given":"E. P."},{"family":"Pope","given":"R. M."}],"issued":{"date-parts":[["1973"]]}}},{"key":"http://zotero.org/users/39885/items/HJSF4W7J","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HJSF4W7J","type":"book","title":"Valuing the Earth: Economics, Ecology, Ethics","publisher":"The MIT Press","ISBN":"0-262-54068-1","call-number":"0154","note":"$10","shortTitle":"Valuing the Earth","author":[{"family":"Daly","given":"Herman E."},{"family":"Townsend","given":"Kenneth N."}],"issued":{"date-parts":[["1993",1,1]]}}},{"key":"http://zotero.org/users/39885/items/HKFFCMFF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HKFFCMFF","type":"article-journal","title":"Severe decrements in cognition function and mood induced by sleep loss, heat, dehydration, and undernutrition during simulated combat","container-title":"Biological Psychiatry","page":"422-429","volume":"57","issue":"4","source":"ScienceDirect","abstract":"Background\nMilitary exercises generate high levels of stress to simulate combat, providing a unique opportunity to examine cognitive and physiologic responses of normal humans to acute stress.Methods\nCognitive and physiologic markers of stress were evaluated before, during, and after an intense training exercise conducted for 53 hours in the heat. Cognitive performance, mood, physical activity, sleep, body composition, hydration, and saliva cortisol, testosterone, and melatonin were assessed. Volunteers were 31 male U.S. Army officers from an elite unit, aged 31.6 ± .4 years.Results\nWrist activity monitors documented that soldiers slept only 3.0 ± .3 hours during the exercise and were active throughout. Volunteers lost 4.1 ± .2 kg (p < .001) of weight, predominately water (3.1 ± .3 L) (p < .001). Substantial degradation in cognitive function, assessed with computerized tests, occurred. Vigilance, reaction time, attention, memory, and reasoning were impaired (p < .001). Mood, including vigor (p < .001), fatigue (p < .001), confusion (p < .001), depression (p < .001), and tension (p < .002), assessed by questionnaire, deteriorated. The highest cortisol and testosterone levels were observed before the exercise.Conclusions\nThis study quantifies the overwhelmingly adverse impact of multiple stressors on cognitive performance, mood, and physiologic parameters, during a continuous but brief military exercise conducted by highly motivated, well-trained officers.","URL":"http://www.sciencedirect.com.ezproxy.lib.rmit.edu.au/science/article/B6T4S-4F6MDHD-4/2/8dc921e0b979daba9764f35db39bdd11","DOI":"10.1016/j.biopsych.2004.11.014","ISSN":"0006-3223","call-number":"0045","author":[{"family":"Lieberman","given":"Harris R."},{"family":"Bathalon","given":"Gaston P."},{"family":"Falco","given":"Christina M."},{"family":"Kramer","given":"F. Matthew"},{"family":"Morgan III","given":"Charles A."},{"family":"Niro","given":"Philip"}],"issued":{"date-parts":[["2005",2,15]]},"accessed":{"date-parts":[["2010",5,11]]}}},{"key":"http://zotero.org/users/39885/items/HM2C92GG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HM2C92GG","type":"chapter","title":"A systems theory perspective on polanyi's great transformation: The case of financial derivative contracts","container-title":"From Economy to Society? Perspectives on Transnational Risk Regulation","collection-title":"Studies in Law, Politics and Society","collection-number":"62","publisher":"Emerald Group Publishing Limited","page":"49-71","volume":"62","number-of-volumes":"0","source":"emeraldinsight.com (Atypon)","URL":"http://www.emeraldinsight.com/doi/abs/10.1108/S1059-4337%282013%290000062003","shortTitle":"A systems theory perspective on polanyi?","author":[{"literal":"John Paterson"}],"issued":{"date-parts":[["2013",12,28]]},"accessed":{"date-parts":[["2015",12,3]]}}},{"key":"http://zotero.org/users/39885/items/HMHRQBJN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HMHRQBJN","type":"article-journal","title":"Controlling Software Projects","container-title":"Softw. Eng. J.","page":"7–16","volume":"1","issue":"1","source":"ACM Digital Library","URL":"http://dx.doi.org/10.1049/sej.1986.0003","DOI":"10.1049/sej.1986.0003","ISSN":"0268-6961","author":[{"family":"Rook","given":"Paul"}],"issued":{"date-parts":[["1986",1]]},"accessed":{"date-parts":[["2015",3,18]]}}},{"key":"http://zotero.org/users/39885/items/HNFDCCKQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HNFDCCKQ","type":"article-journal","title":"Psychological fusion and personal conflict in organizations","container-title":"Professional Communication, IEEE Transactions on","page":"14-17","volume":"37","issue":"1","abstract":"An employee's failure to differentiate himself or herself from the perceived attitudes of another is at the heart of much stress in organizations. The world of family systems psychology identifies a dysfunctional process, called psychological fusion, which stems from insufficient self-definition by an individual and results in a dependency upon others to meet an innate need to feel accepted. People suffering from psychological fusion perceive any criticism as a threat, making it impossible for them to receive the critical feedback that is necessary for growth. To experience intrinsic motivation, people require a sense of relative self-determination and competence. This paper argues that much as employers take an interest in such emotional health issues as substance abuse and stress, they should also address psychological fusion; the paper offers methods for dealing with this interpersonal communications issue","DOI":"10.1109/47.272852","ISSN":"0361-1434","call-number":"0002","journalAbbreviation":"Professional Communication, IEEE Transactions on","author":[{"family":"Baard","given":"P.P."}],"issued":{"date-parts":[["1994"]]}}},{"key":"http://zotero.org/users/39885/items/HPAA9E2S","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HPAA9E2S","type":"book","title":"Zen and the art of motorcycle maintenance : an inquiry into values","publisher":"Corgi","publisher-place":"London","event-place":"London","ISBN":"978-0-552-10166-0","call-number":"0000","author":[{"family":"Pirsig","given":"Robert"}],"issued":{"date-parts":[["1984"]]}}},{"key":"http://zotero.org/users/39885/items/HPB8T3RG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HPB8T3RG","type":"book","title":"Principles of biochemistry : with an extended discussion of oxygen-binding proteins","publisher":"Worth Publishers","publisher-place":"New York  NY","edition":"2nd ed.","event-place":"New York  NY","ISBN":"978-0-87901-711-8","author":[{"family":"Lehninger","given":"Albert"}],"issued":{"date-parts":[["1993"]]}}},{"key":"http://zotero.org/users/39885/items/HPQ9IU88","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HPQ9IU88","type":"book","title":"CORE","publisher":"Vitech","version":"9","URL":"http://www.vitechcorp.com/products/core.shtml","author":[{"family":"Vitech","given":""}],"issued":{"date-parts":[["2015"]]}}},{"key":"http://zotero.org/users/39885/items/HQ397U2N","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HQ397U2N","type":"article","title":"Baseline Assessment Plan","publisher":"Department of Environment and Heritage Protection","URL":"https://www.ehp.qld.gov.au/management/non-mining/documents/baseline-assessment-info-sheet.pdf","author":[{"literal":"EHP"}],"issued":{"date-parts":[["2015"]]}}},{"key":"http://zotero.org/users/39885/items/HRZ48AXT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HRZ48AXT","type":"article-journal","title":"Leibniz and geography: geologist, paleontologist, biologist, historian, political theorist and geopolitician","container-title":"Geographica Helvetica","page":"81–93","volume":"68","issue":"2","source":"Google Scholar","URL":"http://geogr-helv.net/68/81/2013/gh-68-81-2013.pdf","shortTitle":"Leibniz and geography","author":[{"family":"Elden","given":"Stuart"},{"family":"Klauser","given":"F."},{"family":"Montanari","given":"G."},{"family":"Wiest","given":"K."},{"family":"Wörmer","given":"S."},{"family":"Stotten","given":"R."},{"family":"Bercht","given":"A. L."},{"family":"Goeke","given":"P."},{"family":"Bühler","given":"E."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2016",1,31]]}}},{"key":"http://zotero.org/users/39885/items/HVD2CISE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HVD2CISE","type":"article-journal","title":"Operational assimilation of ASCAT surface soil wetness at the Met Office","container-title":"Hydrology and Earth System Sciences","page":"2729-2746","volume":"15","issue":"8","source":"CrossRef","URL":"http://www.hydrol-earth-syst-sci.net/15/2729/2011/","DOI":"10.5194/hess-15-2729-2011","ISSN":"1607-7938","language":"en","author":[{"family":"Dharssi","given":"I."},{"family":"Bovis","given":"K. J."},{"family":"Macpherson","given":"B."},{"family":"Jones","given":"C. P."}],"issued":{"date-parts":[["2011",8,31]]},"accessed":{"date-parts":[["2014",3,30]]}}},{"key":"http://zotero.org/users/39885/items/HVPISCMF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HVPISCMF","type":"article-journal","title":"The Sankey Diagram in Energy and Material Flow Management","container-title":"Journal of Industrial Ecology","page":"173-185","volume":"12","issue":"2","abstract":"The Sankey diagram is an important aid in pointing up inefficiencies and potential for savings in connection with resource use. This article, the second of a pair, examines the use of Sankey diagrams in operational material flow management. The previous article described the development of the diagram and its use in the past. Simple Sankey diagrams follow the requirement of conservation of energy or mass and allow a physical view of production systems. Advanced diagrams integrate stocks of materials beside the flows or show the different (ecological) quality of the materials. For the purpose of management, however, a further step is necessary: to illustrate the economic value of the energy and material flows and to use information from cost accounting. The use of flow charts showing added value or the costs of energy and material flows is particularly important for production systems. This article describes examples of each of these uses as well as assumptions that must be taken into account for Sankey diagrams to be used as an effective aid for decision-making in business and public policy.","URL":"http://dx.doi.org/10.1111/j.1530-9290.2008.00015.x","DOI":"10.1111/j.1530-9290.2008.00015.x","call-number":"0004","author":[{"family":"Schmidt","given":"Mario"}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2008",7,12]]}}},{"key":"http://zotero.org/users/39885/items/HWIJV9RJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HWIJV9RJ","type":"article-journal","title":"Developing the Lismore CSG Poll-A university/local government collaboration","container-title":"Journal of Economic & Social Policy","page":"119","volume":"15","issue":"3","source":"Google Scholar","URL":"http://search.informit.com.au/documentSummary;dn=794922375366543;res=IELBus","author":[{"family":"Luke","given":"Hanabeth"},{"family":"Exter","given":"Kristin A.","non-dropping-particle":"den"},{"family":"Boyd","given":"William E."},{"family":"Lloyd","given":"David J."},{"family":"Roche","given":"Ben"},{"literal":"others"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/HWIQCCCQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/HWIQCCCQ","type":"chapter","title":"Lecture I: The present dilemma in philosophy","container-title":"Pragmatism: A new name for some old ways of thinking","publisher":"Longmans, Green and Co","publisher-place":"New York, NY, US","page":"3-40","source":"APA PsycNET","event-place":"New York, NY, US","abstract":"Philosophy's results concern us all most vitally, and philosophy's queerest arguments tickle agreeably our sense of subtlety and ingenuity. In this lecture, the author addresses the current situation in philosophy. The history of philosophy is to a great extent that of a certain clash of human temperaments. The present clash between empiricism and rationalism is discussed at length. No one can live an hour without both facts and principles, so the difference between empiricism and rationalism is a difference of emphasis. A philosophic amateur, who desires both religion and scientific facts, will find an empirical philosophy that is not religious enough, and a religious philosophy that is not empirical enough for his purpose. The present state of philosophy presents a dilemma for the layman, who wants a philosophy that will not only exercise the powers of intellectual abstraction, but that will make some positive connexion with this actual world of finite human lives. The author offers pragmatism as a philosophy that can satisfy both kinds of demand. It can remain religious like the rationalisms, but at the same time, like the empiricisms, it can preserve the richest intimacy with facts.","shortTitle":"Lecture I","author":[{"family":"James","given":"William"}],"issued":{"date-parts":[["1907"]]}}},{"key":"http://zotero.org/users/39885/items/I28XRQNN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/I28XRQNN","type":"entry-encyclopedia","title":"Analysis","container-title":"The Stanford Encyclopedia of Philosophy","publisher":"Stanford University","edition":"Spring 2015 Edition, Edward N. Zalta (ed.)","URL":"http://plato.stanford.edu/archives/spr2015/entries/analysis","author":[{"literal":"Michael, Beaney"}],"issued":{"date-parts":[["2015"]]}}},{"key":"http://zotero.org/users/39885/items/I2MKZ8CU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/I2MKZ8CU","type":"article-journal","title":"Research as a guide for teaching introductory mechanics: An illustration in the context of the Atwood’s machine","container-title":"American Journal of Physics","page":"46-55","volume":"62","issue":"1","source":"scitation.aip.org","abstract":"A problem on the Atwood’s machine is often introduced early in the teaching of dynamics to demonstrate the application of Newton’s laws to the motion of a compound system. In a series of preliminary studies, student understanding of the Atwood’s machine was examined after this topic had been covered in a typical calculus‐based course. Analysis of the data revealed that many students had serious difficulties with the acceleration, the internal and external forces, and the role of the string. The present study was undertaken to obtain more detailed information about the nature and prevalence of these difficulties and thus provide a sound basis for the design of more effective instruction. The context for the investigation is a group of related problems involving less complicated compound systems. Specific examples illustrate how this research, which was conducted primarily in a classroom setting, has served as a guide in the development of tutorial materials to supplement the lectures and textbook in a standard introductory course.","URL":"http://scitation.aip.org/content/aapt/journal/ajp/62/1/10.1119/1.17740","DOI":"10.1119/1.17740","ISSN":"0002-9505, 1943-2909","shortTitle":"Research as a guide for teaching introductory mechanics","author":[{"family":"McDermott","given":"Lillian C."},{"family":"Shaffer","given":"Peter S."},{"family":"Somers","given":"Mark D."}],"issued":{"date-parts":[["1994",1,1]]},"accessed":{"date-parts":[["2015",2,8]]}}},{"key":"http://zotero.org/users/39885/items/I3QD6DEP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/I3QD6DEP","type":"article-journal","title":"Use of Type Curves Developed from Electric Analog Studies of Unconfined Flow to Determine the Vertical Permeability of an Aquifer at Piketon, Ohioa","container-title":"Ground Water","page":"43-48","volume":"4","issue":"3","source":"Wiley Online Library","abstract":"A type-curve method for determining anisotropy of unconfined aquifers, developed from electric analog simulation, is applied to drawdowns observed near, a well pumping from a glacial outwash aquifer at Piketon, Ohio. The coefficient of vertical permeability, P z'averaged 365 gpd per square foot. Computed drawdown for the pumped well, based on this value, differed by only a small amount from the observed drawdown. The coefficient of storage, determined from type curves for an image well system, averaged 0.20, typical of unconfined aquifers. Application of the method required a thorough knowledge of geohydrologic controls operating at the test site.","URL":"http://onlinelibrary.wiley.com/doi/10.1111/j.1745-6584.1966.tb01606.x/abstract","DOI":"10.1111/j.1745-6584.1966.tb01606.x","ISSN":"1745-6584","language":"en","author":[{"family":"Norris","given":"S. E."},{"family":"Fidler","given":"R. E."}],"issued":{"date-parts":[["1966"]]},"accessed":{"date-parts":[["2015",2,6]]}}},{"key":"http://zotero.org/users/39885/items/I84QWWRR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/I84QWWRR","type":"article-journal","title":"Client-side Modelica powered by Python or JavaScript","container-title":"Proceedings of the 10th International Modelica Conference","source":"Google Scholar","URL":"http://www.ep.liu.se/ecp/096/115/ecp14096115.pdf","DOI":"10.3384/ECP140961105","author":[{"family":"Franke","given":"Rüdiger"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",10,25]]}}},{"key":"http://zotero.org/users/39885/items/I9RNTVXI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/I9RNTVXI","type":"book","title":"When Teams Work Best : 6,000 Team Members and Leaders Tell What It Takes to Succeed","publisher":"Sage Publications, Inc","edition":"1","source":"Amazon.com","ISBN":"0-7619-2366-7","shortTitle":"When Teams Work Best","author":[{"family":"LaFasto","given":"Frank M. J."},{"family":"Larson","given":"Carl E."}],"issued":{"date-parts":[["2001",8]]}}},{"key":"http://zotero.org/users/39885/items/IBVBEBSV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IBVBEBSV","type":"article-journal","title":"Claims for Harmonization: A Theoretical Framework","container-title":"Can. Bus. LJ","page":"63","volume":"27","source":"Google Scholar","URL":"http://heinonlinebackup.com/hol-cgi-bin/get_pdf.cgi?handle=hein.journals/canadbus27&section=9","shortTitle":"Claims for Harmonization","author":[{"family":"Leebron","given":"David W."}],"issued":{"date-parts":[["1996"]]},"accessed":{"date-parts":[["2015",8,22]]}}},{"key":"http://zotero.org/users/39885/items/IBXZMCBA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IBXZMCBA","type":"article","title":"Soil health for vegetable production in Australia","publisher":"Department of Employment, Economic Development and Innovation","URL":"https://www.daf.qld.gov.au/__data/assets/pdf_file/0006/77127/Soil-health-vegetable-production-Part_1.pdf","author":[{"family":"Pattison","given":"Tony"},{"family":"Moody","given":"Phil"},{"family":"Bagshaw","given":"John"}],"issued":{"date-parts":[["2010"]]},"accessed":{"date-parts":[["2015",9,20]]}}},{"key":"http://zotero.org/users/39885/items/IC32T9IK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IC32T9IK","type":"article-journal","title":"Earth systems engineering and management","container-title":"Technology and Society Magazine, IEEE","page":"10-24","volume":"19","issue":"4","abstract":"The impact of human activities on natural systems has grown to the point that we need to engage consciously in earth systems engineering and management. I address why this is the case, and what I mean by such a provocative term. In addition, I explore what we can learn from relevant experience, and how this daunting task should be approached. Earth systems engineering and management (ESEM) may be defined as the capability to rationally engineer and manage human technology systems and related elements of natural systems in such a way as to provide the requisite functionality while facilitating the active management of strongly coupled natural systems. The need for ESEM arises because, as a result of the industrial revolution and concomitant changes in agriculture, population levels, culture, and human systems, the world has become a human artifact. Partially because this process has occurred over time frames that are longer than individual time horizons, and has involved institutions and technology systems rather than conscious individual decisions, recognition of this phenomenon, and appropriate responses, have yet to occur. It is apparent that the science and technology, institutional, and ethical infrastructures necessary to support such a response have not yet been developed. The issue is not whether the earth will be engineered by the human species, it is whether humans will do so rationally, intelligently, and ethically","ISSN":"0278-0097","call-number":"0058","journalAbbreviation":"Technology and Society Magazine, IEEE","author":[{"family":"Allenby","given":"B."}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/ID4VM35C","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ID4VM35C","type":"article-journal","title":"The prosperous way down","container-title":"Energy","page":"21-32","volume":"31","issue":"1","abstract":"Principles that appear to govern all systems including human societies were used to consider the time of economic descent ahead. These include the energy laws, the emergy concept, the maximum empower principle, the universal energy hierarchy, the conservation and hierarchical distribution of materials, the spatial organization of centers, and the pulsing paradigm. Population and cities, energy consumption and climate change, agriculture and environment, information and electric power, capitalism and economic policies, structures and materials, human life and standard of living are dealt with in this paper as interconnected aspects of the same problem, i.e. the necessary descent phase of human economies, due to decreasing resource base. We expect much of the resource use, culture and public policy appropriate for the growth period to be replaced with a new set of ethics and policies affecting each scale of time and space during descent. Decisive changes in attitudes and practices can divert a destructive collapse, leading instead to a prosperous way down.","URL":"http://www.sciencedirect.com/science/article/B6V2S-4CVRKBT-6/2/936788549cd823ef906fbb9bfea9bfdd","DOI":"10.1016/j.energy.2004.05.012","call-number":"0048","author":[{"family":"Odum","given":"Howard T."},{"family":"Odum","given":"Elisabeth C."}],"issued":{"date-parts":[["2006",1]]},"accessed":{"date-parts":[["2008",8,15]]}}},{"key":"http://zotero.org/users/39885/items/ID52J7G2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ID52J7G2","type":"article-journal","title":"Simulation of community metabolism and atmospheric carbon dioxide and oxygen concentrations in Biosphere 2","container-title":"Ecological Engineering","page":"107-134","volume":"13","issue":"1–4","source":"ScienceDirect","abstract":"The complexity and scale of Biosphere 2 under materially closed conditions represented a unique opportunity to investigate couplings between elemental cycles and community metabolism. For this paper, simulation models were developed to explore individual biome effects on atmospheric composition and carbon cycling inside the enclosure. Results suggest soil respiration rates, light intensity, and acid–base equilibrium control atmospheric carbon dioxide and oxygen under materially closed conditions. Experiments with the overall Combined Biome model indicate: (1) the agriculture biome has a greater effect on atmospheric composition than the other biomes due to its large area, high net productivity, and biomass harvests; (2) the rainforest, which occupies ≈20% of Biosphere 2 area, may be responsible for 50% of total community production and respiration of oxygen; (3) the savannah and wetland biomes may be sources of carbon dioxide in the long term; (4) the ocean biome has less effect on atmospheric composition than the terrestrial biomes; and (5) the desert biome may lower carbon dioxide in the atmosphere as much as 2000 ppm during low light. Diurnal curve analyses of oxygen and carbon dioxide from early 1995 produced an average community gross production rate of 23 g O2/m2 per day, a community respiration rate of 25 g O2/m2 per day, and an average carbon dioxide absorption rate of 0.2 g CO2/m2 per h.","URL":"http://www.sciencedirect.com/science/article/pii/S0925857498000949","DOI":"10.1016/S0925-8574(98)00094-9","ISSN":"0925-8574","journalAbbreviation":"Ecological Engineering","author":[{"family":"Engel","given":"Victor C."},{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1999",6]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/ID75SPNN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ID75SPNN","type":"paper-conference","title":"Toward a Mathematical Formulation of the Maximum Em-Power Principle","publisher":"The Center for Environmental Policy, Department of Environmental Engineering Sciences, University of Florida","publisher-place":"University of Florida","page":"155-170","volume":"1","event":"First biennial emergy analysis research conference","event-place":"University of Florida","ISBN":"0-9707325-0-3","call-number":"0004","language":"English","author":[{"family":"Giannantoni","given":"Corrado"}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/IEF8EE76","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IEF8EE76","type":"article","title":"A javascript tool for building user interfaces","URL":"https://korynunn.github.io/fastn/","author":[{"family":"Nunn","given":"Kory"}],"issued":{"date-parts":[["2015"]]}}},{"key":"http://zotero.org/users/39885/items/IGKFVAJQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IGKFVAJQ","type":"report","title":"Data Specification on Natural Risk Zones - Technical Guidelines","source":"CiteULike","abstract":"[Interoperability of Spatial Data Sets and Services - General Executive Summary] \n\nThe challenges regarding the lack of availability, quality, organisation, accessibility, and sharing of spatial information are common to a large number of policies and activities and are experienced across the various levels of public authority in Europe. In order to solve these problems it is necessary to take measures of coordination between the users and providers of spatial information. The Directive 2007/2/EC of the Europe an Parliament and of the Council adopted on 14 March 2007 aims at establishing an Infrastructure for Spatial Information in the European Community (INSPIRE) for environmental policies, or policies and activities that have an impact on the environment.\nINSPIRE is based on the infrastructures for spatial information that are created and maintained by the Member States. To support the establishment of a European infrastructure, Implementing Rules addressing the following components of the infrastructure have been specified: metadata, interoperability of spatial data sets (as described in Annexes I, II, III of the Directive) and spatial data services, network services, data and service sharing, and monitoring and reporting procedures. INSPIRE does not require collection of new data. However, after the period specified in the Directive 2 Member States have to make their data available according to the Implementing Rules. Interoperability in INSPIRE means the possibility to combine spatial data and services from different sources across the European Community in a consistent way without involving specific efforts of humans or machines. It is important to note that ―interoperability‖ is understood as providing access to spatial data sets through network services, typically via Internet. Interoperability may be achieved by either changing (harmonising) and storing existing data sets or transforming them via services for publication in the INSPIRE infrastructure. It is expected that users will spend less time and efforts on understanding and integrating data when they build their applications based on data delivered in accordance with INSPIRE.\nIn order to benefit from the endeavours of international standardisation bodies and organisations established under international law their standards and technical means have been utilised and referenced, whenever possible.\nTo facilitate the implementation of INSPIRE, it is important that all stakeholders have the opportunity to participate in specification and development.\nFor this reason, the Commission has put in place a consensus building process involving data users, and providers together with representatives of industry, research and government. These stakeholders, organised through Spatial Data Interest Communities (SDIC) and Legally Mandated Organisations (LMO) 3, have provided reference materials, participated in the user requirement and technical 4 surveys, proposed experts for the Data Specification Drafting Team 5 , the Thematic Working Groups 6 and other ad-hoc cross-thematic technical groups and participated in the public stakeholder consultations on draft versions of the data specifications. These consultations covered expert reviews as well as feasibility and fitness-for-purpose testing of the data specifications 7 . This open and participatory approach was successfully used during the development of the data specifications on Annex I, II and III data themes as well as during the preparation of the Implementing Rule on Interoperability of Spatial Data Sets and Services 8 for Annex I spatial data themes and of its amendment regarding the themes of Annex II and III . The development framework elaborated by the Data Specification Drafting Team aims at keeping the data specifications of the different themes coherent. It summarises the methodology to be used for the development of the data specifications , providing a coherent set of requirements and recommendations to achieve interoperability. The pillars of the framework are the following technical documents:\n\n[1] The Definition of Annex Themes and Scope describes in greater detail the spatial data themes defined in the Dire ctive, and thus provides a sound starting point for the thematic aspects of the data specification development.\n\n[2] The Generic Conceptual Model defines the elements necessary for interoperability and data harmonisation including cross - theme issues. It specifies requirements and recommendations with regard to data specification elements of common use, like the spatial and temporal schema, unique identifier management, object referencing , some common code lists, etc. Those requirements of the Generic Conceptual Model that are directly implementable are included in the Implementing Rule on Interoperability of Spatial Data Sets and Services.\n\n[3] The Methodology for the Development of Data Specifications defines a repeatable methodology. It describes how to arrive from user requirements to a data specification through a number of steps including use-case development, initial specification development and analysis of analogies and gaps for further specification refinement.\n\n[4] The Guidelines for the Encoding of Spatial Data defines how geographic information can be encoded to enable transfer processes between the systems of the data providers in the Member States. Even though it does not specify a mandatory encoding rule it sets GML (ISO 19136) as the default encoding for INSPIRE.\n\n[5] The Guidelines for the use of Observations & Measurements and Sensor Web Enablement - related standards in INSPIRE Annex II and III data specification development provides guidelines on how the ―Observations and Measurements standard (ISO 19156) is to be used within INSPIRE.\n\n[6] The Common data models are a set of documents that specify data models that are referenced by a number of different data specifications. These documents include generic data model s for networks, coverages and activity complexes.\n\n\nThe structure of the data specifications is based on the ―ISO 19131 Geographic information - Data product specifications standard. They include the technical documentation of the application schema, the spatial object types with their properti es, and other specifics of the spatial data themes using natural language as well as a formal conceptual schema language 10 A consolidated model repository, feature concept dictionary, and glossary are being maintained to support the consistent specification development and potential further reuse of specification elements. The consolidated model consists of the harmonised models of the relevant standards from the ISO 19100 series, the INSPIRE Generic Conceptual Model, and the application schemas 11 developed for each spatial data theme. The multilingual INSPIRE Feature Concept Dictionary contains the definition and description of the INSPIRE themes together with the definition of the spatial object types present in the specification. The INSPIRE Glossary defines all the terms (beyond the spatial object types) necessary for understanding the INSPIRE documentation including the terminology of other components (metadata, network services, data sharing, and monitoring). By listing a number of requirements and making the necessary recommendations, the data specifications enable full system interoperability across the Member States, within the scope of the application areas targeted by the Directive. The data specifications (in their version 3.0) are published as technical guidelines and provide the basis for the content of the Implementing Rule on Interoperability of Spatial Data Sets and Services 12 . The content of the Implementing Rule is extracted from the data specifica tions, considering short - and medium - term feasibility as well as cost - benefit considerations. The requirements included in the Implementing Rule are legally binding for the Member States according to the timeline specified in the INSPIRE Directive . In addition to providing a basis for the in teroperability of spatial data in INSPIRE, the data specification development framework and the thematic data specifications can be reused in other environments at local, regional, national and global level contributing to improvements in the coherence and interoperability of data in spatial data infrastructures.","URL":"http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_NZ_v3.0.pdf","author":[{"family":"Harrison","given":"Matthew"},{"family":"Thomas","given":"Florian"},{"family":"Barredo","given":"José"},{"family":"Bojilov","given":"Venco"},{"family":"Castella","given":"Raquel"},{"family":"Cerba","given":"Otakar"},{"family":"Exadaktylos","given":"George"},{"family":"Isidro","given":"Miguel"},{"family":"Pfeiffer","given":"Manuela"},{"family":"Tomas","given":"Robert"},{"family":"Giovando","given":"Cristiano"},{"family":"Camia","given":"Andrea"}],"collection-editor":[{"family":"Thomas","given":"Florian"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/II8H36M7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/II8H36M7","type":"book","title":"Picturing Knowledge : Historical and Philosophical Problems Concerning the Use of Art in Science","collection-title":"Toronto Studies in Philosophy","publisher":"University of Toronto Press","publisher-place":"Toronto","source":"EBSCOhost","event-place":"Toronto","abstract":"The traditional concept of scientific knowledge places a premium on thinking, not visualizing. Scientific illustrations are still generally regarded as devices that serve as heuristic aids when reasoning breaks down. When scientific illustration is not used in this disparaging sense as a linguistic aid, it is most often employed as a metaphor with no special visual content. What distinguishes pictorial devices as resources for doing science, and the special problems that are raised by the mere presence of visual elements in scientific treatises, tends to be overlooked.The contributors to this volume examine the historical and philosophical issues concerning the role that scientific illustration plays in the creation of scientific knowledge. They regard both text and picture as resources that scientists employ in their practical activities, their value as scientific resources deriving from their ability to convey information.","URL":"http://search.ebscohost.com/login.aspx?direct=true&db=nlebk&AN=468383&site=ehost-live","ISBN":"978-0-8020-7439-3","shortTitle":"Picturing Knowledge","language":"English","author":[{"family":"Baigrie","given":"Brian S."}],"issued":{"date-parts":[["1996"]]},"accessed":{"date-parts":[["2016",3,13]]}}},{"key":"http://zotero.org/users/39885/items/IKEAFPHU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IKEAFPHU","type":"article","title":"A practical guide to risk assessment: How principles-based risk assessment enables organizations to take the right risks","publisher":"Price Waterhouse Coopers","URL":"http://www.pwc.com/en_us/us/issues/enterprise-risk-management/assets/risk_assessment_guide.pdf","author":[{"family":"PWC","given":""}],"issued":{"date-parts":[["2008"]]}}},{"key":"http://zotero.org/users/39885/items/IKS4R29B","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IKS4R29B","type":"chapter","title":"Emergy and biogeochemical cycles","container-title":"Ecological Physical Chemistry: Proceedings of an International Workshop","publisher":"Elsevier Science Publishers","publisher-place":"Amsterdam","page":"25-56","event-place":"Amsterdam","call-number":"0022","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1991"]]}}},{"key":"http://zotero.org/users/39885/items/IMDXS78V","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IMDXS78V","type":"article-journal","title":"System of Systems Engineering and   Family of Systems Engineering   From a Standards, V-Model, and Dual-V Model  Perspective","container-title":"IEEE International Conference of System of Systems Engineering","URL":"http://www.incose.org/hra/past_events/IEEE2009_SoSEandFoSE_JOC_090223.pdf","author":[{"family":"Clark","given":"John"}],"issued":{"date-parts":[["2009"]]}}},{"key":"http://zotero.org/users/39885/items/IRNZAS4F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IRNZAS4F","type":"article-journal","title":"Deep learning in neural networks: An overview","container-title":"Neural Networks","page":"85-117","volume":"61","source":"ScienceDirect","abstract":"In recent years, deep artificial neural networks (including recurrent ones) have won numerous contests in pattern recognition and machine learning. This historical survey compactly summarizes relevant work, much of it from the previous millennium. Shallow and Deep Learners are distinguished by the depth of their credit assignment paths, which are chains of possibly learnable, causal links between actions and effects. I review deep supervised learning (also recapitulating the history of backpropagation), unsupervised learning, reinforcement learning &amp; evolutionary computation, and indirect search for short programs encoding deep and large networks.","URL":"http://www.sciencedirect.com/science/article/pii/S0893608014002135","DOI":"10.1016/j.neunet.2014.09.003","ISSN":"0893-6080","shortTitle":"Deep learning in neural networks","journalAbbreviation":"Neural Networks","author":[{"family":"Schmidhuber","given":"Jürgen"}],"issued":{"date-parts":[["2015",1]]},"accessed":{"date-parts":[["2016",3,8]]}}},{"key":"http://zotero.org/users/39885/items/ITC69XWP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ITC69XWP","type":"article-journal","title":"Unconventional gas development: why a regional community said no","container-title":"Geographical Research","page":"263–279","volume":"52","issue":"3","source":"Google Scholar","URL":"http://onlinelibrary.wiley.com/doi/10.1111/1745-5871.12071/full","shortTitle":"Unconventional gas development","author":[{"family":"Luke","given":"Hanabeth"},{"family":"Lloyd","given":"David"},{"family":"Boyd","given":"William"},{"family":"EXTER","given":"KRISTIN"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/ITW99SA6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ITW99SA6","type":"article-journal","title":"A statement of purpose and goals","container-title":"Energy","page":"1","volume":"1","issue":"1","URL":"http://www.sciencedirect.com/science/article/B6V2S-498M258-XH/1/15388c8419e1ecedfa02a719f6e5be7a","DOI":"10.1016/0360-5442(76)90051-7","call-number":"0007","author":[{"family":"Penner","given":"S. S."}],"issued":{"date-parts":[["1976",3]]},"accessed":{"date-parts":[["2008",7,22]]}}},{"key":"http://zotero.org/users/39885/items/IUD56B2U","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IUD56B2U","type":"article-journal","title":"Exact computation of emergy based on a mathematical reinterpretation of the rules of emergy algebra","container-title":"Ecological Modelling","page":"101-113","volume":"230","source":"ScienceDirect","abstract":"The emergy algebra is based on four rules, the use of which is sometimes confusing or reserved only to the experts of the domain. The emergy computation does not obey conservation logic (i.e. emergy computation does not obey Kirchoff-like circuit law). In this paper the authors propose to reformulate the emergy rules into three axioms which provide (i) a rigourous mathematical framework for emergy computation and (ii) an exact recursive algorithm to compute emergy within a system of interconnected processes at steady state modeled by an oriented graph named the emergy graph.\n\nBecause emergy algebra follows a logic of memorization, the evaluation principles deal with paths in the emergy graph. The underlying algebraic structure is the set of non-negative real numbers operated on by three processes, the maximum (max), addition (+) and multiplication (·). The maximum is associated with the co-product problem. Addition is linked with the split problem or with the independence of two emergy flows. And multiplication is related to the logic of memorization. The axioms describe how to use the different operators max, + and · to combine flows without any confusion or ambiguity. The method is tested on five benchmark emergy examples.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380011006065","DOI":"10.1016/j.ecolmodel.2011.12.018","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Le Corre","given":"O."},{"family":"Truffet","given":"L."}],"issued":{"date-parts":[["2012",4,10]]},"accessed":{"date-parts":[["2015",2,1]]}}},{"key":"http://zotero.org/users/39885/items/IUJ8IPPE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IUJ8IPPE","type":"article-journal","title":"Ortwin Renn, Risk Governance: Coping with Uncertainty in a Complex World: Earthscan, London, 2008, 455 pp. Paperback, ₤29.95; hardcover, ₤85.00. Figs. and tables. Distrib. Macmillan, London","container-title":"Natural Hazards","page":"313-314","volume":"48","issue":"2","source":"CrossRef","URL":"http://link.springer.com/10.1007/s11069-008-9286-7","DOI":"10.1007/s11069-008-9286-7","ISSN":"0921-030X, 1573-0840","shortTitle":"Ortwin Renn, Risk Governance","language":"en","author":[{"family":"Castaños","given":"Heriberta"},{"family":"Lomnitz","given":"Cinna"}],"issued":{"date-parts":[["2009",2]]},"accessed":{"date-parts":[["2015",10,7]]}}},{"key":"http://zotero.org/users/39885/items/IURW7VFP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IURW7VFP","type":"book","title":"Model-driven testing: using the UML testing profile","publisher":"Springer","number-of-pages":"176","source":"Google Books","ISBN":"978-3-540-72562-6","shortTitle":"Model-driven testing","author":[{"family":"Baker","given":"Paul"},{"family":"Dai","given":"Zhen Ru"},{"family":"Grabowski","given":"Jens"},{"family":"Haugen","given":"Oystein"},{"family":"Schieferdecker","given":"Ina"}],"issued":{"date-parts":[["2008"]]}}},{"key":"http://zotero.org/users/39885/items/IZIGHQJM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/IZIGHQJM","type":"report","title":"Administration of the Improving Water Information Program","publisher":"Australian National Audit Office","publisher-place":"Australia","genre":"Performance Audit","event-place":"Australia","abstract":"The objective of the audit was to assess the effectiveness of the Bureau of Meteorology’s implementation of the Improving Water Information Program.","URL":"http://www.anao.gov.au/Publications/Audit-Reports/2013-2014/Administration-of-the-Improving-Water-Information-Program","number":"Audit Report No.18 2013–14","language":"en-GB","author":[{"family":"Eddie, Jennifer","given":""},{"family":"Simpson, Mark","given":""}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",10,10]]}}},{"key":"http://zotero.org/users/39885/items/J2AJAHAK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/J2AJAHAK","type":"article-journal","title":"The solar transformity of oil and petroleum natural gas","container-title":"Ecological Modelling","page":"212-220","volume":"186","issue":"2","abstract":"This paper presents an emergy evaluation of the biogeochemical process of petroleum formation. Unlike the previous calculation, in which the transformity of crude oil was back calculated from the relative efficiency of electricity production and factors relating coal to transportation fuels and transportation fuels to crude oil, we analyzed the geochemical process of petroleum formation (naftogenesis) to determine the transformities of oil and natural gas. We assumed that the process of oil and gas production is a steady state process in which all the emergy required is captured in the initial input. For such a system, we can use the mass concentration of the initial input to determine the specific emergy and transformity of the products. We used the maximum photosynthetic yield in Joules of phytoplankton organic matter per Joule of sunlight as the starting point. From this initial assumption, we traced the energy transformations in the oil and gas formation process through photosynthesis, death and decay of the phytoplankton, and diagenesis to kerogen production and from kerogen through catagenesis to petroleum formation. Our results show that both methods converge to similar values for oil (54,200 solar emJoules per Joule (sej/J)) and petroleum natural gas (43,500 sej/J) increasing our confidence in the results of past emergy analyses and providing a firm basis for the calculation of transformities for oil and gas derivatives.","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6VBS-4FJ5XMC-1&_user=10&_rdoc=1&_fmt=&_orig=search&_sort=d&view=c&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=f14cc858cd030dba5e40552b7109ce29","DOI":"10.1016/j.ecolmodel.2005.01.015","call-number":"0016","author":[{"family":"Bastianoni","given":"Simone"},{"family":"Campbell","given":"Daniel"},{"family":"Susani","given":"Ludovico"},{"family":"Tiezzi","given":"Enzo"}],"issued":{"date-parts":[["2005",8,15]]},"accessed":{"date-parts":[["2008",3,20]]}}},{"key":"http://zotero.org/users/39885/items/J3CC2WG3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/J3CC2WG3","type":"book","title":"Electric Power Distribution Handbook, Second Edition","publisher":"CRC Press","number-of-pages":"900","source":"Google Books","abstract":"Of the \"big three\" components of electrical infrastructure, distribution typically gets the least attention. In fact, a thorough, up-to-date treatment of the subject hasn’t been published in years, yet deregulation and technical changes have increased the need for better information. Filling this void, the Electric Power Distribution Handbook delivers comprehensive, cutting-edge coverage of the electrical aspects of power distribution systems. The first few chapters of this pragmatic guidebook focus on equipment-oriented information and applications such as choosing transformer connections, sizing and placing capacitors, and setting regulators. The middle portion discusses reliability and power quality, while the end tackles lightning protection, grounding, and safety.  The Second Edition of this CHOICE Award winner features:   1 new chapter on overhead line performance and 14 fully revised chapters incorporating updates from several EPRI projects New sections on voltage optimization, arc flash, and contact voltage Full-color illustrations throughout, plus fresh bibliographic references, tables, graphs, methods, and statistics Updates on conductor burndown, fault location, reliability programs, tree contacts, automation, and grounding and personnel protection Access to an author-maintained support website, distributionhandbook.com, with problems sets, resources, and online apps  An unparalleled source of tips and solutions for improving performance, the Electric Power Distribution Handbook, Second Edition provides power and utility engineers with the technical information and practical tools they need to understand the applied science of distribution.","URL":"http://distributionhandbook.com/calculators/mdpad.html?UrbanPrimary.md","ISBN":"978-1-4665-9865-2","language":"en","author":[{"family":"Short","given":"Thomas Allen"}],"issued":{"date-parts":[["2014",5,19]]}}},{"key":"http://zotero.org/users/39885/items/J3SPIQ26","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/J3SPIQ26","type":"article","title":"The Emergy Synthesis of Religion and Science","publisher":"Center for Environmental Policy, University of Florida","call-number":"0000","author":[{"family":"Scienceman","given":"David M"}],"issued":{"date-parts":[["1995"]]}}},{"key":"http://zotero.org/users/39885/items/J5BA8CDV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/J5BA8CDV","type":"article-journal","title":"Cytotoxicity of bilirubin for human fibroblasts and rat astrocytes in culture. Effect of the ratio of bilirubin to serum albumin","container-title":"Clinica Chimica Acta","page":"103-114","volume":"256","issue":"2","abstract":"The sensitivity of rat brain astrocytes and human fibroblasts in culture to unconjugated bilirubin was investigated. Medium containing 6 [mu]mol/1 bilirubin and increasing concentrations of human serum albumin giving ratios of 0.5-1.5 that resulted in an increase of the free bilirubin concentrations. The LDH activity in the culture medium was an index of cytolysis and the MTT assay was used as an index of mitochondrial impairment. The ratios producing half-maximum cell lysis after 24, 48, and 72h, were 1.1, 0.9 and 0.85, for astrocytes, and 1.2, 0.75 and 0.75, for fibroblasts. Mitochondrial activity decreased after 24 h for ratio = 0.7 and partly recovered at 48 h. Mitochondrial activity was more impaired in fibroblasts than in astrocytes above ratio = 0.7. The cytotoxic effects were linked to the free bilirubin concentration. We conclude that astrocytes are less sensitive to bilirubin cytotoxic effects than are fibroblasts.","URL":"http://www.sciencedirect.com/science/article/B6T57-3S06XJB-19/2/21bc60de5bb7902f60524e8e931b7bd2","DOI":"10.1016/S0009-8981(96)06407-8","call-number":"0030","author":[{"family":"Chuniaud","given":"Laurence"},{"family":"Dessante","given":"Mich�le"},{"family":"Chantoux","given":"Fran�oise"},{"family":"Blondeau","given":"Jean-Paul"},{"family":"Francon","given":"Jacques"},{"family":"Trivin","given":"Fran�ois"}],"issued":{"date-parts":[["1996",12,30]]},"accessed":{"date-parts":[["2008",8,17]]}}},{"key":"http://zotero.org/users/39885/items/J7GV3JK2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/J7GV3JK2","type":"book","title":"SolidWorks for dummies","publisher":"Wiley","publisher-place":"Hoboken  N.J.","event-place":"Hoboken  N.J.","ISBN":"978-0-7645-9555-4","author":[{"family":"Jankowski","given":"Gregory"}],"issued":{"date-parts":[["2005"]]}}},{"key":"http://zotero.org/users/39885/items/J7I47G76","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/J7I47G76","type":"article-journal","title":"Hydrological information for sustainable development/De l'information hydrologique pour un développement durable","container-title":"Hydrological sciences journal","page":"481–492","volume":"42","issue":"4","source":"Google Scholar","URL":"http://itia.ntua.gr/hsj/42/hysj_42_04_0481.pdf","author":[{"family":"Burn","given":"D. H"}],"issued":{"date-parts":[["1997"]]}}},{"key":"http://zotero.org/users/39885/items/J84BG58J","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/J84BG58J","type":"report","title":"Framework for risk-based assessment of cumulative effects to groundwater from mining","collection-title":"Framework for Assessing Potential Local and Cumulative Effects of Mining on Groundwater Resources","publisher":"Sinklair Knight Mertz & National Water Commission","publisher-place":"Australia","event-place":"Australia","number":"3","author":[{"family":"Howe","given":"Paul"},{"family":"Moran","given":"Chris"},{"family":"Vink","given":"Sue"},{"family":"Straughton","given":"Garry"}],"issued":{"date-parts":[["2010",12,3]]}}},{"key":"http://zotero.org/users/39885/items/J8PQTUIQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/J8PQTUIQ","type":"book","title":"Mathematische Schriften. Hrsg. von C.I. Gerhardt","publisher":"Berlin A. Asher","number-of-pages":"556","source":"Internet Archive","abstract":"14","URL":"http://archive.org/details/mathematischesch04leibuoft","call-number":"AGB-4884","language":"ger","author":[{"family":"Leibniz","given":"Gottfried Wilhelm"},{"family":"Gerhardt","given":"Karl Immanuel"}],"issued":{"date-parts":[["1863"]]},"accessed":{"date-parts":[["2016",2,1]]}}},{"key":"http://zotero.org/users/39885/items/JATRT3CD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JATRT3CD","type":"article-journal","title":"Promise and problems of emergy analysis","container-title":"Ecological Modelling","page":"215-225","volume":"178","issue":"1-2","abstract":"Solar Emergy is the available solar energy used up directly and indirectly to make a service or product. Although this basic concept is quite straightforward, its implications are potentially profound. H.T. Odum pioneered the development and use of emergy, and presented it as a way of understanding the behavior of self-organized systems, valuing ecological goods and services, and jointly analyzing ecological and economic systems. Unfortunately, like many groundbreaking ideas, emergy has encountered a lot of resistance and criticism, particularly from economists, physicists, and engineers. Some critics have focused on detailed practical aspects of the approach, while others have taken issue with specific parts of the theory and claims. This paper discusses the main features and criticisms of emergy and provides insight into the relationship between emergy and concepts from engineering thermodynamics, such as exergy and cumulative exergy consumption. This reveals the close link between emergy and ecological cumulative exergy consumption, and indicates that most of the criticisms of emergy are either common to all holistic approaches that account for ecosystems and other macrosystems within their systems boundaries, or a result of misunderstandings derived from a lack of communication between various disciplines, or are not relevant for engineering applications. By identifying the main points of criticisms of emergy, this paper attempts to clarify many of the common misconceptions about emergy, inform the community of emergy practitioners about the aspects that need to be communicated better or improved, and suggest solutions. Further research and interaction with other disciplines is essential to bring one of H.T. Odum’s finest contributions into the mainstream to guide humanity on “the prosperous way down.”","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6VBS-4BRPM8P-2&_user=10&_coverDate=10%2F15%2F2004&_alid=709724093&_rdoc=1&_fmt=summary&_orig=search&_cdi=5934&_sort=d&_docanchor=&view=c&_ct=1&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=63e1df22799528b23372a425fb1bdf6a","DOI":"10.1016/j.ecolmodel.2003.12.016","call-number":"0057","author":[{"family":"Hau","given":"Jorge L"},{"family":"Bakshi","given":"Bhavik R"}],"issued":{"date-parts":[["2004",10,15]]},"accessed":{"date-parts":[["2008",3,20]]}}},{"key":"http://zotero.org/users/39885/items/JAUT42KB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JAUT42KB","type":"article-journal","title":"An exercise in the natural philosophy of ecology","container-title":"Ecological Modelling","page":"167-179","volume":"158","issue":"3","source":"ScienceDirect","URL":"http://www.sciencedirect.com/science/article/pii/S0304380002002211","DOI":"10.1016/S0304-3800(02)00221-1","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Salthe","given":"S. N"}],"issued":{"date-parts":[["2002",12,31]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/JBUDI9F7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JBUDI9F7","type":"article-journal","title":"ISO 31000:2009—The New International Standard on Risk Management","container-title":"Risk Analysis","page":"887-892","volume":"30","issue":"6","source":"Wiley Online Library","URL":"http://onlinelibrary.wiley.com/doi/10.1111/j.1539-6924.2010.01397.x/abstract","DOI":"10.1111/j.1539-6924.2010.01397.x","ISSN":"1539-6924","shortTitle":"ISO 31000","language":"en","author":[{"family":"Leitch","given":"Matthew"}],"issued":{"date-parts":[["2010",6,1]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/JC2H2FT9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JC2H2FT9","type":"article-journal","title":"Simulation and evaluation with energy systems blocks","container-title":"Ecological Modelling","page":"155–173","volume":"93","issue":"1-3","source":"Google Scholar","author":[{"family":"Odum","given":"H. T"},{"family":"Peterson","given":"N."}],"issued":{"date-parts":[["1996"]]}}},{"key":"http://zotero.org/users/39885/items/JC759XIX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JC759XIX","type":"chapter","title":"Model Risk and Uncertainty—Illustrated with Examples from Mathematical Finance","container-title":"Risk - A Multidisciplinary Introduction","publisher":"Springer International Publishing","page":"279-306","source":"link.springer.com","abstract":"Stochastic modeling techniques have become increasingly popular during the last decades, particularly in mathematical finance since the groundbreaking work of Bachelier (Théorie de la spéculation, Gauthier-Villars, Paris, 1900), Samuelson (Ind. Manag. Rev. 6(2):13–39, 1965), and Black and Scholes (J. Polit. Econ. 81(3):637–654, 1973). Essentially, all models are wrong in the sense that they simplify reality. However, there are numerous models available to model particular phenomena of financial markets and calculated option prices, hedging strategies, portfolio allocations, etc. depend on the chosen model. This gives rise to the question which model to choose from the rich pool of available models and, second, how to determine the correct parameters after having selected some specific model class. Thus, one is exposed to both model and parameter risk (or uncertainty). In this survey, we first provide an inside view into the principles of stochastic modeling, illustrated with examples from mathematical finance. Afterwards, we define model risk and uncertainty according to Knight (Risk, uncertainty, and profit, Hart, Schaffner & Marx, Chicago, 1921) and present some methods how to deal with model risk and uncertainty.","URL":"http://link.springer.com/chapter/10.1007/978-3-319-04486-6_10","ISBN":"978-3-319-04485-9","language":"en","author":[{"family":"Bannör","given":"Karl F."},{"family":"Scherer","given":"Matthias"}],"editor":[{"family":"Klüppelberg","given":"Claudia"},{"family":"Straub","given":"Daniel"},{"family":"Welpe","given":"Isabell M."}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",2,10]]}}},{"key":"http://zotero.org/users/39885/items/JEA4PZB9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JEA4PZB9","type":"webpage","title":"Interactive Maps with D3.js, Three.js, and Mapbox","container-title":"delimited","abstract":"Over the past couple of weeks I have been experimenting with creating 2D \nmaps that can be explored in three dimensional space using D3.js and \nThree.js.  The goal was to produce some highly polished prototypes with \nmultiple choropleth maps that could be easily navigated on a single page.  \nAdditionally, I wanted to make sure to address some of the common tasks \nthat arise when presenting map data such as applying well-formatted titles, \nlegends and elegantly handling mouse-over events. The two examples \npresented below use D3.js for for generating nested HTML elements that \ncontain the maps, titles and labeling information and use Three.js to \nposition the elements in 3D space using CSS 3D transforms.  Importantly, \nthere is no WebGL used in these examples.  Everything is rendered in the \nDOM using CSS 3D transforms which, at the time of writing, has much wider \nbrowser support than WebGL.","URL":"http://www.delimited.io/blog/2014/5/10/maps-with-d3js-threejs-and-mapbox","accessed":{"date-parts":[["2015",11,10]]}}},{"key":"http://zotero.org/users/39885/items/JEN64DAP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JEN64DAP","type":"article-journal","title":"Capital volume one: The process of production of capital","source":"Google Scholar","URL":"http://www.citeulike.org/group/2482/article/1269087","shortTitle":"Capital volume one","author":[{"family":"Marx","given":"Karl"}],"issued":{"date-parts":[["1867"]]},"accessed":{"date-parts":[["2015",11,4]]}}},{"key":"http://zotero.org/users/39885/items/JH6XHHBM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JH6XHHBM","type":"article-journal","title":"Monetary and Fiscal Policies for a Finite Planet","container-title":"Sustainability","page":"2802-2826","volume":"5","issue":"6","source":"www.mdpi.com","abstract":"Current macroeconomic policy promotes continuous economic growth. Unemployment, poverty and debt are associated with insufficient growth. Economic activity depends upon the transformation of natural materials, ultimately returning to the environment as waste. Current levels of economic throughput exceed the planet’s carrying capacity. As a result of poorly constructed economic institutions, society faces the unacceptable choice between ecological catastrophe and human misery. A transition to a steady-state economy is required, characterized by a rate of throughput compatible with planetary boundaries. This paper contributes to the development of a steady-state economy by addressing US monetary and fiscal policies. A steady-state monetary policy would support counter-cyclical, debt-free vertical money creation through the public sector, in ways that contribute to sustainable well-being. The implication for a steady-state fiscal policy is that any lending or spending requires a careful balance of recovery of money, not as a means of revenue, but as an economic imperative to meet monetary policy goals.  A steady-state fiscal policy would prioritize targeted public goods investments, taxation of ecological “bads” and economic rent and implementation of progressive tax structures. Institutional innovations are considered, including common asset trusts, to regulate throughput, and a public monetary trust, to strictly regulate money supply.","URL":"http://www.mdpi.com/2071-1050/5/6/2802","DOI":"10.3390/su5062802","language":"en","author":[{"family":"Farley","given":"Joshua"},{"family":"Burke","given":"Matthew"},{"family":"Flomenhoft","given":"Gary"},{"family":"Kelly","given":"Brian"},{"family":"Murray","given":"D. Forrest"},{"family":"Posner","given":"Stephen"},{"family":"Putnam","given":"Matthew"},{"family":"Scanlan","given":"Adam"},{"family":"Witham","given":"Aaron"}],"issued":{"date-parts":[["2013",6,20]]},"accessed":{"date-parts":[["2015",3,4]]}}},{"key":"http://zotero.org/users/39885/items/JH72M42P","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JH72M42P","type":"article-journal","title":"Systems thinking and a proposal for a neurological positivism","container-title":"Systems Research","page":"313-321","volume":"5","issue":"4","source":"Wiley Online Library","abstract":"Three traditional positivisms are reviewed briefly; these positivisms are subsumed under a newly proposed neurological positivism. Neurological positivism links world, brain and mind in a conceptual model which will guide research efforts in all three domains; it proposes that the preinferential data for what is knowable are in the organization and algorithms of the neurological order. Four postulates arise from this assertion: 1. the neurological order represents the ‘prime calculus’ for all knowing; 2. homological rules of transformation fully link world, brain and mind; 3. everything knowable emerges as the result of reciprocal projective mapping between the environment and the neurological order; 4. knowledge, through reciprocal projective mapping, emerges in a Darwinian fashion. Three interrelated theoretical models which underlie neurological positivism are described: 1. the computational characteristics of collective-decision neuron circuitry; 2. Darwinian neuron group selection; and 3. reciprocal projective mapping between brain and environment. Implications of neurological positivism are discussed briefly. It is concluded that neurological positivism is a systems view of world, brain and mind relationships and, that systems thinking may represent, in a general sense, a close approximation of the prime calculus of the neurological order of all nervous systems. Man is the measure of all things: Of that which it is, and that which it is not","URL":"http://onlinelibrary.wiley.com.ezproxy.library.uq.edu.au/doi/10.1002/sres.3850050404/abstract","DOI":"10.1002/sres.3850050404","ISSN":"1099-1735","journalAbbreviation":"Syst. Res.","language":"en","author":[{"family":"Vandervert","given":"Larry R."}],"issued":{"date-parts":[["1988",12,1]]},"accessed":{"date-parts":[["2016",2,20]]}}},{"key":"http://zotero.org/users/39885/items/JHB8QUEX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JHB8QUEX","type":"book","title":"Thermodynamics and Ecological Modelling (Environmental & Ecological","publisher":"CRC","edition":"1","ISBN":"1-56670-272-0","call-number":"0000","author":[{"family":"Jorgensen","given":"Sven E."}],"issued":{"date-parts":[["2000",9,28]]}}},{"key":"http://zotero.org/users/39885/items/JHUZ4U9T","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JHUZ4U9T","type":"article-journal","title":"Applying the Analytic Hierarchy Process (AHP) to build a strategic framework for technology roadmapping","container-title":"Mathematical and Computer Modelling","collection-title":"Decision Making with the Analytic Hierarchy Process and the Analytic Network Process","page":"1071-1080","volume":"46","issue":"7–8","source":"ScienceDirect","abstract":"The development of a new concept called the Technology Development Envelope (TDE) is presented in this paper. The TDE is developed to transform the technology roadmapping approach to a level in which it is dynamic, flexible, and operationalizable. This new approach provides an effective way to help organizations to overcome the challenge of keeping a roadmap alive. The paper emphasizes how the AHP is applied as a part of the TDE framework.","URL":"http://www.sciencedirect.com/science/article/pii/S0895717707001069","DOI":"10.1016/j.mcm.2007.03.015","ISSN":"0895-7177","journalAbbreviation":"Mathematical and Computer Modelling","author":[{"family":"Gerdsri","given":"Nathasit"},{"family":"Kocaoglu","given":"Dundar F."}],"issued":{"date-parts":[["2007",10]]},"accessed":{"date-parts":[["2016",2,16]]}}},{"key":"http://zotero.org/users/39885/items/JI45QTMN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JI45QTMN","type":"paper-conference","title":"The Application Of Electrical Models To The Study Of Recycling Operations In Gas-Distillate Field","publisher":"American Petroleum Institute","source":"www-onepetro-org.ezproxy.library.uq.edu.au","event":"Drilling and Production Practice","URL":"https://www-onepetro-org.ezproxy.library.uq.edu.au/conference-paper/API-41-228","language":"english","author":[{"family":"Hurst","given":"William"},{"family":"McCarty","given":"G. M."}],"issued":{"date-parts":[["1941",1,1]]},"accessed":{"date-parts":[["2015",2,17]]}}},{"key":"http://zotero.org/users/39885/items/JIRGGEQK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JIRGGEQK","type":"book","title":"Nature & Mind: Selected Essays Presented to Him on the Occasion of His 70th Birthday, With a Bibliography of His Writings","publisher":"Columbia University Press","source":"Amazon.com","call-number":"0000","shortTitle":"Nature & Mind","author":[{"family":"Woodbridge","given":"Frederick J.E."}],"issued":{"date-parts":[["1937"]]}}},{"key":"http://zotero.org/users/39885/items/JITJHBTZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JITJHBTZ","type":"paper-conference","title":"S-Sensors: Integrating physical world inputs with social networks using wireless sensor networks","container-title":"2009 International Conference on Intelligent Sensors, Sensor Networks and Information Processing (ISSNIP)","publisher-place":"Melbourne, Australia","page":"213-218","source":"CrossRef","event":"2009 International Conference on Intelligent Sensors, Sensor Networks and Information Processing (ISSNIP)","event-place":"Melbourne, Australia","URL":"http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5416815","DOI":"10.1109/ISSNIP.2009.5416815","shortTitle":"S-Sensors","author":[{"family":"Baqer","given":"M."},{"family":"Kamal","given":"Adel"}],"issued":{"date-parts":[["2009",12]]},"accessed":{"date-parts":[["2011",7,4]]}}},{"key":"http://zotero.org/users/39885/items/JJ75CAR3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JJ75CAR3","type":"paper-conference","title":"Bioregenerative Systems","publisher":"NASA (Unspecified Center)","abstract":"Bioregenerative life support systems for long duration space flights - Hydrogenomonas biosynthesis","URL":"http://ntrs.nasa.gov/search.jsp?N=0&Ntk=All&Ntt=19680016735&Ntx=mode%20matchallpartial%20","DOI":"19680016735","note":"Search All: 19680016735;","language":"en","author":[{"family":"NASA","given":""}],"issued":{"date-parts":[["1968"]]},"accessed":{"date-parts":[["2013",3,5]]}}},{"key":"http://zotero.org/users/39885/items/JJMJGXK3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JJMJGXK3","type":"article-journal","title":"An Analog Com-puter for the Oxygen Sag Curve","container-title":"Jour. San. Eng. Div., Amer. Soc. Civil Engrs","volume":"84","source":"Google Scholar","author":[{"family":"Sinkoff","given":"M. D"},{"family":"Geilker","given":"C. D"},{"family":"Rennerfelt","given":"J. G"}]}},{"key":"http://zotero.org/users/39885/items/JKX7JWFJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JKX7JWFJ","type":"book","title":"Solutions of Engineering Problems by Dynamical Analogies","publisher":"Van Nost. Reinhold","number-of-pages":"478","source":"Amazon.com","ISBN":"0-442-06290-7","author":[{"family":"Olson","given":"Harry F"}],"issued":{"date-parts":[["1967",1]]}}},{"key":"http://zotero.org/users/39885/items/JPPXF3MD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JPPXF3MD","type":"article-journal","title":"Use of thermodynamic and non-linear models to study energy cycles in ecology","container-title":"Nonlinear Analysis: Theory, Methods & Applications","collection-title":"Proceedings of the Third World Congress of Nonlinear Analysts","page":"4445-4454","volume":"47","issue":"7","source":"ScienceDirect","URL":"http://www.sciencedirect.com/science/article/pii/S0362546X01005582","DOI":"10.1016/S0362-546X(01)00558-2","ISSN":"0362-546X","journalAbbreviation":"Nonlinear Analysis: Theory, Methods & Applications","author":[{"family":"Panzieri","given":"Margherita"},{"family":"Porcelli","given":"Marcello"},{"family":"Tiezzi","given":"E. B. P."}],"issued":{"date-parts":[["2001",8]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/JR52TGM8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JR52TGM8","type":"book","title":"Essentials of human anatomy & physiology","publisher":"Benjamin/Cummings Pub. Co.","publisher-place":"Redwood City  Calif.","edition":"3rd ed.","event-place":"Redwood City  Calif.","ISBN":"978-0-8053-4804-0","author":[{"family":"Marieb","given":"Elaine"}],"issued":{"date-parts":[["1991"]]}}},{"key":"http://zotero.org/users/39885/items/JST2GT62","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JST2GT62","type":"webpage","title":"HRH launches Accounting for Sustainability at St James's Palace, London","URL":"http://www.princeofwales.gov.uk/newsandgallery/news/hrh_launches_accounting_for_sustainability_at_st_james_s_pal_1859677089.html","note":"HRH launches Accounting for Sustainability at St James's Palace, London","author":[{"family":"Clarence House","given":""}],"issued":{"date-parts":[["2008",4,10]]},"accessed":{"date-parts":[["2008",4,10]]}}},{"key":"http://zotero.org/users/39885/items/JTPVMNKG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JTPVMNKG","type":"article-journal","title":"Human-Nature Interaction in World Modeling with Modelica","container-title":"Proceedings of the 10th International Modelica Conference","page":"4","volume":"10","source":"Google Scholar","URL":"http://www.researchgate.net/profile/Rodrigo_Castro9/publication/263443286_Human-Nature_Interaction_in_World_Modeling_with_Modelica/links/0f31753ad704d50cec000000.pdf","author":[{"family":"Castro","given":"Rodrigo"},{"family":"Fritzson","given":"Peter"},{"family":"Cellier","given":"François"},{"family":"Motesharrei","given":"Safa"},{"family":"Rivas","given":"Jorge"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",10,25]]}}},{"key":"http://zotero.org/users/39885/items/JUTMMITZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JUTMMITZ","type":"paper-conference","title":"Achieving Reproducibility by Combining Provenance with Service and Workflow Versioning","container-title":"Proceedings of the 6th Workshop on Workflows in Support of Large-scale Science","collection-title":"WORKS '11","publisher":"ACM","publisher-place":"New York, NY, USA","page":"127–136","source":"ACM Digital Library","event-place":"New York, NY, USA","abstract":"Capturing and exploiting provenance information is considered to be important across a range of scientific, medical, commercial and Web applications, including recent trends towards publishing provenance-rich, executable papers. This article shows how the range of useful questions that provenance can answer is greatly increased when it is encapsulated into a system that can store and execute both current and old versions of workflows and services. e- Science Central provides a scalable, secure cloud platform for application developers. They can use it to upload data -- for storage on the cloud -- and services, which can be written in a variety of languages. These services can then be combined through workflows which are enacted in the cloud to compute over the data. When a workflow runs, a complete provenance trace is recorded. This paper shows how this provenance trace, used in conjunction with the ability to execute old versions of services and workflows (rather than just the latest versions) can provide useful information that would otherwise not be possible, including the key ability to reproduce experiments and to compare the effects of old and new versions of services on computations.","URL":"http://doi.acm.org/10.1145/2110497.2110512","DOI":"10.1145/2110497.2110512","ISBN":"978-1-4503-1100-7","author":[{"family":"Woodman","given":"Simon"},{"family":"Hiden","given":"Hugo"},{"family":"Watson","given":"Paul"},{"family":"Missier","given":"Paolo"}],"issued":{"date-parts":[["2011"]]},"accessed":{"date-parts":[["2015",12,15]]}}},{"key":"http://zotero.org/users/39885/items/JVTCIVWB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JVTCIVWB","type":"article-journal","title":"Emergy-based ecological account for the Chinese economy in 2004","container-title":"Communications in Nonlinear Science and Numerical Simulation","page":"2337-2356","volume":"13","issue":"10","abstract":"This paper provides an integrated study on the ecological account for the Chinese economy in 2004 based on emergy synthesis theory. The detailed flows of the Chinese economy is diagramed, accounted and analyzed in categories using the biophysically based ecological accounting. Through calculating environmental and economic inputs within and outside the Chinese economy, this paper discusses the Chinese international exchange, describes the resource structure, and assesses its sustainability as a whole. Also, the comparison of systematic indicators, such as emergy/dollar ratio, environmental load ratio, and emergy self-support ratio, with those of the other countries is tabled and explored to illustrate the general status of the Chinese economy in the world. Take, for example, the environmental load ratio, which was 9.29 in China 2004, it reveals that the Chinese economy put high pressure on the local environment compared with those of the environment-benign countries, such as Brazil (0.75), Australia (0.86) and New Zealand (0.81). In addition, in this paper, the accounting method of tourism is adjusted based on the previous researches.","URL":"http://www.sciencedirect.com/science/article/B6X3D-4P29KD6-1/1/4312fc45da33391d81749ed27c37af43","DOI":"10.1016/j.cnsns.2007.04.025","call-number":"0012","author":[{"family":"Jiang","given":"M.M."},{"family":"Zhou","given":"J.B."},{"family":"Chen","given":"B."},{"family":"Chen","given":"G.Q."}],"issued":{"date-parts":[["2008",12]]},"accessed":{"date-parts":[["2008",5,11]]}}},{"key":"http://zotero.org/users/39885/items/JXAAM5F8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JXAAM5F8","type":"article-journal","title":"Modern quantitative methods for environmental risk assessment: QRA SPECIAL ISSUE LEAD-IN EDITORIAL","container-title":"Environmetrics","page":"637-637","volume":"23","issue":"8","source":"CrossRef","URL":"http://doi.wiley.com/10.1002/env.2191","DOI":"10.1002/env.2191","ISSN":"11804009","shortTitle":"Modern quantitative methods for environmental risk assessment","language":"en","author":[{"family":"Guenni","given":"Lelys Bravo","non-dropping-particle":"de"},{"family":"Simmons","given":"Susan J."}],"issued":{"date-parts":[["2012",12]]},"accessed":{"date-parts":[["2015",3,13]]}}},{"key":"http://zotero.org/users/39885/items/JXQHCM8F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JXQHCM8F","type":"chapter","title":"Chemical Cycles with Energy Circuit Models","container-title":"in Changing Chemistry of the Ocean","publisher":"John Wiley","page":"223-259","call-number":"0005","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1972"]]}}},{"key":"http://zotero.org/users/39885/items/JXZ7SUZP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JXZ7SUZP","type":"book","title":"Analogue computation:theory, techniques, and applications.","publisher":"New York,","URL":"http://hdl.handle.net/2027/wu.89037597002","shortTitle":"Analogue computation","author":[{"family":"Fifer","given":"Stanley"}],"issued":{"date-parts":[["1961"]]}}},{"key":"http://zotero.org/users/39885/items/JZ59CFMX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/JZ59CFMX","type":"article-journal","title":"Experimental evaluation of NoSQL databases","container-title":"International Journal of Database Management Systems","page":"01–16","volume":"6","issue":"3","source":"Google Scholar","URL":"http://airccse.org/journal/ijdms/papers/6314ijdms01.pdf","author":[{"family":"Abramova","given":"Veronika"},{"family":"Bernardino","given":"Jorge"},{"family":"Furtado","given":"Pedro"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/K6HKVS84","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/K6HKVS84","type":"article-journal","title":"Coalbed gas-an undeveloped resource","container-title":"United States Geological Survey, Professional Paper;(United States)","volume":"1570","source":"Google Scholar","URL":"http://www.osti.gov/scitech/biblio/6877191","author":[{"family":"Rice","given":"D. D."},{"family":"Law","given":"B. E."},{"family":"Clayton","given":"J. L."}],"issued":{"date-parts":[["1993"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/K7DIM9V4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/K7DIM9V4","type":"article-journal","title":"The History and Status of General Systems Theory","container-title":"The Academy of Management Journal","page":"407-426","volume":"15","issue":"4","URL":"http://www.jstor.org/stable/255139","ISSN":"00014273","call-number":"0192","note":"ArticleType: primary_article / Issue Title: General Systems Theory / Full publication date: Dec., 1972 / Copyright © 1972 Academy of Management","author":[{"family":"Ludwig Von Bertalanffy","given":""}],"issued":{"date-parts":[["1972",12]]},"accessed":{"date-parts":[["2008",6,3]]}}},{"key":"http://zotero.org/users/39885/items/K9ETU4ZJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/K9ETU4ZJ","type":"webpage","title":"Coal Seam Gas","abstract":"Coal seam gas is a form of natural gas (methane) found in coal seams, rather than in the sandstone reservoirs that hold conventional natural gas. ...","URL":"http://www.energyandresources.vic.gov.au/earth-resources/information-for-community-and-landholders/mining-and-extractives/coal-seam-gas","language":"en-AU","author":[{"family":"VIC","given":""}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",11,13]]}}},{"key":"http://zotero.org/users/39885/items/K9ZFABP2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/K9ZFABP2","type":"article-journal","title":"On the Curzon–Ahlborn efficiency and its lack of connection to power producing processes","container-title":"Energy Conversion and Management","page":"609-615","volume":"43","issue":"5","source":"ScienceDirect","abstract":"Because some physicists continue to defend the nonexistent theory of finite time thermodynamics, additional incontrovertible experimental and theoretical evidence is provided about its irrationality and nonreality.","URL":"http://www.sciencedirect.com/science/article/pii/S019689040100067X","DOI":"10.1016/S0196-8904(01)00067-X","ISSN":"0196-8904","journalAbbreviation":"Energy Conversion and Management","author":[{"family":"Gyftopoulos","given":"E. P"}],"issued":{"date-parts":[["2002",3]]},"accessed":{"date-parts":[["2015",12,30]]}}},{"key":"http://zotero.org/users/39885/items/KB23QUMH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KB23QUMH","type":"book","title":"JavaScript: The Good Parts","publisher":"O'Reilly Media","publisher-place":"Farnham","number-of-pages":"176","edition":"1st edition","source":"Amazon.com","event-place":"Farnham","abstract":"Most programming languages contain good and bad parts, but JavaScript has more than its share of the bad, having been developed and released in a hurry before it could be refined. This authoritative book scrapes away these bad features to reveal a subset of JavaScript that's more reliable, readable, and maintainable than the language as a whole—a subset you can use to create truly extensible and efficient code.  Considered the JavaScript expert by many people in the development community, author Douglas Crockford identifies the abundance of good ideas that make JavaScript an outstanding object-oriented programming language-ideas such as functions, loose typing, dynamic objects, and an expressive object literal notation. Unfortunately, these good ideas are mixed in with bad and downright awful ideas, like a programming model based on global variables.  When Java applets failed, JavaScript became the language of the Web by default, making its popularity almost completely independent of its qualities as a programming language. In JavaScript: The Good Parts, Crockford finally digs through the steaming pile of good intentions and blunders to give you a detailed look at all the genuinely elegant parts of JavaScript, including: Syntax Objects Functions Inheritance Arrays Regular expressions Methods Style Beautiful features The real beauty? As you move ahead with the subset of JavaScript that this book presents, you'll also sidestep the need to unlearn all the bad parts. Of course, if you want to find out more about the bad parts and how to use them badly, simply consult any other JavaScript book.  With JavaScript: The Good Parts, you'll discover a beautiful, elegant, lightweight and highly expressive language that lets you create effective code, whether you're managing object libraries or just trying to get Ajax to run fast. If you develop sites or applications for the Web, this book is an absolute must.","ISBN":"978-0-596-51774-8","shortTitle":"JavaScript","language":"English","author":[{"family":"Crockford","given":"Douglas"}],"issued":{"date-parts":[["2008",5]]}}},{"key":"http://zotero.org/users/39885/items/KB2IS274","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KB2IS274","type":"article-journal","title":"The effect of emotion on cue utilization and the organization of behavior","container-title":"Psychological review","page":"183–201","volume":"66","issue":"3","source":"Google Scholar","author":[{"family":"Easterbrook","given":"J. A"}],"issued":{"date-parts":[["1959"]]}}},{"key":"http://zotero.org/users/39885/items/KB3HVJHT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KB3HVJHT","type":"article-journal","title":"Painting and Language: A Pictorial Syntax of Shapes","container-title":"Leonardo","page":"111-118","volume":"9","issue":"2","URL":"http://www.jstor.org/stable/1573117","ISSN":"0024094X","call-number":"0007","note":"In previous articles, the author proposed that paintings can have syntactic rules. In this article he develops his proposal further and shows that shapes act as syntactic elements in the languages of painting styles. He meets Nelson Goodman's objections to his proposal by showing that shapes meet the criterion of syntactic discreteness proposed by the latter to separate linguistic from other symbolic systems. His approach is to specify style as the domain of a language of painting, to show that style is syntactical and to argue that shapes are the primitive syntactic elements of style. His essay relates current research on the development of syntax for picture-reading machines to the question of syntax for paintings.","shortTitle":"Painting and Language","author":[{"family":"Carter","given":"Curtis L."}],"issued":{"date-parts":[["1976"]],"season":"Spring"},"accessed":{"date-parts":[["2008",7,22]]}}},{"key":"http://zotero.org/users/39885/items/KB9KR6ST","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KB9KR6ST","type":"article-journal","title":"Trend-preserving blending of passive and active microwave soil moisture retrievals","container-title":"Remote Sensing of Environment","page":"280-297","volume":"123","source":"ScienceDirect","abstract":"A series of satellite-based passive and active microwave instruments provide soil moisture retrievals spanning altogether more than three decades. This offers the opportunity to generate a combined product that incorporates the advantages of both microwave techniques and spans the observation period starting 1979. However, there are several challenges in developing such a dataset, e.g., differences in instrument specifications result in different absolute soil moisture values, the global passive and active microwave retrieval methods produce conceptually different quantities, and products vary in their relative performances depending on vegetation density. This paper presents an approach for combining four passive microwave products from the VU University Amsterdam/National Aeronautics and Space Administration and two active microwave products from the Vienna University of Technology. First, passive microwave soil moisture retrievals from the Scanning Multichannel Microwave Radiometer (SMMR), the Special Sensor Microwave Imager (SSM/I), and the Tropical Rainfall Measuring Mission microwave imager (TMI) instruments were scaled to the climatology of the Advanced Microwave Scanning Radiometer — Earth Observing System (AMSR-E) derived product and then all four were combined into a single merged passive microwave product. Second, active microwave soil moisture estimates from the European Remote Sensing (ERS) Scatterometer instrument were scaled to the climatology of the Advanced Scatterometer (ASCAT) derived estimates. Both were combined into a merged active microwave product. Finally, the two merged products were rescaled to a common globally available reference soil moisture dataset provided by a land surface model (GLDAS-1-Noah) and then blended into a single passive/active product. Blending of the active and passive data sets was based on their respective sensitivity to vegetation density. While this three step approach imposes the absolute values of the land surface model dataset to the final product, it preserves the relative dynamics (e.g., seasonality and inter-annual variations) of the original satellite derived retrievals. More importantly, the long term changes evident in the original soil moisture products were also preserved. The method presented in this paper allows the long term product to be extended with data from other current and future operational satellites. The multi-decadal blended dataset is expected to enhance our basic understanding of soil moisture in the water, energy and carbon cycles.","URL":"http://www.sciencedirect.com/science/article/pii/S0034425712001332","DOI":"10.1016/j.rse.2012.03.014","ISSN":"0034-4257","journalAbbreviation":"Remote Sensing of Environment","author":[{"family":"Liu","given":"Y. Y."},{"family":"Dorigo","given":"W. A."},{"family":"Parinussa","given":"R. M."},{"family":"Jeu","given":"R. A. M.","non-dropping-particle":"de"},{"family":"Wagner","given":"W."},{"family":"McCabe","given":"M. F."},{"family":"Evans","given":"J. P."},{"family":"Dijk","given":"A. I. J. M.","non-dropping-particle":"van"}],"issued":{"date-parts":[["2012",8]]},"accessed":{"date-parts":[["2014",4,2]]}}},{"key":"http://zotero.org/users/39885/items/KBBZ2AQK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KBBZ2AQK","type":"article-journal","title":"Ecological risk assessment on the system scale: A review of state-of-the-art models and future perspectives","container-title":"Ecological Modelling","page":"25-33","volume":"250","source":"ScienceDirect","abstract":"This paper reviews state-of-the-art models developed for ecological risk assessment and presents a system-oriented perspective for holistic risk evaluation and management. Ecological risk assessment (ERA), which is aimed at appraising a wide range of undesirable impacts on ecosystems exposed to a possible eco-environmental hazard, has been highly recommended for environmental decision-making. The existing system-based eco-risk models at different levels of hierarchical organization are reviewed, including food web-based models, ecosystem-based models and socio-ecological models are reviewed. Based on this inspection, an integrated framework characterizing problem formulation, risk characterization and risk assessment is depicted to illumine future ecological risk assessments. The possibility of integrating the various ERA modeling systems is addressed through examining the interconnections between models shown within the context of our diagrams. Furthermore, some refinements of the current system-level techniques are proposed to meet the requirements of risk evaluation in a holistic and regulatory context. We conclude that assessing ecological risk by using system-based models at different levels of organization in a combined way is an evolutionary step for the application of risk evaluation in environmental management.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380012005170","DOI":"10.1016/j.ecolmodel.2012.10.015","ISSN":"0304-3800","shortTitle":"Ecological risk assessment on the system scale","journalAbbreviation":"Ecological Modelling","author":[{"family":"Chen","given":"Shaoqing"},{"family":"Chen","given":"Bin"},{"family":"Fath","given":"Brian D."}],"issued":{"date-parts":[["2013",2,10]]},"accessed":{"date-parts":[["2015",12,9]]}}},{"key":"http://zotero.org/users/39885/items/KE3VZZP8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KE3VZZP8","type":"book","title":"Models of nature : ecology, conservation, and cultural revolution in Soviet Russia","publisher":"University of Pittsburgh Press","publisher-place":"Pittsburgh  Pa.","event-place":"Pittsburgh  Pa.","ISBN":"978-0-8229-5733-1","call-number":"0050","shortTitle":"Models of nature","author":[{"family":"Weiner","given":"Douglas"}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/KE9ZRZ2V","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KE9ZRZ2V","type":"article-journal","title":"Theory of Integrative Levels","container-title":"The British Journal for the Philosophy of Science","page":"59-66","volume":"5","issue":"17","URL":"http://www.jstor.org/stable/685952","ISSN":"00070882","call-number":"0133","note":"ArticleType: primary_article / Full publication date: May, 1954 / Copyright © 1954 The British Society for the Philosophy of Science","author":[{"family":"Feibleman","given":"James K."}],"issued":{"date-parts":[["1954",5]]},"accessed":{"date-parts":[["2008",7,22]]}}},{"key":"http://zotero.org/users/39885/items/KFMINSW2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KFMINSW2","type":"article-journal","title":"Strategic regional land use plans: presenting the future for coal seam gas projects in New South Wales","container-title":"Environment and Planning Law Journal","page":"113–127","volume":"29","source":"Google Scholar","shortTitle":"Strategic regional land use plans","author":[{"family":"Owens","given":"K."}],"issued":{"date-parts":[["2012"]]}}},{"key":"http://zotero.org/users/39885/items/KGHGQJ6H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KGHGQJ6H","type":"book","title":"Out of control: the new biology of machines, social systems and the economic world","publisher":"Addison-Wesley","publisher-place":"Boston","event-place":"Boston","ISBN":"0-201-48340-8","call-number":"0685","shortTitle":"Out of control","author":[{"family":"Kelly","given":"Kevin"}],"issued":{"date-parts":[["1994"]]}}},{"key":"http://zotero.org/users/39885/items/KHB97MTZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KHB97MTZ","type":"article-journal","title":"Realising the Enlightenment: H.T. Odum’s Energy Systems Language qua G.W.v Leibniz’s Characteristica Universalis","container-title":"Ecological Modelling","collection-title":"Through the MACROSCOPE: the legacy of H.T. Odum","page":"279-292","volume":"178","issue":"1–2","source":"ScienceDirect","abstract":"Gottfried Wilhelm von Leibniz (1646–1716) is usually regarded as one of the world’s greatest philosophers. If our thesis is right—that the Energy Systems Language is a Characteristica Universalis—the late Howard Thomas Odum (1924–2001) shares in this title. Moreover the work of H.T. Odum and colleagues can be considered a progression of natural science, creatively realising what contemporary German philosopher J. Habermas calls the project of the Enlightenment. As a consequence, H.T. Odum’s work is worthy of far greater historical profundity and philosophical respect than many may have previously imagined.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380003005404","DOI":"10.1016/j.ecolmodel.2003.12.024","ISSN":"0304-3800","shortTitle":"Realising the Enlightenment","journalAbbreviation":"Ecological Modelling","author":[{"family":"Maud","given":"Sholto"},{"family":"Cevolatti","given":"Dino"}],"issued":{"date-parts":[["2004",10,15]]},"accessed":{"date-parts":[["2015",2,11]]}}},{"key":"http://zotero.org/users/39885/items/KINK9UA5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KINK9UA5","type":"article-journal","title":"Quality Control and Flux Sampling Problems for Tower and Aircraft Data","container-title":"J. OF ATMO. OCEANIC TECH","page":"512--526","volume":"14","URL":"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.38.7732","call-number":"0213","author":[{"family":"Vickers","given":"Dean"},{"family":"Mahrt","given":"L."}],"issued":{"date-parts":[["1997"]]},"accessed":{"date-parts":[["2010",8,3]]}}},{"key":"http://zotero.org/users/39885/items/KIRJUHEK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KIRJUHEK","type":"book","title":"Flamenco Guitar: A Complete Method for Playing Flamenco","publisher":"Peer Southern Pubns","source":"Amazon.com","ISBN":"0-686-09074-8","call-number":"0000","shortTitle":"Flamenco Guitar","author":[{"family":"Mairants","given":"Ivor"}],"issued":{"date-parts":[["1958",6]]}}},{"key":"http://zotero.org/users/39885/items/KJI42UXJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KJI42UXJ","type":"article-journal","title":"Network Thermodynamics","container-title":"Nature","page":"332-333","volume":"237","issue":"5354","source":"Nature","URL":"http://dx.doi.org/10.1038/237332a0","DOI":"10.1038/237332a0","journalAbbreviation":"Nature","author":[{"family":"OSTER","given":"G."},{"family":"PERELSON","given":"A."},{"family":"KATCHALSKY","given":"A."}],"issued":{"date-parts":[["1972",6,9]]},"accessed":{"date-parts":[["2011",8,28]]}}},{"key":"http://zotero.org/users/39885/items/KM4VU9A2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KM4VU9A2","type":"book","title":"Where We Have Hope: A Memoir of Zimbabwe","publisher":"Grove Press","ISBN":"0-8021-4251-6","call-number":"0022","shortTitle":"Where We Have Hope","author":[{"family":"Meldrum","given":"Andrew"}],"issued":{"date-parts":[["2006",9,18]]}}},{"key":"http://zotero.org/users/39885/items/KMD9X5MS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KMD9X5MS","type":"article-journal","title":"A holistic model for coastal flooding using system diagrams and the Source-Pathway-Receptor (SPR) concept","container-title":"Natural Hazards and Earth System Science","page":"1431-1439","volume":"12","issue":"5","source":"CrossRef","URL":"http://www.nat-hazards-earth-syst-sci.net/12/1431/2012/","DOI":"10.5194/nhess-12-1431-2012","ISSN":"1684-9981","language":"en","author":[{"family":"Narayan","given":"S."},{"family":"Hanson","given":"S."},{"family":"Nicholls","given":"R. J."},{"family":"Clarke","given":"D."},{"family":"Willems","given":"P."},{"family":"Ntegeka","given":"V."},{"family":"Monbaliu","given":"J."}],"issued":{"date-parts":[["2012",5,14]]},"accessed":{"date-parts":[["2015",8,17]]}}},{"key":"http://zotero.org/users/39885/items/KNBCZ96K","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KNBCZ96K","type":"article-journal","title":"Limits of remote ecosystems containing man","container-title":"American Biology Teacher","page":"429-443","volume":"25","call-number":"0016","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1963"]]}}},{"key":"http://zotero.org/users/39885/items/KPWUKHKE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KPWUKHKE","type":"book","title":"Risk management and governance: concepts, guidelines and applications","collection-title":"Risk, Governance and Society","publisher":"Springer","publisher-place":"New York","volume":"16.","number-of-pages":"276","source":"UQ Library Search, Summon 2.0","event-place":"New York","URL":"http://ezproxy.library.uq.edu.au/login?url=http://www.springerlink.com/openurl.asp?genre=book&isbn=978-3-642-13925-3","ISBN":"978-3-642-13926-0","shortTitle":"Risk management and governance","language":"English","author":[{"family":"Aven","given":"T."},{"family":"Renn","given":"Ortwin"}],"issued":{"date-parts":[["2010"]]},"accessed":{"date-parts":[["2015",10,7]]}}},{"key":"http://zotero.org/users/39885/items/KQATZZQX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KQATZZQX","type":"article-journal","title":"Emergy and exergy stored in genetic information","container-title":"Ecological Modelling","page":"11-16","volume":"178","issue":"1-2","abstract":"The emergy and exergy of genetic information and its biological carriers are evaluated. Emergy used to build and maintain biological organisms (which we suggest are the carriers of genetic information analogous to books or a communications network) was evaluated on an areal basis using average global emergy input to the biosphere. The chemical exergy of genes is calculated relative to detritus as the reference environment. Using generalized data for populations of organisms from bacteria to large mammals, an emergy–exergy ratio for genes and solar transformities of biomass are calculated. The exergy used to maintain genetic information is shown to be between about 0.1 and 1000 MJ/m2. The emergy–exergy ratio for gene maintenance (a measure of the emergy required per Joule of genetic information is between about 1.0 and 20,000 sej/J. Generalized solar transformities for organisms are calculated and vary between about 2 sej/J of biomass (soil bacteria) to 75 million sej/J (mammel biomass). An interesting relationship between the emergy costs of gene maintenance and the solar transformity of biomass leads us to conclude that as the complexity of the biological carrier of information increases, the emergy costs of maintaining the carrier increases faster than the information carried. We propose that the emergy required to generate the genetic information contained in the biosphere today is enormous and we suggest that it might be on the order of 2×1010 sej/J of genetic information.","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6VBS-4BSVSKN-1&_user=10&_rdoc=1&_fmt=&_orig=search&_sort=d&view=c&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=00473d22c63515ede43cbeece564f024","DOI":"10.1016/j.ecolmodel.2003.12.036","call-number":"0011","author":[{"family":"Jorgensen","given":"S. E."},{"family":"Odum","given":"H. T."},{"family":"Brown","given":"M. T."}],"issued":{"date-parts":[["2004",10,15]]},"accessed":{"date-parts":[["2008",3,20]]}}},{"key":"http://zotero.org/users/39885/items/KQQDVRFQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KQQDVRFQ","type":"paper-conference","title":"Visualizing System Engineering and Project Management as an Integrated Process","container-title":"INCOSE International Symposium","publisher":"Wiley Online Library","page":"573–580","volume":"7","source":"Google Scholar","URL":"http://onlinelibrary.wiley.com/doi/10.1002/j.2334-5837.1997.tb02221.x/abstract","author":[{"family":"Mooz","given":"Harold"},{"family":"Forsberg","given":"Kevin"}],"issued":{"date-parts":[["1997"]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/KT898S36","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KT898S36","type":"book","title":"Hydraulic power system analysis","collection-title":"Fluid Power and Control","publisher":"CRC/Taylor & Francis","publisher-place":"Boca Raton, FL","volume":"16","number-of-pages":"400","source":"UQ Library Search, Summon 2.0","event-place":"Boca Raton, FL","abstract":"The excitement and the glitz of mechatronics has shifted the engineering community's attention away from fluid power systems in recent years. However, fluid power still remains advantageous in many applications compared to electrical or mechanical power transmission methods. Designers are left with few practical resources to help in the design and analysis of fluid power systems, especially when approaching fluid power for the first time. Helping you overcome these hurdles, this book demonstrates modern computer-aided analytical techniques used to model nonlinear, dynamic fluid power systems. Following an overview of fluid power, the authors examine various relevant fluid properties, energy calculations, and steady state and dynamic analysis along with a review of automatic control theory. Turning to modeling, the next few chapters address valves and motors and then apply dynamic modeling to examples relating to pumps, hydrostatic transmissions, and valves. The book includes a unique chapter showing how to combine flow resistance equations with the differential equations governing dynamic system performance. The final chapter translates electrical circuit theory concepts to noise attenuation in fluid power systems.","URL":"http://ezproxy.library.uq.edu.au/login?url=http://www.crcnetbase.com/ISBN/9780824799564","ISBN":"978-0-8247-9956-4","call-number":"TJ843","language":"English","author":[{"family":"Akers","given":"Arthur"},{"family":"Gassman","given":"Max"},{"family":"Smith","given":"Richard John"}],"issued":{"date-parts":[["2006"]]},"accessed":{"date-parts":[["2016",3,14]]}}},{"key":"http://zotero.org/users/39885/items/KTA3TA7R","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KTA3TA7R","type":"article-journal","title":"Energy flow in a pulsing system: Howard T. Odum","container-title":"Ecological Engineering","page":"77-83","volume":"3","issue":"2","source":"ScienceDirect","URL":"http://www.sciencedirect.com/science/article/pii/0925857494900140","DOI":"10.1016/0925-8574(94)90014-0","ISSN":"0925-8574","shortTitle":"Energy flow in a pulsing system","journalAbbreviation":"Ecological Engineering","author":[{"family":"Mitsch","given":"William J."}],"issued":{"date-parts":[["1994",6]]},"accessed":{"date-parts":[["2015",8,29]]}}},{"key":"http://zotero.org/users/39885/items/KTAZNEW2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KTAZNEW2","type":"article-journal","title":"The social license to operate","container-title":"SME mining engineering handbook","page":"1779–1796","source":"Google Scholar","author":[{"family":"Thomson","given":"Ian"},{"family":"Boutilier","given":"Robert"}],"issued":{"date-parts":[["2011"]]}}},{"key":"http://zotero.org/users/39885/items/KTTPFZH6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KTTPFZH6","type":"article-journal","title":"Regulation of shale, coal seam and tight gas activities in Western Australia: An analysis of the capacity of the Petroleum and Geothermal Act 1967 (WA) to regulate onshore gas activities in Western Australia","container-title":"Law papers","page":"1–28","source":"Google Scholar","URL":"http://works.bepress.com/tina_hunter/45/","shortTitle":"Regulation of shale, coal seam and tight gas activities in Western Australia","author":[{"family":"Hunter","given":"Tina"}],"issued":{"date-parts":[["2011"]]},"accessed":{"date-parts":[["2015",11,12]]}}},{"key":"http://zotero.org/users/39885/items/KUG2A6HS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KUG2A6HS","type":"article-journal","title":"Material flow determination through agricultural machinery management","container-title":"Scientia Agricola","page":"375–383","volume":"67","issue":"4","source":"Google Scholar","author":[{"family":"Romanelli","given":"T.L."},{"family":"Milan","given":"M."}],"issued":{"date-parts":[["2010"]]}}},{"key":"http://zotero.org/users/39885/items/KUH3QAZE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KUH3QAZE","type":"article","title":"INSPIRE Generic Conceptual Model","publisher":"Drafting Team \"Data Specifications\"","URL":"http://inspire.ec.europa.eu/documents/Data_Specifications/D2.5_v3.4rc3.pdf","author":[{"literal":"INSPIRE"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",10,13]]}}},{"key":"http://zotero.org/users/39885/items/KURIPCZ8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KURIPCZ8","type":"article-journal","title":"When and How Much to Reproduce: The Trade-Off between Power and Efficiency","container-title":"American Zoologist","page":"763-774","volume":"16","issue":"4","source":"JSTOR","abstract":"A compromise between speed and efficiency of energy conversions gives the maximum power of useful energy conversion at intermediate efficiencies. Organisms are selected to maximize the power of energy conversions to a useful form. However, most species have very little capacity to vary the efficiency of their energy conversions in response to variation in the intensity of the environmental power supply. Plants can respond slowly to horizontal variation in the availability of energy by growth. The trade-off between power and efficiency which is dependent on the compromise between speed and efficiency of energy conversions does seem to apply to the relative efficiencies of successive species in a sere of secondary terrestrial plant succession. The application of the power trade-off to species in a sere predicts the common general properties of growth and reproduction in succession. The power trade-off may also help to explain reproductive patterns in animals that differ in the concentration of their food supply. The thermodynamic basis of causation provided by the power trade-off could be a valuable tool for connecting evolutionary ecology with community and ecosystem studies.","URL":"http://www.jstor.org/stable/3882141","ISSN":"0003-1569","shortTitle":"When and How Much to Reproduce","journalAbbreviation":"American Zoologist","author":[{"family":"Smith","given":"Christopher C."}],"issued":{"date-parts":[["1976",10,1]]},"accessed":{"date-parts":[["2015",11,8]]}}},{"key":"http://zotero.org/users/39885/items/KV29GU4Q","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KV29GU4Q","type":"article-journal","title":"Energy analysis of using macroalgae from eutrophic waters as a bioethanol feedstock","container-title":"Ecological Modelling","page":"25-37","volume":"288","source":"ScienceDirect","abstract":"Eutrophication is an environmental problem in a majority of shallow water basins all over the world. The undesired macroalgae has been proposed as a biomass resource for bioethanol production and we have analysed the environmental sustainability of two case studies: Orbetello Lagoon (OL), Italy, and Køge Bay (KB), Denmark. Today, macroalgae are collected and stored in landfills to provide a solution for the excess production. An emergy assessment revealed that the main environmental support for macroalgae growth relates to water in both case studies. In OL, rain represents 51% of the emergy use, and in KB runoff from agricultural land constitutes 86%. The environmental support needed for producing one Joule of bioethanol is somewhat more than for a number of other bioethanol feedstocks being 2.12 × 106 solar equivalent Joules (seJ) for OL and 2.56 × 106 seJ for KB. However, a high percentage of the environmental support comes from local renewable flows being 40% for OL and 88% for KB. The difference between the two case studies is partly due to the contribution of energy from waves, which plays an important role in carrying macroalgae towards the coast in Køge Bay. Energy-wise, one J of fossil energy is required directly or indirectly to produce 0.09 J of bioethanol for OL or 0.44 J of bioethanol for KB, i.e. the energy return on (energy) invested (EROI) is less than 1. An alternative scenario was developed in order to investigate improvements of system efficiency. This was analysed with the full-requirement approach as well as with a marginal-requirement approach accounting only what the bioethanol production requires of additional processes, i.e. mainly transportation and conversion of the macroalgae in a biorefinery facility which is assumed to be situated close to an existing industry producing waste heat. Both emergy and EROI analyses showed that only a relatively small amount of resources has to be added to the existing system to produce the bioethanol, e.g. the EROI increased to above 1 in both systems. With the marginal approach, macroalgae may be appreciated as a resource for bioethanol production instead of considered as an environmental problem.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380014002439","DOI":"10.1016/j.ecolmodel.2014.05.006","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Seghetta","given":"Michele"},{"family":"Østergård","given":"Hanne"},{"family":"Bastianoni","given":"Simone"}],"issued":{"date-parts":[["2014",9,24]]},"accessed":{"date-parts":[["2015",4,4]]}}},{"key":"http://zotero.org/users/39885/items/KVWMR5TP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KVWMR5TP","type":"book","title":"An Introduction to Metaphysics","publisher":"Anchor Books","source":"Amazon.com","call-number":"0409","author":[{"family":"Heidegger","given":"Martin"}],"issued":{"date-parts":[["1959",1,1]]}}},{"key":"http://zotero.org/users/39885/items/KW58W3TU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KW58W3TU","type":"article-journal","title":"Rich picture building in the soft systems methodology","container-title":"European Journal of Information Systems","page":"351-360","volume":"1","source":"CrossRef","URL":"http://www.palgrave-journals.com.ezproxy.lib.rmit.edu.au/ejis/journal/v1/n5/pdf/ejis19927a.pdf","DOI":"10.1057/ejis.1992.7","ISSN":"0960-085X, 1476-9344","author":[{"family":"Crinnion","given":"John C."}],"issued":{"date-parts":[["1992",5]]},"accessed":{"date-parts":[["2011",9,4]]}}},{"key":"http://zotero.org/users/39885/items/KW88KWCI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KW88KWCI","type":"article-journal","title":"Emergy definition","container-title":"Ecological Engineering","page":"209-212","volume":"9","issue":"3-4","call-number":"0002","author":[{"family":"Scienceman","given":"David","suffix":"M"}],"issued":{"date-parts":[["1997"]]}}},{"key":"http://zotero.org/users/39885/items/KWHKRDWB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KWHKRDWB","type":"webpage","title":"AuScope Grid","URL":"http://auscope.org.au/site/grid.php","author":[{"family":"AuScope","given":""}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,25]]}}},{"key":"http://zotero.org/users/39885/items/KXPX6W4V","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KXPX6W4V","type":"book","title":"Quantitative Risk Management: Concepts, Techniques and Tools: Concepts, Techniques and Tools","publisher":"Princeton University Press","number-of-pages":"721","source":"Google Books","abstract":"This book provides the most comprehensive treatment of the theoretical concepts and modelling techniques of quantitative risk management. Whether you are a financial risk analyst, actuary, regulator or student of quantitative finance, Quantitative Risk Management gives you the practical tools you need to solve real-world problems.Describing the latest advances in the field, Quantitative Risk Management covers the methods for market, credit and operational risk modelling. It places standard industry approaches on a more formal footing and explores key concepts such as loss distributions, risk measures and risk aggregation and allocation principles. The book’s methodology draws on diverse quantitative disciplines, from mathematical finance and statistics to econometrics and actuarial mathematics. A primary theme throughout is the need to satisfactorily address extreme outcomes and the dependence of key risk drivers. Proven in the classroom, the book also covers advanced topics like credit derivatives.Fully revised and expanded to reflect developments in the field since the financial crisisFeatures shorter chapters to facilitate teaching and learningProvides enhanced coverage of Solvency II and insurance risk management and extended treatment of credit risk, including counterparty credit risk and CDO pricingIncludes a new chapter on market risk and new material on risk measures and risk aggregation","ISBN":"978-1-4008-6628-1","shortTitle":"Quantitative Risk Management","language":"en","author":[{"family":"McNeil","given":"Alexander J."},{"family":"Frey","given":"Rüdiger"},{"family":"Embrechts","given":"Paul"}],"issued":{"date-parts":[["2015",5,26]]}}},{"key":"http://zotero.org/users/39885/items/KXRQ3SBI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KXRQ3SBI","type":"book","title":"Software Engineering: A Practitioner's Approach","publisher":"McGraw-Hill Science/Engineering/Math","number-of-pages":"928","edition":"7","source":"Amazon.com","ISBN":"0-07-337597-7","shortTitle":"Software Engineering","author":[{"family":"Pressman","given":"Roger"}],"issued":{"date-parts":[["2009",1,20]]}}},{"key":"http://zotero.org/users/39885/items/KZMT6P6F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/KZMT6P6F","type":"article-newspaper","title":"Super Scienceman","container-title":"Edinburgh Evening News","page":"1","call-number":"0001","author":[{"family":"McGhee","given":"J"}],"issued":{"date-parts":[["1990",4,6]]}}},{"key":"http://zotero.org/users/39885/items/M37DNCUQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/M37DNCUQ","type":"paper-conference","title":"The role of model driven architecture in the development of the Australian Water Resources Information System","container-title":"Water information research and development alliance: science symposium proceedings. WIRADA, Melbourne","page":"140–145","source":"Google Scholar","author":[{"family":"Lemon","given":"D."},{"family":"Atkinson","given":"R."},{"family":"Box","given":"P."},{"family":"Woolf","given":"A."}],"issued":{"date-parts":[["2012"]]}}},{"key":"http://zotero.org/users/39885/items/M4H53JB2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/M4H53JB2","type":"article","title":"j.0030-1299.2008.16832.x.pdf","URL":"http://onlinelibrary.wiley.com/store/10.1111/j.0030-1299.2008.16832.x/asset/j.0030-1299.2008.16832.x.pdf?v=1&t=iis7chs5&s=4ab4d353cc9819806daaa539f7c37ddc92edf765","accessed":{"date-parts":[["2015",12,30]]}}},{"key":"http://zotero.org/users/39885/items/M64GQAD9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/M64GQAD9","type":"book","title":"Tintin : dream and reality","publisher":"John Murray","publisher-place":"London","event-place":"London","ISBN":"978-0-7195-5522-0","call-number":"0000","author":[{"family":"Farr","given":"Michael"}],"issued":{"date-parts":[["2001"]]}}},{"key":"http://zotero.org/users/39885/items/M6STWZG8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/M6STWZG8","type":"article-journal","title":"Animal Automatism and Machine Intelligence","container-title":"Res Philosophica","page":"93–115","volume":"92","issue":"1","source":"PhilPapers","author":[{"family":"Brown","given":"Deborah"}],"issued":{"date-parts":[["2015"]]}}},{"key":"http://zotero.org/users/39885/items/M9PC85IE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/M9PC85IE","type":"article-journal","title":"Emergy algebra: Improving matrix methods for calculating transformities","container-title":"Ecological Modelling","page":"411-422","volume":"221","issue":"3","source":"ScienceDirect","abstract":"Transformity is one of the core concepts in Energy Systems Theory and it is fundamental to the calculation of emergy. Accurate evaluation of transformities and other emergy per unit values is essential for the broad acceptance, application and further development of emergy methods. Since the rules for the calculation of emergy are different from those for energy, particular calculation methods and models have been developed for use in the emergy analysis of networks, but double counting errors still occur because of errors in applying these rules when estimating the emergies of feedbacks and co-products. In this paper, configurations of network energy flows were classified into seven types based on commonly occurring combinations of feedbacks, splits, and co-products. A method of structuring the network equations for each type using the rules of emergy algebra, which we called \"preconditioning\" prior to calculating transformities, was developed to avoid double counting errors in determining the emergy basis for energy flows in the network. The results obtained from previous approaches, the Track Summing Method, the Minimum Eigenvalue Model and the Linear Optimization Model, were reviewed in detail by evaluating a hypothetical system, which included several types of interactions and two inputs. A Matrix Model was introduced to simplify the calculation of transformities and it was also tested using the same hypothetical system. In addition, the Matrix Model was applied to two real case studies, which previously had been analyzed using the existing method and models. Comparison of the three case studies showed that if the preconditioning step to structure the equations was missing, double counting would lead to large errors in the transformity estimates, up to 275 percent for complex flows with feedback and co-product interactions. After preconditioning, the same results were obtained from all methods and models. The Matrix Model reduces the complexity of the Track Summing Method for the analysis of complex systems, and offers a more direct and understandable link between the network diagram and the matrix algebra, compared with the Minimum Eigenvalue Model or the Linear Optimization Model.","URL":"http://www.sciencedirect.com.ezproxy.lib.rmit.edu.au/science/article/B6VBS-4XMH8DV-3/2/3cd9c867aac045196159cb96a10b5059","DOI":"10.1016/j.ecolmodel.2009.10.015","ISSN":"0304-3800","call-number":"0000","shortTitle":"Emergy algebra","author":[{"family":"Li","given":"Linjun"},{"family":"Lu","given":"Hongfang"},{"family":"Campbell","given":"Daniel E."},{"family":"Ren","given":"Hai"}],"issued":{"date-parts":[["2010",2,10]]},"accessed":{"date-parts":[["2010",4,9]]}}},{"key":"http://zotero.org/users/39885/items/MBBBUTTC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MBBBUTTC","type":"book","title":"Relativity : the special and the general theory","publisher":"Crown Trade Paperbacks","publisher-place":"New York","edition":"2nd ed.","event-place":"New York","ISBN":"978-0-517-88441-6","call-number":"0039","author":[{"family":"Einstein","given":"Albert"}],"issued":{"date-parts":[["1995"]]}}},{"key":"http://zotero.org/users/39885/items/MBTV42RN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MBTV42RN","type":"article-journal","title":"A DirectScience: The synthesis of ScienceDirect and EmSim","container-title":"Ecological Modelling","page":"518-520","volume":"203","issue":"3-4","source":"ScienceDirect","abstract":"A global, dynamic portal is proposed for collaborative modelling and simulation of ecological and general systems.","URL":"http://www.sciencedirect.com.ezproxy.lib.rmit.edu.au/science/article/B6VBS-4MV1P41-1/2/ccced2f0c50678af7fd23d201d71db08","DOI":"10.1016/j.ecolmodel.2006.11.035","ISSN":"0304-3800","call-number":"0000","shortTitle":"A DirectScience","author":[{"family":"Maud","given":"Sholto"}],"issued":{"date-parts":[["2007",5,10]]},"accessed":{"date-parts":[["2010",3,27]]}}},{"key":"http://zotero.org/users/39885/items/MC6C89VE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MC6C89VE","type":"article-journal","title":"A suggestion for computing objective function in model calibration","container-title":"Ecological Informatics","page":"107-111","volume":"24","source":"ScienceDirect","abstract":"A parameter-optimization process (model calibration) is usually required for numerical model applications, which involves the use of an objective function to determine the model cost (model-data errors). The sum of square errors (SSR) has been widely adopted as the objective function in various optimization procedures. However, ‘square error’ calculation was found to be more sensitive to extreme or high values. Thus, we proposed that the sum of absolute errors (SAR) may be a better option than SSR for model calibration. To test this hypothesis, we used two case studies—a hydrological model calibration and a biogeochemical model calibration—to investigate the behavior of a group of potential objective functions: SSR, SAR, sum of squared relative deviation (SSRD), and sum of absolute relative deviation (SARD). Mathematical evaluation of model performance demonstrates that ‘absolute error’ (SAR and SARD) are superior to ‘square error’ (SSR and SSRD) in calculating objective function for model calibration, and SAR behaved the best (with the least error and highest efficiency). This study suggests that SSR might be overly used in real applications, and SAR may be a reasonable choice in common optimization implementations without emphasizing either high or low values (e.g., modeling for supporting resources management).","URL":"http://www.sciencedirect.com/science/article/pii/S1574954114001095","DOI":"10.1016/j.ecoinf.2014.08.002","ISSN":"1574-9541","journalAbbreviation":"Ecological Informatics","author":[{"family":"Wu","given":"Yiping"},{"family":"Liu","given":"Shuguang"}],"issued":{"date-parts":[["2014",11]]},"accessed":{"date-parts":[["2015",2,11]]}}},{"key":"http://zotero.org/users/39885/items/MHH9295P","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MHH9295P","type":"book","title":"Risk Governance: Coping with Uncertainty in a Complex World","publisher":"Routledge","publisher-place":"London ; Sterling, VA","number-of-pages":"368","source":"Amazon","event-place":"London ; Sterling, VA","ISBN":"978-1-84407-292-7","shortTitle":"Risk Governance","language":"English","author":[{"family":"Renn","given":"Ortwin"}],"issued":{"date-parts":[["2008",6,1]]}}},{"key":"http://zotero.org/users/39885/items/MHHPFIVC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MHHPFIVC","type":"book","title":"Animal Ecology","publisher":"McGraw-Hill","edition":"First Edition, Later Printing edition","source":"Amazon.com","URL":"https://archive.org/stream/animalecology00chap#page/194/","author":[{"family":"Chapman","given":"Royal N."}],"issued":{"date-parts":[["1931"]]},"accessed":{"date-parts":[["2015",3,13]]}}},{"key":"http://zotero.org/users/39885/items/MN3U95VH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MN3U95VH","type":"book","title":"Google web toolkit applications","publisher":"Prentice Hall","publisher-place":"Upper Saddle River  NJ","event-place":"Upper Saddle River  NJ","ISBN":"978-0-321-50196-7","author":[{"family":"Dewsbury","given":"Ryan"}],"issued":{"date-parts":[["2008"]]}}},{"key":"http://zotero.org/users/39885/items/MNGWFNAE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MNGWFNAE","type":"article-journal","title":"Probabilistic risk analysis and fault trees: Initial discussion of application to identification of risk at a wellhead","container-title":"Advances in Water Resources","collection-title":"Special Issue on Uncertainty Quantification and Risk Assessment","page":"133-145","volume":"36","source":"ScienceDirect","abstract":"Wellhead protection is of critical importance for managing groundwater resources. While a number of previous authors have addressed questions related to uncertainties in advective capture zones, methods for addressing wellhead protection in the presence of uncertainty in the chemistry of groundwater contaminants, the relationship between land-use and contaminant sources, and the impact on health of the receiving population are limited. It is herein suggested that probabilistic risk analysis (PRA) combined with fault trees (FT) provides a structure whereby chemical transport can be combined with uncertainties in source, chemistry, and health impact to assess the probability of negative health outcomes in the population. As such, PRA-FT provides a new strategy for the identification of areas of probabilistically high human health risk. Application of this approach is demonstrated through a simplified case study involving flow to a well in an unconfined aquifer with heterogeneity in aquifer properties and contaminant sources.","URL":"http://www.sciencedirect.com/science/article/pii/S0309170811000315","DOI":"10.1016/j.advwatres.2011.02.005","ISSN":"0309-1708","shortTitle":"Probabilistic risk analysis and fault trees","journalAbbreviation":"Advances in Water Resources","author":[{"family":"Rodak","given":"C."},{"family":"Silliman","given":"S."}],"issued":{"date-parts":[["2012",2]]},"accessed":{"date-parts":[["2015",8,13]]}}},{"key":"http://zotero.org/users/39885/items/MP24G3TK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MP24G3TK","type":"article","title":"FireSAT: Model vs Documents Alone","publisher":"Space Systems Working Group, INCOSE MBSE Challenge Team","call-number":"0000","author":[{"family":"Delp","given":"Christopher"}],"issued":{"date-parts":[["2009"]]}}},{"key":"http://zotero.org/users/39885/items/MQP6JP5H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MQP6JP5H","type":"article-journal","title":"An emergent framework of disaster risk governance towards innovating coping capability for reducing disaster risks in local communities","container-title":"International Journal of Disaster Risk Science","page":"1 - 9","volume":"2","issue":"2","source":"UQ Library Search, Summon 2.0","abstract":"An emergent framework of disaster risk governance is presented as an implementation strategy for integrated risk management that incorporates innovative local coping capabilities that reduce disaster vulnerability. This framework calls for enhancement of self-support and mutual-assistance through strengthening informal or social networking efforts in local communities, rather than depending on formal or institutional governmental-assistance. The framework is supported by a societal platform of disaster risk information, called DRIP, which the NIED (National Research Institute for Earth Science and Disaster Prevention, Japan) has developed since 2006 as a tool that promotes improved disaster risk governance. With the help of DRIP, residents, communities, and other stakeholders, linked horizontally or vertically with social networks, can (1) improve their awareness of disaster risks and management issues by sharing risk information as scientific expertise, experiential knowledge, and local/folk wisdom; (2) customize risk communication through analytic deliberation of risk information by employing risk-scenarios developed by residents themselves; (3) develop collaborative activities for informed decision-making that can fully utilize local resources to reorganize coping capability against disaster risks; and (4) disseminate the generated risk scenarios with action plans to other residents who have not participated in the risk communication process.","DOI":"10.1007/s13753-011-0006-7","ISSN":"2095-0055","language":"English","author":[{"family":"Ikeda","given":"Saburo"},{"family":"Nagasaka","given":"Toshinari"}],"issued":{"date-parts":[["2011",6]]}}},{"key":"http://zotero.org/users/39885/items/MQUVUW2K","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MQUVUW2K","type":"article-journal","title":"THE STORY OF Q","container-title":"American Scientist","page":"584-594","volume":"43","issue":"4","source":"JSTOR","URL":"http://www.jstor.org/stable/27826701","ISSN":"0003-0996","journalAbbreviation":"American Scientist","author":[{"family":"GREEN","given":"ESTILL I."}],"issued":{"date-parts":[["1955"]]},"accessed":{"date-parts":[["2015",12,30]]}}},{"key":"http://zotero.org/users/39885/items/MR2U92XB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MR2U92XB","type":"book","title":"The body electric : electromagnetism and the foundation of life","publisher":"Morrow","publisher-place":"New York","edition":"1st ed.","event-place":"New York","ISBN":"978-0-688-00123-0","author":[{"family":"Becker","given":"Robert"}],"issued":{"date-parts":[["1985"]]}}},{"key":"http://zotero.org/users/39885/items/MSMGTXT5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MSMGTXT5","type":"book","title":"Contemporary accounting : a conceptual approach","publisher":"Nelson","publisher-place":"Melbourne","edition":"3rd ed.","event-place":"Melbourne","ISBN":"978-0-17-009496-2","author":[{"family":"Bazley","given":"M"}],"issued":{"date-parts":[["1998"]]}}},{"key":"http://zotero.org/users/39885/items/MSRDMWM8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MSRDMWM8","type":"article-journal","title":"A brief history of automatic control","container-title":"IEEE Control Systems Magazine","page":"17–25","volume":"16","issue":"3","source":"Google Scholar","URL":"http://www.elai.upm.es/moodle/pluginfile.php/1792/mod_resource/content/0/articulos/HistoryOfControl.pdf","author":[{"family":"Bennett","given":"Stuart"}],"issued":{"date-parts":[["1996"]]},"accessed":{"date-parts":[["2016",1,9]]}}},{"key":"http://zotero.org/users/39885/items/MSW9UN7M","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MSW9UN7M","type":"book","title":"Risk governance: the articulation of hazard, politics and ecology","publisher":"Springer","publisher-place":"Dordrecht","number-of-pages":"1 online resource (xxiii, 515 pages)","edition":"2015","source":"UQ Library Search, Summon 2.0","event-place":"Dordrecht","abstract":"This book explores the common language of politics, ecology and risk, and crosses their conceptual divides. It seeks to shed light on the underlying structural factors, processes, players and interactions in the risk scenario, all of which influence decision-making that both increases and reduces disaster risk. The first section explores risk governance under conditions of increasing complexity, diversity and change. The discussion includes chapters on The problem of governance in the risk society; Making sense of decentralization; Understanding and conceptualizing risk in large-scale social-ecological systems; The disaster epidemic and Structure, process, and agency in the evaluation of risk governance. Part II, focused on governance in regions and domains of risk, includes nine chapters with discussion of Climate governance and climate change and society; Climate change and the politics of uncertainty; Risk complexity and governance in mountain environments; On the edge: Coastal governance and risk and Governance of megacity disaster risks, among other important topics. Part III discusses directions for further advancement in risk governance, with ten chapters on such topics as the transition From risk society to security society; Governing risk tolerability; Risk and adaptive planning for coastal cities; Profiling risk governance in natural hazards contexts; Confronting the risk of large disasters in nature and Transitions into and out of a crisis mode of socio-ecological systems. The book presents a comprehensive examination of the complexity of both risk and environmental policy-making and of their multiple-and not always visible-interactions in the context of social-ecological systems. Just as important, it also addresses unseen and neglected complementarities between regulatory policy-making and ordinary individual decision-making through the actions of nongovernmental actors. A range of distinguished scholars from a diverse set of disciplines have contributed to the book with their expertise in many areas, including disaster studies, emergency planning and management, ecology, sustainability, environmental planning and management, climate change, geography, spatial planning, development studies, economy, political sciences, public administration, communication, as well as physics and geology.","URL":"http://ezproxy.library.uq.edu.au/login?url=http://dx.doi.org/10.1007/978-94-017-9328-5","ISBN":"978-94-017-9327-8","call-number":"HD61","shortTitle":"Risk governance","language":"English","author":[{"family":"Fra Paleo","given":"Urbano"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,7]]}}},{"key":"http://zotero.org/users/39885/items/MTMZWVKV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MTMZWVKV","type":"book","title":"Ecological Economics: Energy, Environment and Society","publisher":"Blackwell Publishers","ISBN":"0-631-17146-0","call-number":"0839","shortTitle":"Ecological Economics","author":[{"family":"Martinez-Alier","given":"Juan"},{"family":"Schlupmann","given":"Klaus"}],"issued":{"date-parts":[["1993",4]]}}},{"key":"http://zotero.org/users/39885/items/MTUC7QTV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MTUC7QTV","type":"article-journal","title":"A vacation realization about thermodynamics and a possible fourth law","container-title":"Biochemical Education","page":"68","volume":"12","issue":"2","URL":"http://www.sciencedirect.com/science/article/B6T4N-47FWBHM-C9/1/d37067e908ba36317496bb4df2181535","DOI":"10.1016/0307-4412(84)90006-2","call-number":"0000","author":[{"family":"Whalen","given":"Thomas A"}],"issued":{"date-parts":[["1984",4]]},"accessed":{"date-parts":[["2008",7,5]]}}},{"key":"http://zotero.org/users/39885/items/MU4VARSV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MU4VARSV","type":"article-journal","title":"On Onsager's Principle of Microscopic Reversibility","container-title":"Reviews of Modern Physics","page":"343-350","volume":"17","issue":"2-3","source":"APS","abstract":"DOI:","URL":"http://link.aps.org/doi/10.1103/RevModPhys.17.343","DOI":"10.1103/RevModPhys.17.343","journalAbbreviation":"Rev. Mod. Phys.","author":[{"family":"Casimir","given":"H. B. G."}],"issued":{"date-parts":[["1945",4,1]]},"accessed":{"date-parts":[["2015",9,12]]}}},{"key":"http://zotero.org/users/39885/items/MVCWR49C","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MVCWR49C","type":"article-journal","title":"The Quest for an Environmental Metric: Gazing at weather systems, a ground-breaking scientist spawned an ecological accounting standard that Wall Street might one day embrace","container-title":"CFO Publishing","URL":"http://www.cfo.com/printable/article.cfm/5300667?f=options","call-number":"0000","shortTitle":"The Quest for an Environmental Metric","author":[{"family":"Leone","given":"M."}],"issued":{"date-parts":[["2005"]]},"accessed":{"date-parts":[["2008",3,25]]}}},{"key":"http://zotero.org/users/39885/items/MZFSH2WN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/MZFSH2WN","type":"article-journal","title":"Modelica—A unified object-oriented language for system modeling and simulation","container-title":"ECOOP’98—Object-Oriented Programming","page":"67–90","source":"Google Scholar","author":[{"family":"Fritzson","given":"P."},{"family":"Engelson","given":"V."}],"issued":{"date-parts":[["1998"]]}}},{"key":"http://zotero.org/users/39885/items/N2Z7BJBA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/N2Z7BJBA","type":"book","title":"The Bible in the light of cuneiform literature","publisher":"E. Mellen Press","number-of-pages":"516","source":"Google Books","ISBN":"978-0-88946-219-9","language":"en","author":[{"family":"Hallo","given":"William W."},{"family":"Jones","given":"Bruce William"},{"family":"Mattingly","given":"Gerald L."}],"issued":{"date-parts":[["1990"]]}}},{"key":"http://zotero.org/users/39885/items/N32VND83","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/N32VND83","type":"article","title":"Underground Water Impact Reports and Final Reports","publisher":"State of Queensland (Department of Environment and Heritage Protection)","URL":"https://www.ehp.qld.gov.au/management/non-mining/documents/uwir-guideline.pdf","author":[{"literal":"EHP"}],"issued":{"date-parts":[["2013"]]}}},{"key":"http://zotero.org/users/39885/items/N34BZRTW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/N34BZRTW","type":"paper-conference","title":"Model Driven Management of Complex Systems: Implementing the Macroscope's Vision","publisher":"IEEE","page":"277-286","source":"CrossRef","URL":"http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4492409","DOI":"10.1109/ECBS.2008.42","ISBN":"978-0-7695-3141-0","shortTitle":"Model Driven Management of Complex Systems","author":[{"family":"Barbero","given":"Mikaël"},{"family":"Jouault","given":"Frédéric"},{"family":"Bézivin","given":"Jean"}],"issued":{"date-parts":[["2008",3]]},"accessed":{"date-parts":[["2011",8,28]]}}},{"key":"http://zotero.org/users/39885/items/N4X8KPXA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/N4X8KPXA","type":"article-journal","title":"Interoperability: the key for smart water management","container-title":"Water Science & Technology: Water Supply","page":"207","volume":"15","issue":"1","source":"CrossRef","URL":"http://www.iwaponline.com/ws/01501/ws015010207.htm","DOI":"10.2166/ws.2014.096","ISSN":"1606-9749","shortTitle":"Interoperability","language":"en","author":[{"family":"Hauser","given":"A."},{"family":"Roedler","given":"F."}],"issued":{"date-parts":[["2015",2]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/N64XM4W2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/N64XM4W2","type":"book","title":"Marx's Ecology: Materialism and Nature","publisher":"Monthly Review Press","ISBN":"1-58367-012-2","call-number":"0000","shortTitle":"Marx's Ecology","author":[{"family":"Foster","given":"John Bellamy"}],"issued":{"date-parts":[["2000",3,1]]}}},{"key":"http://zotero.org/users/39885/items/N752M4WH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/N752M4WH","type":"book","title":"JavaScript creativity: exploring the modern capabilities of JavaScript and HTML5","collection-title":"The expert's voice in Web development","publisher":"Apress","publisher-place":"Berkeley, CA","number-of-pages":"1 online resource (xiv, 155 pages)","source":"UQ Library Search, Summon 2.0","event-place":"Berkeley, CA","abstract":"Introduces new creative aspects of JavaScript to make music, which is an area being promoted by known names in the music industry, such as Imogen Heap Provides real projects that can be developed for clients and for hobby by the developers who buy the book Has the input of known experts in the field such as Stuart Memo, who presents on music creation in JavaScript across the world (he has also agreed to TR the music chapters)","URL":"http://ezproxy.library.uq.edu.au/login?url=http://dx.doi.org/10.1007/978-1-4302-5945-9","ISBN":"1-4302-5945-0","call-number":"QA76.73.J39","shortTitle":"JavaScript creativity","language":"English","author":[{"family":"Hudson","given":"Shane"},{"literal":"Books24x7, Inc"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",11,10]]}}},{"key":"http://zotero.org/users/39885/items/N7NM9ZA2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/N7NM9ZA2","type":"book","title":"A treatise on electricity and magnetism","publisher":"Dover Publ.","publisher-place":"New York","edition":"3. Aufl.","event-place":"New York","ISBN":"978-0-486-60637-8","author":[{"family":"Maxwell","given":"James"}],"issued":{"date-parts":[["1975"]]}}},{"key":"http://zotero.org/users/39885/items/N9IFVNUM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/N9IFVNUM","type":"book","title":"A Tropical Rain Forest. A Study of Irradiation and Ecology at El Verde, Puerto Rico","publisher":"United States Atomic Energy Commission","call-number":"0102","author":[{"family":"Odum","given":"H. T."},{"family":"Pigeon","given":"R. F."}],"issued":{"date-parts":[["1970"]]}}},{"key":"http://zotero.org/users/39885/items/NASJJBZT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NASJJBZT","type":"article-journal","title":"Mobile and dynamic web services","container-title":"Emerging Web Services Technology","page":"117–133","source":"Google Scholar","author":[{"family":"Sánchez-Nielsen","given":"E."},{"family":"Martín-Ruiz","given":"S."},{"family":"Rodr\\'iguez-Pedrianes","given":"J."}],"issued":{"date-parts":[["2007"]]}}},{"key":"http://zotero.org/users/39885/items/NCIDAVHC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NCIDAVHC","type":"book","title":"A Prosperous Way Down: Principles and Policies","publisher":"University Press of Colorado","ISBN":"0-87081-610-1","call-number":"0082","shortTitle":"A Prosperous Way Down","author":[{"family":"Odum","given":"Howard","suffix":"T."},{"family":"Odum","given":"Elisabeth","suffix":"C."}],"issued":{"date-parts":[["2001",6,13]]}}},{"key":"http://zotero.org/users/39885/items/NDI43VHC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NDI43VHC","type":"article","title":"Underground Water Management Framework","URL":"http://agforceqld.org.au/file.php?id=1016&open=yes","author":[{"literal":"QLD State Government"}],"issued":{"date-parts":[["2015"]]}}},{"key":"http://zotero.org/users/39885/items/NDN37W29","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NDN37W29","type":"article-journal","title":"A modelling approach for the analysis of xylose–ethanol bioconversion","container-title":"Ecological Modelling","page":"157-162","volume":"113","issue":"1–3","source":"ScienceDirect","abstract":"A model for the degradation of xylose and ethanol production by Klebsiella planticola is proposed and compared with the exponential (E) and Michaelis–Menten (MM) approaches. This model follows an ecological approach, being based on H.T. Odum’s energy system diagrams and it is a simplified version a previous model developed for the glucose and ethanol kinetics of the yeast Saccharomices cerevisiae. In this model the dynamics of the substrate and of the final product are strictly related by means of the cellular activity. This model shows superior performances with respect to the two alternatives (E and MM), behaving better along the whole dynamics. Two different strains of K. planticola are analyzed to compare their performances from this viewpoint.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380098001409","DOI":"10.1016/S0304-3800(98)00140-9","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Rossi","given":"Claudio"},{"family":"Porcelli","given":"Marcello"},{"family":"Mocenni","given":"Chiara"},{"family":"Marchettini","given":"Nadia"},{"family":"Loiselle","given":"Steven"},{"family":"Bastianoni","given":"Simone"}],"issued":{"date-parts":[["1998",11,2]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/NECH2FE3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NECH2FE3","type":"manuscript","title":"Accord between different laws of Nature that seemed incompatible","genre":"Translation","source":"Wikisource","archive":"Wikisource","abstract":"Early article setting out the principle of least action.","URL":"https://en.wikisource.org/wiki/Translation:Accord_between_different_laws_of_Nature_that_seemed_incompatible","shortTitle":"Translation","author":[{"family":"Maupertuis","given":"Pierre Louis Moreau","dropping-particle":"de"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2016",3,14]]}}},{"key":"http://zotero.org/users/39885/items/NEHKW429","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NEHKW429","type":"article-journal","title":"The Regulation of Unconventional Gas in Queensland and New South Wales-Divergent Paths, Same Destination?","container-title":"Oil, Gas & Energy Law Journal (OGEL)","volume":"12","issue":"3","source":"Google Scholar","URL":"https://www.transnational-dispute-management.com/article.asp?key=3480","author":[{"family":"Brockett","given":"R."}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",8,21]]}}},{"key":"http://zotero.org/users/39885/items/NFJWAWNU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NFJWAWNU","type":"article-journal","title":"A spatial data infrastructure for a spatially enabled government and society","container-title":"A Multi-View Framework to Assess SDIs","page":"11","source":"Google Scholar","URL":"http://www.csdila.unimelb.edu.au/publication/multi-view-framework/multi-view-framework-assessment-sdi.pdf#page=26","author":[{"family":"Rajabifard","given":"Abbas"}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2015",10,13]]}}},{"key":"http://zotero.org/users/39885/items/NG96E3QZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NG96E3QZ","type":"book","title":"Purple book: guidelines for quantitative risk assessment","publisher":"Committee for the Prevention of Disasters, The Hague","source":"Google Scholar","shortTitle":"Purple book","author":[{"family":"Uijit de Haag","given":"P. A. M."},{"family":"Ale","given":"B. J. M."}],"issued":{"date-parts":[["1999"]]}}},{"key":"http://zotero.org/users/39885/items/NH7Q9NG4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NH7Q9NG4","type":"article-journal","title":"Regulation of shale, coal seam and tight gas activities in Western Australia","container-title":"Bond University, Queensland","source":"Google Scholar","author":[{"family":"Hunter","given":"Tina"}],"issued":{"date-parts":[["2011"]]}}},{"key":"http://zotero.org/users/39885/items/NJSKX4KI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NJSKX4KI","type":"article-journal","title":"Legal Aspects of Coalbed Gas","container-title":"Journal of Petroleum Technology","page":"1–861","volume":"33","issue":"10","source":"Google Scholar","URL":"https://www.onepetro.org/LOGOUT?dest=https%3A%2F%2Fwww.onepetro.org%2Fjournal-paper%2FSPE-8947-PA","author":[{"family":"Mutchler","given":"Norman E."},{"family":"Sachse","given":"Harry R."},{"literal":"others"}],"issued":{"date-parts":[["1981"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/NK7PN5BT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NK7PN5BT","type":"book","title":"The Penguin dictionary of electronics","publisher":"Penguin Books","publisher-place":"London  England ;;New York  N.Y.","edition":"3rd ed.","event-place":"London  England ;;New York  N.Y.","ISBN":"978-0-14-051402-5","author":[{"family":"Illingworth","given":"Valerie"}],"issued":{"date-parts":[["1998"]]}}},{"key":"http://zotero.org/users/39885/items/NKKUI89N","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NKKUI89N","type":"article-journal","title":"The Energetic Basis for Valuation of Ecosystem Services","container-title":"Ecosystems","page":"21-23","volume":"3","issue":"1","source":"link.springer.com.ezproxy.library.uq.edu.au","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/article/10.1007/s100210000005","DOI":"10.1007/s100210000005","ISSN":"1432-9840","journalAbbreviation":"Ecosystems","language":"en","author":[{"family":"Odum","given":"Howard T."},{"family":"Odum","given":"Eugene P."}],"issued":{"date-parts":[["2000",1]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/NMD8P5WV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NMD8P5WV","type":"book","title":"Modelling Radiocesium in Lakes and Coastal Areas-New Approaches for Ecosystem Modellers: A Textbook with Internet Support","publisher":"Springer","edition":"1","ISBN":"0-7923-6245-4","call-number":"0028","shortTitle":"Modelling Radiocesium in Lakes and Coastal Areas-New Approaches for Ecosystem Modellers","author":[{"family":"Håkanson","given":"Lars"}],"issued":{"date-parts":[["2000",2,29]]}}},{"key":"http://zotero.org/users/39885/items/NPTKXQSK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NPTKXQSK","type":"article-journal","title":"Varieties of systems thinking: The case of soft systems methodology","container-title":"System Dynamics Review","page":"189-197","volume":"10","issue":"2-3","source":"CrossRef","URL":"http://doi.wiley.com/10.1002/sdr.4260100207","DOI":"10.1002/sdr.4260100207","ISSN":"08837066","shortTitle":"Varieties of systems thinking","journalAbbreviation":"Syst. Dyn. Rev.","author":[{"family":"Checkland","given":"Peter B."},{"family":"Haynes","given":"Michael G."}],"issued":{"date-parts":[["1994"]]},"accessed":{"date-parts":[["2011",7,3]]}}},{"key":"http://zotero.org/users/39885/items/NPZUT8U9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NPZUT8U9","type":"chapter","title":"Combining Energy Laws and Corollaries of the Maximum Power Principle","container-title":"Ecosystem Analysis and Prediction: Proceedings of a SIAM-SIMS Conference Held at Alta, Utah, July 1-5, 1974","publisher":"Society for Industrial and Applied Mathematics","publisher-place":"Pennsylvania","event-place":"Pennsylvania","call-number":"0015","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1975"]]}}},{"key":"http://zotero.org/users/39885/items/NQ2HQV8Q","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NQ2HQV8Q","type":"article-journal","title":"The Role of Transposable Elements in Health and Diseases of the Central Nervous System","container-title":"The Journal of Neuroscience","page":"17577-17586","volume":"33","issue":"45","source":"www.jneurosci.org.ezproxy.library.uq.edu.au","abstract":"First discovered in maize by Barbara McClintock in the 1940s, transposable elements (TEs) are DNA sequences that in some cases have the ability to move along chromosomes or “transpose” in the genome. This revolutionary finding was initially met with resistance by the scientific community and viewed by some as heretical. A large body of knowledge has accumulated over the last 60 years on the biology of TEs. Indeed, it is now known that TEs can generate genomic instability and reconfigure gene expression networks both in the germline and somatic cells. This review highlights recent findings on the role of TEs in health and diseases of the CNS, which were presented at the 2013 Society for Neuroscience meeting. The work of the speakers in this symposium shows that TEs are expressed and active in the brain, challenging the dogma that neuronal genomes are static and revealing that they are susceptible to somatic genomic alterations. These new findings on TE expression and function in the CNS have major implications for understanding the neuroplasticity of the brain, which could hypothetically have a role in shaping individual behavior and contribute to vulnerability to disease.","URL":"http://www.jneurosci.org.ezproxy.library.uq.edu.au/content/33/45/17577","DOI":"10.1523/JNEUROSCI.3369-13.2013","ISSN":"0270-6474, 1529-2401","note":"PMID: 24198348","journalAbbreviation":"J. Neurosci.","language":"en","author":[{"family":"Reilly","given":"Matthew T."},{"family":"Faulkner","given":"Geoffrey J."},{"family":"Dubnau","given":"Joshua"},{"family":"Ponomarev","given":"Igor"},{"family":"Gage","given":"Fred H."}],"issued":{"date-parts":[["2013",11,6]]},"accessed":{"date-parts":[["2016",2,23]]},"PMID":"24198348"}},{"key":"http://zotero.org/users/39885/items/NQE3A2IV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NQE3A2IV","type":"article-journal","title":"Analyzing Suitability of SysML for System Engineering Applications","source":"Google Scholar","author":[{"family":"Ahmad","given":"S.Z."}],"issued":{"date-parts":[["2007"]]}}},{"key":"http://zotero.org/users/39885/items/NQGH4TM2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NQGH4TM2","type":"book","title":"Logical dilemmas: the life and work of Kurt Gödel","publisher":"A K Peters","publisher-place":"Wellesley, Mass","number-of-pages":"xiv, 361","source":"UQ Library Search, Summon 2.0","event-place":"Wellesley, Mass","abstract":"This definitive biography of the logician and philosopher Kurt Godel is the first in-depth account to integrate details of his personal life with his work and is based on the author's intensive study of Godel's papers and surviving correspondence. Godel (1906-1978) is considered to be the preeminent logic researcher of the twentieth century. His noted works on the completeness of first-order logic, the incompleteness of formal number theory, and the relative consistency of the Axiom of Choice and the Continuum Hypothesis established bounds on the efficacy of formal methods in investigating foundational questions. He is also noted for his unique and distinctive writings on the philosophy behind mathematics, and his lesser-known results in cosmology raised problematic issues in the philosophy of time. Dawson, a logician and historian of science, examines the life of this driven man whose work on the foundation of mathematics has fundamentally changed our thoughts on these subjects and has stimulated much of the research conducted in this century. He further explores the relationship between Godel's personality and his scientific achievements and describes the impact Godel's results have had on our modern world view.","ISBN":"1-56881-025-3","call-number":"QA29.G58 D39 1997","shortTitle":"Logical dilemmas","language":"English","author":[{"family":"Dawson","given":"John W."}],"issued":{"date-parts":[["1997"]]}}},{"key":"http://zotero.org/users/39885/items/NRP6VTGF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NRP6VTGF","type":"article-journal","title":"Self-Organization, Transformity, and Information","container-title":"Science","page":"1132-1139","volume":"242","issue":"4882","abstract":"Ecosystems and other self-organizing systems develop system designs and mathematics that reinforce energy use, characteristically with alternate pulsing of production and consumption, increasingly recognized as the new paradigm. Insights from the energetics of ecological food chains suggest the need to redefine work, distinguishing kinds of energy with a new quantity, the transformity (energy of one type required per unit of another). Transformities may be used as an energy-scaling factor for the hierarchies of the universe including information. Solar transformities in the biosphere, expressed as solar emjoules per joule, range from one for solar insolation to trillions for categories of shared information. Resource contributions multiplied by their transformities provide a scientifically based value system for human service, environmental mitigation, foreign trade equity, public policy alternatives, and economic vitality.","URL":"http://www.sciencemag.org/cgi/content/abstract/242/4882/1132","DOI":"10.1126/science.242.4882.1132","call-number":"0417","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1988",11,25]]},"accessed":{"date-parts":[["2008",3,20]]}}},{"key":"http://zotero.org/users/39885/items/NS52PX9H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NS52PX9H","type":"webpage","title":"requiring npm modules in the browser console","container-title":"Gist","abstract":"requiring npm modules in the browser console","URL":"https://gist.github.com/mathisonian/c325dbe02ea4d6880c4e","accessed":{"date-parts":[["2015",11,29]]}}},{"key":"http://zotero.org/users/39885/items/NSH9NZSP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NSH9NZSP","type":"article","title":"Guidelines on Acceptable Flood Capacity for Water Dams","publisher":"Department of Energy and Water Supply","URL":"https://www.dews.qld.gov.au/__data/assets/pdf_file/0003/78834/acceptable-flood-capacity-dams.pdf","author":[{"family":"DEWS","given":"Department of Energy and Water Supply"}],"issued":{"date-parts":[["2013",1]]},"accessed":{"date-parts":[["2015",3,25]]}}},{"key":"http://zotero.org/users/39885/items/NSK4JTS4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NSK4JTS4","type":"article-journal","title":"The Yijing and Philosophy: From Leibniz to Derrida","container-title":"Journal of Chinese Philosophy","page":"377-396","volume":"38","issue":"3","source":"Wiley Online Library","URL":"http://onlinelibrary.wiley.com.ezproxy.library.uq.edu.au/doi/10.1111/j.1540-6253.2011.01661.x/abstract","DOI":"10.1111/j.1540-6253.2011.01661.x","ISSN":"1540-6253","shortTitle":"The Yijing and Philosophy","language":"en","author":[{"family":"Nelson","given":"Eric S."}],"issued":{"date-parts":[["2011",9,1]]},"accessed":{"date-parts":[["2016",3,5]]}}},{"key":"http://zotero.org/users/39885/items/NSMIMH72","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NSMIMH72","type":"article-journal","title":"Review of Risks to Communities from Shale Energy Development","container-title":"Environmental Science & Technology","page":"8321-8333","volume":"48","issue":"15","source":"ACS Publications","abstract":"Although shale energy development can bring infusions of money and jobs to local communities, an array of risks to community-level assets and institutions is also possible. Sociological research dating back to the 1970s links rapid oil and gas development with overburdened municipal services, upended social and cultural patterns, and volatile economic growth. Research on technological risk has demonstrated communities can come to be associated with pollution and contamination, resulting in out-migration, declining amenity-led development, and decreased financial investment. Emerging shale energy case studies in Wyoming, Pennsylvania, North Dakota, and Texas show a similar, although nuanced, picture of these concerns. Yet, little data exists on the prevalence or magnitude of these risks in the current context of shale gas development. The existing research has largely remained case-based in nature, has not been synthesized across various disciplines, and has not been updated to account for various social and technological trends that have occurred since its publication. This paper offers a critical review of major research endeavors that inform our knowledge of risk to communities from shale energy development, while identifying gaps in our understanding of these risks and areas of research need.","URL":"http://dx.doi.org/10.1021/es404647x","DOI":"10.1021/es404647x","ISSN":"0013-936X","journalAbbreviation":"Environ. Sci. Technol.","author":[{"family":"Jacquet","given":"Jeffrey B."}],"issued":{"date-parts":[["2014",8,5]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/NTV6RS9Q","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NTV6RS9Q","type":"book","title":"Cybernetics, Second Edition: or the Control and Communication in the Animal and the Machine","publisher":"The MIT Press","edition":"2","ISBN":"0-262-73009-X","call-number":"0004","shortTitle":"Cybernetics, Second Edition","author":[{"family":"Wiener","given":"Norbert"}],"issued":{"date-parts":[["1965",3,15]]}}},{"key":"http://zotero.org/users/39885/items/NU2QCU9U","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NU2QCU9U","type":"book","title":"The Social Licence to Operate and Coal Seam Gas Development. A literature review report to the Gas Industry Social and Environmental Research Alliance (GISERA). March 2013","publisher":"CSIRO, Canberra","source":"Google Scholar","URL":"http://www.gisera.org.au/publications/tech_reports_papers/socioeco-proj-5-lit-review.pdf","author":[{"family":"Williams","given":"R."},{"family":"Walton","given":"A."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/NU64XWCQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NU64XWCQ","type":"book","title":"Computer simulation in management science","publisher":"Wiley","publisher-place":"Chichester ;;New York","edition":"2nd ed.","event-place":"Chichester ;;New York","ISBN":"978-0-471-91931-5","author":[{"family":"Pidd","given":"Michael"}],"issued":{"date-parts":[["1988"]]}}},{"key":"http://zotero.org/users/39885/items/NVTTUHKW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NVTTUHKW","type":"article-journal","title":"The Heat Engine Idea in the Seventeenth Century","container-title":"Transactions of the Newcomen Society","page":"1-11","volume":"17","issue":"1","source":"maneyonline.com.ezproxy.library.uq.edu.au (Atypon)","URL":"http://www.maneyonline.com.ezproxy.library.uq.edu.au/doi/abs/10.1179/tns.1936.001","DOI":"10.1179/tns.1936.001","ISSN":"0372-0187","journalAbbreviation":"Transactions of the Newcomen Society","author":[{"family":"Jenkins","given":"Rhys"}],"issued":{"date-parts":[["1936",1,1]]},"accessed":{"date-parts":[["2015",12,31]]}}},{"key":"http://zotero.org/users/39885/items/NVVD9UPI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NVVD9UPI","type":"book","title":"Environmental Accounting: Emergy and Environmental Decision Making","publisher":"Wiley","edition":"1","ISBN":"0-471-11442-1","call-number":"0993","shortTitle":"Environmental Accounting","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1995",11,28]]}}},{"key":"http://zotero.org/users/39885/items/NWT27PFM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NWT27PFM","type":"book","title":"Operating manual for spaceship earth","publisher":"Dutton","publisher-place":"New York","source":"Open WorldCat","event-place":"New York","ISBN":"978-0-525-47433-3","author":[{"family":"Fuller","given":"R"}],"issued":{"date-parts":[["1978"]]}}},{"key":"http://zotero.org/users/39885/items/NZHGEEBJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NZHGEEBJ","type":"article-journal","title":"Evaluation of a \"mental effort\" hypothesis for correlations between cortical metabolism and intelligence","container-title":"Intelligence","page":"267-278","volume":"21","issue":"3","abstract":"Previous research indicates that low scores on the Raven's Advanced Progressive Matrices (RAPM) test are associated with increased cortical glucose utilization during problem solving. We hypothesized that previous results may reflect the neurophysiological consequences of patterns of effort requirements; that is, high-effort expenditure from lower aptitude participants (for whom the problems are hard) and low-effort expenditure from higher aptitude participants (for whom the problems are easy). In this experiment, positron emission tomography (PET) data were gathered on participants (N = 28) who solved easy and hard problems that were tailored to the participants' own ability levels, thereby eliminating aptitude group differences in effort requirements. Contrary to previous results, high aptitude was associated with high cortical glucose use. Average aptitude participants showed diminished glucose use in the hard condition. A significant Group X Condition X Hemisphere Effect was also noted, with greater right hemisphere activation in the hard condition for the high-aptitude group. These results demonstrate that the relation of cerebral glucose use and cognitive ability is sensitive to participant and task selection.","URL":"http://www.sciencedirect.com/science/article/B6W4M-45MW0C1-2/1/d65c5d0b3926108682d946e3ab12ce8c","DOI":"10.1016/0160-2896(95)90017-9","call-number":"0037","author":[{"family":"Larson","given":"Gerald E."},{"family":"Haier","given":"Richard J."},{"family":"LaCasse","given":"Lori"},{"family":"Hazen","given":"Kay"}],"issued":{"date-parts":[["1995"]]},"accessed":{"date-parts":[["2008",5,13]]}}},{"key":"http://zotero.org/users/39885/items/NZNKHP7W","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/NZNKHP7W","type":"book","title":"Electronic sensors for the evil genius","publisher":"McGraw-Hill","publisher-place":"New York ;;London","event-place":"New York ;;London","ISBN":"978-0-07-147036-0","author":[{"family":"Petruzzellis","given":"Thomas"}],"issued":{"date-parts":[["2006"]]}}},{"key":"http://zotero.org/users/39885/items/P3WAF3RB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/P3WAF3RB","type":"article-journal","title":"Cosmic emergy based ecological systems modelling","container-title":"Communications in Nonlinear Science and Numerical Simulation","page":"2672-2700","volume":"15","issue":"9","source":"ScienceDirect","abstract":"Ecological systems modelling based on the unified biophysical measure of cosmic emergy in terms of embodied cosmic exergy is illustrated in this paper with ecological accounting, simulation and scenario analysis, by a case study for the regional socio-economic ecosystem associated with the municipality of Beijing. An urbanized regional ecosystem model with eight subsystems of natural support, agriculture, urban production, population, finance, land area, potential environmental impact, and culture is representatively presented in exergy circuit language with 12 state variables governing by corresponding ecodynamic equations, and 60 flows and auxiliary variables. To characterize the regional socio-economy as an ecosystem, a series of ecological indicators based on cosmic emergy are devised. For a systematic ecological account, cosmic exergy transformities are provided for various dimensions including climate flows, natural resources, industrial products, cultural products, population with educational hierarchy, and environmental emissions. For the urban ecosystem of Beijing in the period from 1990 to 2005, ecological accounting is carried out and characterized in full details. Taking 2000 as the starting point, systems modelling is realized to predict the urban evolution in a one hundred time horizon. For systems regulation, scenario analyses with essential policy-making implications are made to illustrate the long term systems effects of the expected water diversion and rise in energy price.","URL":"http://www.sciencedirect.com/science/article/pii/S1007570409005000","DOI":"10.1016/j.cnsns.2009.09.025","ISSN":"1007-5704","journalAbbreviation":"Communications in Nonlinear Science and Numerical Simulation","author":[{"family":"Chen","given":"H."},{"family":"Chen","given":"G. Q."},{"family":"Ji","given":"X."}],"issued":{"date-parts":[["2010",9]]},"accessed":{"date-parts":[["2016",1,14]]}}},{"key":"http://zotero.org/users/39885/items/P42JS6FH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/P42JS6FH","type":"article-journal","title":"What Has Cybernetics to Do with Operational Research?","container-title":"OR","page":"1-21","volume":"10","issue":"1","source":"JSTOR","abstract":"Part 1 of this paper answers the question \"What is cybernetics?\" A brief historical review introduces a somewhat formal statement about the nature of systems and the way they are controlled. The unifying topic in the study of control in every context is an underlying identity of system: an example is taken from learning machines. A comparably brief treatment of the question \"What is operational research?\" is given in Part 2. Operational research is thought to be the latest exemplification of scientific method rather than \"a science\". What is important about operational research is brought out through a description of an actual case study, and some of the activities which look like operational research but are not are mentioned. This leads to an attempted definition of operational research. Part 3 tries to draw the answers to the first two questions together, and to show how operational research and cybernetics are related. It is possible to pursue each activity in its own right; but it is also possible to practise operational research with essentially cybernetic models, and to study cybernetics by operational research techniques. This thought is generalized into the idea that cybernetics is the science of which operational research is the method.","URL":"http://www.jstor.org/stable/3007308","DOI":"10.2307/3007308","ISSN":"1473-2858","journalAbbreviation":"OR","author":[{"family":"Beer","given":"Stafford"}],"issued":{"date-parts":[["1959"]]},"accessed":{"date-parts":[["2015",11,13]]}}},{"key":"http://zotero.org/users/39885/items/P42MIKRW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/P42MIKRW","type":"chapter","title":"Leibniz’s Quantity of Force: A ‘Heresy’? Emilie du Châtelet’s Institutions in the Context of the Vis Viva Controversy","container-title":"Emilie du Châtelet between Leibniz and Newton","collection-title":"International Archives of the History of Ideas / Archives internationales d'histoire des idées","collection-number":"205","publisher":"Springer Netherlands","page":"157-171","source":"link.springer.com.ezproxy.library.uq.edu.au","abstract":"The following article deals with the foundational programme of mechanics developed by Emilie du Châtelet in her work Institutions (1742) regarding to the vis viva controversy, a dispute about the question whether the Cartesian quantity mv or the Leibnizian quantity mv2 was the true measure of force. From a modern point of view, the quarrel seems easy to explain. The Cartesian quantity of motion refers to what is now called momentum, the Leibnizian quantity of force to the kinetic energy of a moving body. Both quantities are conserved. In fact, it was not that simple. Far from being a “dispute de mots”, the vis viva controversy involved the confrontation with specific ontological presuppositions underlying the physico-philosophical theories of that time. In this context Du Châtelet proposed a reformation of metaphysics as science offering a framework for the integration of Leibniz’s vis viva theory into Newtonian mechanics.","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/chapter/10.1007/978-94-007-2093-0_6","ISBN":"978-94-007-2074-9","note":"DOI: 10.1007/978-94-007-2093-0_6","shortTitle":"Leibniz’s Quantity of Force","language":"en","author":[{"family":"Reichenberger","given":"Andrea"}],"editor":[{"family":"Hagengruber","given":"Ruth"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2016",3,13]]}}},{"key":"http://zotero.org/users/39885/items/P8DKES8S","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/P8DKES8S","type":"webpage","title":"Perth Basin baseline monitoring project","URL":"http://www.dmp.wa.gov.au/7105_22136.aspx","author":[{"family":"DMP","given":""}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",12,11]]}}},{"key":"http://zotero.org/users/39885/items/P8MJ7WDA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/P8MJ7WDA","type":"article-journal","title":"Emergy as a function of exergy","container-title":"Energy","page":"1158-1162","volume":"32","issue":"7","source":"ScienceDirect","abstract":"This paper aims to clarify some aspects of the discussion between “emergists” and “exergists”. First, we address the problem of the differences between energy-based emergy and exergy-based emergy: we show that the two are proportional, having the exergetic equivalent of solar energy as scale factor. In the second part, we show that emergy and transformity can be written as a function of exergy alone, in particular of “partial” efficiencies of the processes involved in a production system, from solar energy to the final product.","URL":"http://www.sciencedirect.com/science/article/pii/S0360544206002428","DOI":"10.1016/j.energy.2006.08.009","ISSN":"0360-5442","journalAbbreviation":"Energy","author":[{"family":"Bastianoni","given":"S."},{"family":"Facchini","given":"A."},{"family":"Susani","given":"L."},{"family":"Tiezzi","given":"E."}],"issued":{"date-parts":[["2007",7]]},"accessed":{"date-parts":[["2016",1,14]]}}},{"key":"http://zotero.org/users/39885/items/PB83TRJC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PB83TRJC","type":"article-journal","title":"Environmental Regulation of Hydraulic Fracturing","container-title":"SPE Production & Operations","source":"CrossRef","URL":"http://www.onepetro.org/doi/10.2118/166146-PA","DOI":"10.2118/166146-PA","ISSN":"1930-1855","language":"en","author":[{"family":"Campin","given":"David"}],"issued":{"date-parts":[["2015",5,1]]},"accessed":{"date-parts":[["2015",8,24]]}}},{"key":"http://zotero.org/users/39885/items/PD7GCUJQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PD7GCUJQ","type":"paper-conference","title":"Work Circuits and Systems Stress","publisher":"Univ. of Maine","publisher-place":"Orono","page":"81-138","event-place":"Orono","call-number":"0413","author":[{"family":"Odum","given":"HT"}],"issued":{"date-parts":[["1968"]]}}},{"key":"http://zotero.org/users/39885/items/PEHZP33Q","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PEHZP33Q","type":"article-journal","title":"Environmental health impacts of unconventional natural gas development: A review of the current strength of evidence","container-title":"Science of The Total Environment","page":"1127-1141","volume":"505","source":"ScienceDirect","abstract":"Rapid global expansion of unconventional natural gas development (UNGD) raises environmental health concerns. Many studies present information on these concerns, yet the strength of epidemiological evidence remains tenuous. This paper is a review of the strength of evidence in scientific reporting of environmental hazards from UNGD activities associated with adverse human health outcomes. Studies were drawn from peer-reviewed and grey literature following a systematic search. Five databases were searched for studies published from January 1995 through March 2014 using key search terms relevant to environmental health. Studies were screened, ranked and then reviewed according to the strength of the evidence presented on adverse environmental health outcomes associated with UNGD. The initial searches yielded &gt; 1000 studies, but this was reduced to 109 relevant studies after the ranking process. Only seven studies were considered highly relevant based on strength of evidence. Articles spanned several relevant topics, but most focussed on impacts on typical environmental media, such as water and air, with much of the health impacts inferred rather than evidenced. Additionally, the majority of studies focussed on short-term, rather than long-term, health impacts, which is expected considering the timeframe of UNGD; therefore, very few studies examined health outcomes with longer latencies such as cancer or developmental outcomes. Current scientific evidence for UNGD that demonstrates associations between adverse health outcomes directly with environmental health hazards resulting from UNGD activities generally lacks methodological rigour. Importantly, however, there is also no evidence to rule out such health impacts. While the current evidence in the scientific research reporting leaves questions unanswered about the actual environmental health impacts, public health concerns remain intense. This is a clear gap in the scientific knowledge that requires urgent attention.","URL":"http://www.sciencedirect.com/science/article/pii/S0048969714015290","DOI":"10.1016/j.scitotenv.2014.10.084","ISSN":"0048-9697","shortTitle":"Environmental health impacts of unconventional natural gas development","journalAbbreviation":"Science of The Total Environment","author":[{"family":"Werner","given":"Angela K."},{"family":"Vink","given":"Sue"},{"family":"Watt","given":"Kerrianne"},{"family":"Jagals","given":"Paul"}],"issued":{"date-parts":[["2015",2,1]]},"accessed":{"date-parts":[["2015",8,24]]}}},{"key":"http://zotero.org/users/39885/items/PFS55R96","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PFS55R96","type":"book","title":"The macroscope: A new world scientific system","publisher":"Harper & Row","number-of-pages":"247","edition":"1st","source":"Amazon.com","URL":"http://pespmc1.vub.ac.be/macroscope/default.html","ISBN":"0-06-011029-5","shortTitle":"The macroscope","author":[{"family":"Rosnay","given":"Joel","dropping-particle":"de"}],"issued":{"date-parts":[["1979"]]}}},{"key":"http://zotero.org/users/39885/items/PGBQZIP6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PGBQZIP6","type":"book","title":"Diagnosing the System for Organizations","publisher":"Wiley","edition":"1","ISBN":"0-471-95136-6","call-number":"0901","author":[{"family":"Beer","given":"Stafford"}],"issued":{"date-parts":[["1995",5,16]]}}},{"key":"http://zotero.org/users/39885/items/PGSX77A5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PGSX77A5","type":"chapter","title":"State of the Art: Mathematical Approaches in Brain Science","container-title":"A New Foundation for Representation in Cognitive and Brain Science","collection-title":"Springer Series in Cognitive and Neural Systems","collection-number":"7","publisher":"Springer Netherlands","page":"11-32","source":"link.springer.com.ezproxy.library.uq.edu.au","abstract":"This chapter explores some of the most relevant mathematical structures used by brain researchers to unravel brain’s structure, function and dynamics. It starts by looking into the concept of brain state. The concept of the state of a system is key in engineering and physics, but maybe it is a not a very well understood concept in other relevant fields of brain science like cognitive psychology. Scientific models and theories of the brain are empirically tested against signal measurements of brain activity. Undoubtedly, the methodology and technology used constrain the possible interpretations of the models. For example, single cell recording typically consists on time series of voltage values that represents spikes or action potentials. Spikes are characterised by two parameters: amplitude and duration. Recording a population of neurons, on the other hand, is far from trivial. The recorded signal is not a point process, rather it represents a summation of several events in the neighborhood of the electrode. Neuroscience constitutes a challenging and promising testing ground for developing our understanding of how the macroscopic level emerges from the interaction of large numbers of interacting components. The functioning of the brain at the high level of mental processing is, of course, expected to be the result of the co-operate action of a very large number of neurons.","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/chapter/10.1007/978-94-007-7738-5_2","ISBN":"978-94-007-7737-8","note":"DOI: 10.1007/978-94-007-7738-5_2","shortTitle":"State of the Art","language":"en","author":[{"family":"Gómez-Ramirez","given":"Jaime"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2016",2,23]]}}},{"key":"http://zotero.org/users/39885/items/PGTBPZEK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PGTBPZEK","type":"book","title":"The Science of Mechanics: A Critical and Historical Account of Its Development","publisher":"Open Court Publishing Company","publisher-place":"LaSalle, Ill.","number-of-pages":"668","edition":"6 edition","source":"Amazon","event-place":"LaSalle, Ill.","ISBN":"978-0-87548-202-6","shortTitle":"The Science of Mechanics","language":"English","author":[{"family":"Mach","given":"Ernst"}],"translator":[{"family":"McCormack","given":"T. J."}],"issued":{"date-parts":[["1919"]]}}},{"key":"http://zotero.org/users/39885/items/PGU29QU3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PGU29QU3","type":"webpage","title":"Linc Energy: Key findings from the experts' report","container-title":"ABC News","genre":"Text","abstract":"The ABC has compiled the following information from the Gilbert & Sutherland report into Linc Energy.","URL":"http://www.abc.net.au/news/2015-08-10/linc-energy-key-findings/6681938","shortTitle":"Linc Energy","language":"en-AU","author":[{"literal":"ABC"}],"issued":{"date-parts":[["2015",8,10]]},"accessed":{"date-parts":[["2015",10,13]]}}},{"key":"http://zotero.org/users/39885/items/PIBPN43W","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PIBPN43W","type":"webpage","title":"fastn - Create ultra-lightweight UI components","container-title":"GitHub","abstract":"fastn - Create ultra-lightweight UI components","URL":"https://github.com/KoryNunn/fastn","author":[{"family":"Nunn","given":"Kory"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/PM6SGVVP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PM6SGVVP","type":"webpage","title":"National Map","URL":"http://nationalmap.gov.au/","author":[{"literal":"NICTA"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",11,10]]}}},{"key":"http://zotero.org/users/39885/items/PMB2JHVK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PMB2JHVK","type":"book","title":"Concise System of Orthopaedics and Fractures","publisher":"A Hodder Arnold Publication","edition":"2","ISBN":"0-7506-1767-5","call-number":"0000","author":[{"family":"Apley","given":"A. Graham"},{"family":"Solomon","given":"Louis"}],"issued":{"date-parts":[["1994",1,15]]}}},{"key":"http://zotero.org/users/39885/items/PMH87QN5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PMH87QN5","type":"book","title":"Systems Thinking, Systems Practice: Includes a 30-Year Retrospective","publisher":"Wiley","edition":"1","ISBN":"0-471-98606-2","call-number":"0165","shortTitle":"Systems Thinking, Systems Practice","author":[{"family":"Checkland","given":"Peter"}],"issued":{"date-parts":[["1999",9,16]]}}},{"key":"http://zotero.org/users/39885/items/PMR79NZK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PMR79NZK","type":"book","title":"Order and chaos : laws of energy and entropy","publisher":"Penguin","publisher-place":"Harmondsworth","event-place":"Harmondsworth","ISBN":"978-0-14-021599-1","call-number":"0000","author":[{"family":"Angrist","given":"Stanley"}],"issued":{"date-parts":[["1973"]]}}},{"key":"http://zotero.org/users/39885/items/PN9MGZQD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PN9MGZQD","type":"report","title":"Coal Seam Gas Review","publisher":"Queensland Competition Authority","URL":"http://www.qca.org.au/getattachment/aaaeab4b-519f-4a95-8a65-911bc46cc1d3/CSG-investigation.aspx","author":[{"family":"Cunningham","given":"Tom"},{"family":"Godfrey","given":"Lez"},{"family":"Keating","given":"James"},{"family":"O’Mullane","given":"Linda"},{"family":"Prasad","given":"Ravi"}],"issued":{"date-parts":[["2014"]]}}},{"key":"http://zotero.org/users/39885/items/PNRFH8F9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PNRFH8F9","type":"article-journal","title":"New perspectives in cell communication: Bioelectromagnetic interactions","container-title":"Seminars in Cancer Biology","collection-title":"Why Systems Biology and Cancer?","page":"207-214","volume":"21","issue":"3","source":"ScienceDirect","abstract":"This paper explores physical signalling in biological communications, the so-called biophysical pathways, and especially the role of electromagnetic signalling in cell–cell interactions. The experiments were designed to evaluate whether different cell populations physically interfere when incubated in separate Petri dishes placed in close proximity. Two different cell populations, immortalized mouse fibroblasts (NIH3T3) and adult human microvascular endothelial cells (HMVECad) were selected and seeded in separate polystyrene Petri dishes. Dishes seeded with NIH3T3 were then placed on top of those seeded with HMVECad at distances of 4 mm and 11 mm. A black filter was placed between dishes containing the two cell populations in another experiment, to prevent transmission of electromagnetic radiation between the two. Cell number and morphology of NIH3T3 and endothelial cells were found to be modified in dishes without the black filter, suggesting that specific signals emitted by the cells were transmitted through the polystyrene wall, affecting cell proliferation rate and morphology, even though the cells were growing in separate dishes.","URL":"http://www.sciencedirect.com/science/article/pii/S1044579X11000289","DOI":"10.1016/j.semcancer.2011.04.003","ISSN":"1044-579X","shortTitle":"New perspectives in cell communication","journalAbbreviation":"Seminars in Cancer Biology","author":[{"family":"Rossi","given":"C."},{"family":"Foletti","given":"A."},{"family":"Magnani","given":"A."},{"family":"Lamponi","given":"S."}],"issued":{"date-parts":[["2011",6]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/PP3S4JQQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PP3S4JQQ","type":"article-journal","title":"If I had a rich picture...: insights into the use of \"soft\" methodological tools to support the development of interprofessional education.","container-title":"Journal of Interprofessional Care","page":"488-498","volume":"22","issue":"5","source":"EBSCOhost","abstract":"This paper describes a methodological experiment that aimed to test a small number of tools borrowed from Soft Systems Methodology. Those tools were intended to support action research for a project in interprofessional educational development. The intention with using those tools was two-fold: first, they were expected to help structure the analysis of the problem situation that the project was to address; second, they were to facilitate and document the project management process itself, by allowing for the different voices within the interprofessional project team to be heard. The paper relates how the tools functioned relatively successfully as analytical devices for the action researcher, but did not significantly contribute to further interprofessional collaboration or enhance dialogue between the action researcher and the project members. Issues of how to use the tools to support more effectively the existing dialogue across professional cultures and traditions are discussed.","ISSN":"1356-1820","call-number":"2010137319","shortTitle":"If I had a rich picture...","journalAbbreviation":"J INTERPROF CARE","author":[{"family":"Fougner","given":"M"},{"family":"Habib","given":"L"}],"issued":{"date-parts":[["2008",10]]}}},{"key":"http://zotero.org/users/39885/items/PRDTT8BW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PRDTT8BW","type":"article-journal","title":"Artificial Adaptive Agents in Economic Theory","container-title":"American Economic Review","page":"pp.&nbsp;365–71","volume":"81(2)","URL":"http://www.google.es/url?sa=t&source=web&ct=res&cd=3&url=http%3A%2F%2Fzia.hss.cmu.edu%2Fmiller%2Fpapers%2Faaa.pdf&ei=cTL6SbeAMNKNjAfy4oCaAw&usg=AFQjCNG4L3BCEDURuqWApNxzVCwdkuC9Kw&sig2=r74_xJZYh4t3-56_nXHm1g","author":[{"family":"Holland","given":"J. H.; Miller"},{"family":"Holland, J.H.; Miller, J.H.;","given":""}],"issued":{"date-parts":[["1991"]]},"accessed":{"date-parts":[["2010",3,16]]}}},{"key":"http://zotero.org/users/39885/items/PS5SMPGM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PS5SMPGM","type":"article-journal","title":"A New Long Term Assessment of Energy Return on Investment (EROI) for U.S. Oil and Gas Discovery and Production","container-title":"Sustainability","page":"1866-1887","volume":"3","issue":"10","source":"www.mdpi.com","abstract":"Oil and gas are the main sources of energy in the United States. Part of their appeal is the high Energy Return on Energy Investment (EROI) when procuring them. We assessed data from the United States Bureau of the Census of Mineral Industries, the Energy Information Administration (EIA), the Oil and Gas Journal for the years 1919–2007 and from oil analyst Jean Laherrere to derive EROI for both finding and producing oil and gas. We found two general patterns in the relation of energy gains compared to energy costs: a gradual secular decrease in EROI and an inverse relation to drilling effort. EROI for finding oil and gas decreased exponentially from 1200:1 in 1919 to 5:1 in 2007. The EROI for production of the oil and gas industry was about 20:1 from 1919 to 1972, declined to about 8:1 in 1982 when peak drilling occurred, recovered to about 17:1 from 1986–2002 and declined sharply to about 11:1 in the mid to late 2000s. The slowly declining secular trend has been partly masked by changing effort: the lower the intensity of drilling, the higher the EROI compared to the secular trend. Fuel consumption within the oil and gas industry grew continuously from 1919 through the early 1980s, declined in the mid-1990s, and has increased recently, not surprisingly linked to the increased cost of finding and extracting oil.","URL":"http://www.mdpi.com/2071-1050/3/10/1866","DOI":"10.3390/su3101866","language":"en","author":[{"family":"Guilford","given":"Megan C."},{"family":"Hall","given":"Charles A. S."},{"family":"O’Connor","given":"Peter"},{"family":"Cleveland","given":"Cutler J."}],"issued":{"date-parts":[["2011",10,14]]},"accessed":{"date-parts":[["2016",1,16]]}}},{"key":"http://zotero.org/users/39885/items/PSIGZAZH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PSIGZAZH","type":"webpage","title":"D3.js - Data-Driven Documents","abstract":"D3 is a JavaScript library for visualizing data with HTML, SVG, and CSS.","URL":"https://d3js.org/","author":[{"family":"Bostock","given":"Mike"}],"issued":{"date-parts":[["2016"]]},"accessed":{"date-parts":[["2016",3,14]]}}},{"key":"http://zotero.org/users/39885/items/PSNPFASC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PSNPFASC","type":"article-journal","title":"Assessing urban flooding vulnerability with an emergy approach","container-title":"Landscape and Urban Planning","page":"11-24","volume":"143","source":"ScienceDirect","abstract":"Under the context of climate change adaption research, vulnerability assessment should take into consideration the interaction among natural processes, socio-economic conditions, and the mechanisms of response of the integrated ecological economic system. Pressure from urban development, land use and land cover change along the western coast of Taiwan not only has caused the loss of ecosystem services in peri-urban environments, but has also resulted in an increase in urban flooding vulnerability. This paper develops a framework, which incorporates the interaction among exposure, sensitivity, and adaptive capacity for assessing the vulnerability to flooding. To achieve this aim, this research interprets urban flooding vulnerability based on emergy concepts and develops emergy indices to assess the spatiality of urban flooding vulnerability in Taiwan's western coastal plain via GIS. Based on the results of the emergy evaluation of the three components of vulnerability and five emergy indices for urban flooding vulnerability, the areas with intense urbanization are characterized with high potential impact to flood. However, cities with higher potential impact do not necessarily lead to higher vulnerability for urban flooding because adaptive capacity can also mitigate the vulnerability of cities to extreme climate events. Using the framework developed by this research we show that the emergy concept can effectively provide a common measuring unit for evaluating exposure, sensitivity and adaptive capacity of urban flooding vulnerability.","URL":"http://www.sciencedirect.com/science/article/pii/S0169204615001292","DOI":"10.1016/j.landurbplan.2015.06.004","ISSN":"0169-2046","journalAbbreviation":"Landscape and Urban Planning","author":[{"family":"Chang","given":"Li-Fang"},{"family":"Huang","given":"Shu-Li"}],"issued":{"date-parts":[["2015",11]]},"accessed":{"date-parts":[["2015",8,29]]}}},{"key":"http://zotero.org/users/39885/items/PTPPAVFV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PTPPAVFV","type":"book","title":"Environmental economics: the analysis of a major interface","publisher":"Roland Leimgruber","call-number":"0012","shortTitle":"Environmental economics","author":[{"family":"Pillet","given":"G."},{"family":"Murota","given":"T."}],"issued":{"date-parts":[["1987"]]}}},{"key":"http://zotero.org/users/39885/items/PUJ5W57K","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PUJ5W57K","type":"article-journal","title":"Explanations of ecological relationships with energy systems concepts","container-title":"Ecological Modelling","page":"201-211","volume":"158","issue":"3","source":"ScienceDirect","abstract":"In order to compare aspects of systems ecology theory, this paper is one of a group by different authors arranged by Sven Jorgensen to explain the quantitative relationships in the same set of recently published papers. Energy concepts were used to identify and explain the results as systems designs and hierarchical structures self organized for maximum empower. To clarify the discussion, each explanation includes an energy systems diagram of the main parts and processes related in the paper, required by the theory, including connections with the controls from the surrounding system—the next larger scale. Whereas most of the papers explain mechanisms and relationships of parts, energy systems diagramming and synthesis shows how these designs are adaptations to increase function on several scales. Human understanding of phenomena is aided by simplified overview models that include the phenomena of special interest and their empower interactions on smaller and larger scales.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380002002326","DOI":"10.1016/S0304-3800(02)00232-6","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Odum","given":"Howard T"}],"issued":{"date-parts":[["2002",12,31]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/PUQN5W5S","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PUQN5W5S","type":"article-journal","title":"Market Approach to Regulating the Energy Revolution: Assurance Bonds, Insurance, and the Certain and Uncertain Risks of Hydraulic Fracturing, A","container-title":"Iowa L. Rev.","page":"1523","volume":"99","source":"Google Scholar","URL":"http://heinonlinebackup.com/hol-cgi-bin/get_pdf.cgi?handle=hein.journals/ilr99&section=46","shortTitle":"Market Approach to Regulating the Energy Revolution","author":[{"family":"Dana","given":"David A."},{"family":"Wiseman","given":"Hannah J."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",2,4]]}}},{"key":"http://zotero.org/users/39885/items/PV8CSV9T","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PV8CSV9T","type":"article-journal","title":"A Maturing of Systems Thinking? Evidence from Three Perspectives","container-title":"Systemic Practice and Action Research","page":"3-36","volume":"17","issue":"1","abstract":"This paper reviews trends in systems theory/thinking from the 1970s to the early 2000s. It proposes a maturation of the field based on certain conceptual and methodological advances that have sought to liberate systems thinking from earlier strictures. An edited dialogue among three prominent systems thinkers from different systems “schools”—Merrelyn Emery, Bob Flood, and Eric Wolstenholme—provides evidence. Similarities and differences are identified, complementarities among the schools are derived and analyzed, and trajectories for future research are indicated.","URL":"http://dx.doi.org/10.1023/B:SPAA.0000013419.99623.f0","DOI":"10.1023/B:SPAA.0000013419.99623.f0","call-number":"0019","shortTitle":"A Maturing of Systems Thinking?","author":[{"family":"Barton","given":"John"},{"family":"Emery","given":"Merrelyn"},{"family":"Flood","given":"RobertLouis"},{"family":"Selsky","given":"John"},{"family":"Wolstenholme","given":"Eric"}],"issued":{"date-parts":[["2004",2,1]]},"accessed":{"date-parts":[["2008",6,3]]}}},{"key":"http://zotero.org/users/39885/items/PW8MEDFP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PW8MEDFP","type":"article-journal","title":"The philosophical discourse of modernity. Twelve lectures","source":"Google Scholar","URL":"http://www.scribd.com/doc/54822245/Habermas-The-Philosophical-Discourse-of-Modernity#scribd","author":[{"family":"Habermas","given":"Jürgen"}],"issued":{"date-parts":[["1987"]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/PWV3D25T","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PWV3D25T","type":"article-journal","title":"Hierarchical Thermodynamic Metrics for Evaluating the Environmental Sustainability of Industrial Processes","container-title":"Environmental Progress","page":"302-314","volume":"23","issue":"4","URL":"http://www.che.eng.ohio-state.edu/~ukidwe/ukidwe_envprog.pdf","call-number":"0007","author":[{"family":"Heui-seok Yi","given":"Jorge L. Hau"}],"issued":{"date-parts":[["2004"]]},"accessed":{"date-parts":[["2008",3,25]]}}},{"key":"http://zotero.org/users/39885/items/PXKJTGPK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PXKJTGPK","type":"paper-conference","title":"Mathematical Formulation of the Maximum Em-Power Principle","publisher":"The Center for Environmental Policy, Department of Environmental Engineering Sciences, University of Florida","publisher-place":"University of Florida","page":"15-34","volume":"2","event":"Proceedings of the Second Biennial Emergy Conference","event-place":"University of Florida","ISBN":"09970732511","call-number":"0004","author":[{"family":"Giannantoni","given":"Corrado"}],"issued":{"date-parts":[["2003"]]}}},{"key":"http://zotero.org/users/39885/items/PZK7RSUC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PZK7RSUC","type":"paper-conference","title":"Scalable and Flexible Web Application Architectures","container-title":"International Conference on Computer Games, Multimedia & Allied Technology (CGAT). Proceedings","publisher":"Global Science and Technology Forum","page":"133","source":"Google Scholar","URL":"http://search.proquest.com/openview/8c714c9402ea35f2b0e88a8f842c78cf/1?pq-origsite=gscholar","author":[{"family":"Lamza","given":"Aleksander"},{"family":"Marzec","given":"Mariusz"},{"family":"Wróbel","given":"Zygmunt"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,25]]}}},{"key":"http://zotero.org/users/39885/items/PZN2P3SI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/PZN2P3SI","type":"article-journal","title":"Self-organization and maximum empower","container-title":"Maximum power: the ideas and applications of HT Odum","page":"311–330","source":"Google Scholar","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1995"]]}}},{"key":"http://zotero.org/users/39885/items/Q2KS4VDR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q2KS4VDR","type":"article-journal","title":"Proposal of a system-based model to simulate river water quality in São Paulo state – Brazil","container-title":"Management of Environmental Quality: An International Journal","page":"614-625","volume":"18","source":"CrossRef","URL":"http://www.emeraldinsight.com/journals.htm?issn=1477-7835&volume=18&issue=6&articleid=1630505&show=pdf","DOI":"10.1108/14777830710826667","ISSN":"1477-7835","author":[{"family":"Scariot","given":"M.R."},{"family":"Romitelli","given":"M.S."},{"family":"Ortega","given":"E."}],"issued":{"date-parts":[["2007"]]},"accessed":{"date-parts":[["2011",9,1]]}}},{"key":"http://zotero.org/users/39885/items/Q2V5BIZW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q2V5BIZW","type":"article-journal","title":"Application of systems engineering and information models to optimize operation of gas export systems","container-title":"Systems Engineering","page":"329-342","volume":"11","issue":"4","source":"Wiley InterScience","abstract":"This paper presents the use of systems engineering in analysis and optimization of gas export system operation. The Norwegian dry gas export system is selected as the subject for the analysis. The gas export system at the Norwegian Continental Shelf is the largest offshore gas transport network in the world, and it consists of many components, such as pipelines, platforms, processing and exit terminals, and many routing possibilities. There are two important factors that a gas export system shall satisfy. First, the system shall secure that the customers receive the gas that they have ordered. Second, the system shall do this in as energy efficient way as possible, i.e., minimize operating costs and environmental emissions. For the operator of gas export systems it is of vital importance that equipments and pipelines in the system are optimally integrated. This will secure flexibility, capability, availability and energy efficiency of the system, and enhance understanding between different system operators. Operational experience shows that there is a substantial need to analyze the integration between the system components and the effects on optimum operation, energy consumption and environmental emissions. The objective of this work is to demonstrate how systems engineering and information models have been applied as tools for analyzing the integration in and overcoming the complexity of gas export systems and system operation, and further for developing models that optimize the energy efficiency of system operation. © 2008 Wiley Periodicals, Inc. Syst Eng","URL":"http://dx.doi.org/10.1002/sys.20103","DOI":"10.1002/sys.20103","call-number":"0001","author":[{"family":"StærkebyeNørstebø","given":"Vibeke"}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2010",3,29]]}}},{"key":"http://zotero.org/users/39885/items/Q2Z3WFRQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q2Z3WFRQ","type":"article-journal","title":"A review of emergy theory, its application and latest developments","container-title":"Renewable and Sustainable Energy Reviews","page":"882-888","volume":"54","source":"ScienceDirect","abstract":"The ability to assess energy, matter and information in equal terms makes the emergy analysis an attractive tool to perform sustainability evaluation of all sorts of systems. In recent years, emergy analysis has been applied to assess emergy performance of buildings, industrial processes, urban areas and countries. Emergy is a relatively new concept so its acceptance within and outside the academic world still faces several challenges and criticism. Over the years, researchers have been working to prove EmA׳s validity: EmA has been combined with other methodologies or techniques scientifically more consolidated – life cycle assessment, ecological footprint, geographical information systems and strategic environmental assessment; emergy researchers also tried to overcome criticism by clarifying emergy algebra specificities and the relationship between emergy and exergy; different approaches were also used to perform uncertainty analysis on EmA. Despite those efforts, EmA is not as scientifically and technically consolidated as emergy researchers wanted it to be. More research should be done to improve EmA as a management tool by taking into account recent improvements made ​​to the methodology and making it usable at a strategic and/or operational level within an organization.","URL":"http://www.sciencedirect.com/science/article/pii/S1364032115011272","DOI":"10.1016/j.rser.2015.10.048","ISSN":"1364-0321","journalAbbreviation":"Renewable and Sustainable Energy Reviews","author":[{"family":"Amaral","given":"Luís P."},{"family":"Martins","given":"Nélson"},{"family":"Gouveia","given":"Joaquim B."}],"issued":{"date-parts":[["2016",2]]},"accessed":{"date-parts":[["2016",1,14]]}}},{"key":"http://zotero.org/users/39885/items/Q3SN4NPG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q3SN4NPG","type":"article-journal","title":"A Semantics for Pictures","container-title":"Canadian Journal of Philosophy","page":"275-298","volume":"21","issue":"3","source":"JSTOR","URL":"http://www.jstor.org/stable/40231748","ISSN":"0045-5091","journalAbbreviation":"Canadian Journal of Philosophy","author":[{"family":"Malinas","given":"Gary"}],"issued":{"date-parts":[["1991"]]},"accessed":{"date-parts":[["2016",3,14]]}}},{"key":"http://zotero.org/users/39885/items/Q4RZV3ZQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q4RZV3ZQ","type":"book","title":"The Energy Evolution: Harnessing Free Energy from Nature","publisher":"Gateway","number-of-pages":"268","source":"Google Books","abstract":"Nature produces energy by slow, cool, implosive means - by a centripeta inward motion, while our presnt culture uses explosive centrifugal (outwards) movement, which is wasteful and many times less powerful and effective. It aslo uses up the Earth's resources and pollutes her ecosystems.  This volume describes different kinds of energy machines which depend on the principle of implosion:   a spring water-producing machine a tornado home energy generator a Klimator which produces mountain-quality air the biotechnical submarine a technique for producing power from ocean deeps","ISBN":"978-1-85860-061-1","shortTitle":"The Energy Evolution","language":"en","author":[{"family":"Schauberger","given":"Viktor"},{"family":"Coats","given":"Callum"}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/Q54MEQZW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q54MEQZW","type":"book","title":"Gottfried Wilhelm Leibniz: the work of the great polymath as a philosopher, mathematician, physicist, engineer","author":[{"family":"Stein","given":"Erwin"},{"family":"Popp","given":"Karl"}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/Q5S9AQDH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q5S9AQDH","type":"article-journal","title":"Identifying the sources of stray methane by using geochemical and isotopic fingerprinting","container-title":"Environmental Geosciences","page":"85–94","volume":"4","issue":"2","source":"Google Scholar","URL":"http://archives.datapages.com/data/deg/1997/004002/85_deg040085.htm","author":[{"family":"Baldassare","given":"F. J."},{"family":"Laughrey","given":"C. D."}],"issued":{"date-parts":[["1997"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/Q7CMZ9AQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q7CMZ9AQ","type":"book","title":"First things first : to live, to love, to learn, to leave a legacy","publisher":"Simon & Schuster","publisher-place":"New York","edition":"1st Fireside ed.","event-place":"New York","ISBN":"978-0-684-80203-9","author":[{"family":"Covey","given":"Stephen"}],"issued":{"date-parts":[["1995"]]}}},{"key":"http://zotero.org/users/39885/items/Q7PRHNKI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q7PRHNKI","type":"entry-encyclopedia","title":"Production–possibility frontier","container-title":"Wikipedia, the free encyclopedia","source":"Wikipedia","abstract":"In economics, a production–possibility frontier (PPF), sometimes called a production–possibility curve, production-possibility boundary or product transformation curve, is a graph representing production tradeoffs of an economy given fixed resources. It is a graphical representation of the maximal mix of outputs that an economy can achieve using its existing resources to full extent and in the most efficient way.\nIn its microeconomic applications the graph shows the various combinations of amounts of two commodities that an economy can produce per unit of time (such as number of guns vs. kilograms of butter) using a fixed amount of each of the factors of production, given the production technologies available. At the macroeconomic level it can be used to depict other rivalrous trade-offs like production of fixed capital versus production of consumer goods. Graphically bounding the production set for fixed input quantities, the PPF curve shows the maximum possible production level of one commodity for any given production level of the other, given the existing state of technology.\nBy doing so, it defines productive efficiency in the context of that production set: a point on the frontier indicates efficient use of the available inputs, while a point beneath the curve indicates inefficiency. The commodities compared can either be goods or services. The combination represented by the point on the PPF where an efficient economy operates shows the priorities or choices of the economy, such as the choice of producing more capital goods and fewer consumer goods or vice versa.\nPPFs are normally drawn as bulging upwards (\"concave\") from the origin, but they can be represented as bulging downward or linear (straight), depending on a number of factors. A PPF illustrates a number of economic concepts, such as scarcity of resources (the fundamental economic problem that all societies face), opportunity cost (or marginal rate of transformation), productive efficiency, allocative efficiency, and economies of scale.\nAn outward shift of the PPF results from growth of the availability of inputs such as physical capital or labour or technological progress in knowledge of how to transform inputs into outputs. Such a shift reflects economic growth of an economy already operating at its full productivity (on the PPF), which means that more of both outputs can be produced during the specified period of time without sacrificing the output of either good. Conversely, the PPF will shift inward if the labor force shrinks, the supply of raw materials is depleted, or a natural disaster decreases the stock of physical capital.\nHowever, most economic contractions reflect not that less can be produced but that the economy has started operating below the frontier: typically both labor and physical capital are underemployed.","URL":"https://en.wikipedia.org/w/index.php?title=Production%E2%80%93possibility_frontier&oldid=707720419","note":"Page Version ID: 707720419","language":"en","issued":{"date-parts":[["2016",3,1]]},"accessed":{"date-parts":[["2016",3,8]]}}},{"key":"http://zotero.org/users/39885/items/Q82MCBSB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q82MCBSB","type":"article-journal","title":"Dynamic emergy accounting of water and carbon ecosystem services: A model to simulate the impacts of land-use change","container-title":"Ecological Modelling","collection-title":"Environmental Accounting: Emergy, Systems Ecology and Ecological Modelling","page":"113-131","volume":"271","source":"ScienceDirect","abstract":"Expansion of agriculture over ecosystem areas is widely recognized as one of the most significant human alterations to the global environment over the last century. Although food and fiber production are essential ecosystem services (ES) to humankind, the clearing of forests for agricultural use is associated with changes in land cover which affect a wide range of ES at local, regional and global scales. Considering the importance of climate change, freshwater scarcity, soil erosion and other environmental issues, this paper aims to simulate the impact of land-use change on the ecosystem services related to water and carbon biogeochemical processes. The system under study is the Taquarizinho river basin, located in the eastern region of Mato Grosso do Sul State, Brazil, inserted in the upland borders of one of the largest wetland systems of the world, the Pantanal. Formerly occupied by Brazilian savannah (Cerrado), more than half of Taquarizinho watershed was converted both to agriculture and pasture lands since the 1960s. In order to quantify the impact of land-use change on ES provided by Taquarizinho over the years, this paper introduces the hydro-carbon model, which dynamically represents ecosystem services related to water and carbon cycles, such as canal discharge, groundwater recharge, evapotranspiration, biomass carbon sequestration, litter carbon sequestration, and soil carbon sequestration. The hydro-carbon model uses emergy for estimating the monetary value of ecosystem services provided by the river basin under different land-use scenarios. In this paper, extreme scenarios represent typical land-use types in Taquarizinho basin: native savanna (NS), agroforestry systems (AF), conventional tillage agriculture (CT), no-tillage multiple cropping agriculture (NT), degraded pastures (DP), and pastures under improved management (IP). Results in this paper reveal a hierarchy related to water and carbon ES provision, in descending order: native savanna (247 EM$ ha−1 y−1), agroforestry system (204 EM$ ha−1 y−1), pastures under improved management (180 EM$ ha−1 y−1), no-tillage multiple cropping agriculture (160 EM$ ha−1 y−1), degraded pastures (104 EM$ ha−1 y−1) and conventional tillage agriculture (75 EM$ ha−1 y−1).","URL":"http://www.sciencedirect.com/science/article/pii/S0304380013001555","DOI":"10.1016/j.ecolmodel.2013.03.006","ISSN":"0304-3800","shortTitle":"Dynamic emergy accounting of water and carbon ecosystem services","journalAbbreviation":"Ecological Modelling","author":[{"family":"Watanabe","given":"Marcos D. B."},{"family":"Ortega","given":"Enrique"}],"issued":{"date-parts":[["2014",1,10]]},"accessed":{"date-parts":[["2015",9,20]]}}},{"key":"http://zotero.org/users/39885/items/Q9B5SDEM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q9B5SDEM","type":"book","title":"Systems Ecology: An Introduction to Ecological Modelling","publisher":"Univ of Queensland Pr","ISBN":"0-7022-1813-8","call-number":"0024","shortTitle":"Systems Ecology","author":[{"family":"Kitching","given":"R. L."}],"issued":{"date-parts":[["1984",4]]}}},{"key":"http://zotero.org/users/39885/items/Q9SHKIZG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Q9SHKIZG","type":"chapter","title":"Howard Odum","container-title":"Systems Thinkers","publisher":"Springer London","page":"87-95","source":"link.springer.com.ezproxy.library.uq.edu.au","abstract":"This is a tale of two brothers, Howard and Eugene Odum, and how they introduced ideas from general systems theory and cybernetics into the field of ecology, in the process coming to dominate ecology as an academic discipline for decades. While both drew on systems ideas, our focus is on the younger brother, Howard, as it was he who more explicitly brought these ideas into ecology and was more closely aligned with systems organisations. The importance of the Odum brothers' contribution has been summed up by a former student of Howard's, who wrote that they “were not only among the first to educate generations of scholars and the public about ecology but also pioneers in uniting the human and social aspects of environmental issues with their ecological and natural dimensions” (Gunderson et al. 2002).","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/chapter/10.1007/978-1-84882-525-3_10","ISBN":"978-1-84882-524-6","note":"DOI: 10.1007/978-1-84882-525-3_10","language":"en","issued":{"date-parts":[["2009"]]},"accessed":{"date-parts":[["2016",3,8]]}}},{"key":"http://zotero.org/users/39885/items/QBKH6SQQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QBKH6SQQ","type":"article","title":"Modelling And Measuring The Social License To Operate: Fruits Of A Dialogue Between Theory And Practice","publisher":"On Common Ground","URL":"http://socialicense.com/publications/Modelling%20and%20Measuring%20the%20SLO.pdf","author":[{"family":"Boutilier","given":"Robert"},{"family":"Thomson","given":"Ian"}],"issued":{"date-parts":[["2011"]]}}},{"key":"http://zotero.org/users/39885/items/QD3FGPR9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QD3FGPR9","type":"article-journal","title":"Ecological economics of the Swedish Baltic Empire: An essay on energy and power, 1560–1720","container-title":"Ecological Economics","page":"51-72","volume":"5","issue":"1","source":"ScienceDirect","abstract":"Sweden rose from relative obscurity to become the most powerful nation in northern Europe during the period 1560–1720 based on its prosperous metal industry - silver, copper and steel. The following essay addresses this period of history from an energy perspective and suggests, as others have, that the surplus energy of a nation is its basis for power. Sweden's energy came mainly from its forests which supplied its mines with wood and its metal-works with charcoal. This energy system, including hydropower, animal and man power, is analyzed using one of the thousands of charcoal-burners as a model for the main energy input - charcoal. The principles of sustainable use of Swedish forests are also addressed in an historical perspective.","URL":"http://www.sciencedirect.com/science/article/pii/092180099290020S","DOI":"10.1016/0921-8009(92)90020-S","ISSN":"0921-8009","shortTitle":"Ecological economics of the Swedish Baltic Empire","journalAbbreviation":"Ecological Economics","author":[{"family":"Sundberg","given":"Ulf"}],"issued":{"date-parts":[["1992",3]]},"accessed":{"date-parts":[["2015",3,5]]}}},{"key":"http://zotero.org/users/39885/items/QDJRZPQE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QDJRZPQE","type":"article-journal","title":"Photoelectric Ecosystem","container-title":"Science","collection-title":"New Series","page":"256-258","volume":"143","issue":"3603","source":"JSTOR","abstract":"A natural, self-maintaining photoelectric cell, composed of a blue-green algal mat and bacteria as a layered ecosystem, was isolated from a shallow marine bay in Texas near Port Aransas. In daytime the open-circuit potential across the ecological membrane was about 0.43 volt. The efficiency of conversion of light energy to organic potential energy before maintenance was 1.62 percent and to external electrical energy at optimum power loading was 0.016 percent, a flow analogous to a consumer population.","URL":"http://www.jstor.org/stable/1712457","ISSN":"0036-8075","journalAbbreviation":"Science","author":[{"family":"Armstrong","given":"Neal E."},{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1964",1,17]]},"accessed":{"date-parts":[["2015",2,8]]}}},{"key":"http://zotero.org/users/39885/items/QDKXTG27","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QDKXTG27","type":"paper-conference","title":"Challenges of data integration and interoperability in big data","container-title":"2014 IEEE International Conference on Big Data (Big Data)","page":"38-40","source":"IEEE Xplore","event":"2014 IEEE International Conference on Big Data (Big Data)","abstract":"The enormous volumes of data created and maintained by industries, research institutions are on the verge of outgrowing its infrastructure. The advancements in the organization's work flow include data storage, data management, data maintenance, data integration, and data interoperability. Among these levels, data integration and data interoperability can be the two major focus areas for the organizations which tend to implement advancements in their workflow. Overall, data integration and data interoperability influence the organization's performance. The data integration and data interoperability are complex challenges for the organizations deploying big data architectures due to the heterogeneous nature of data used by them. Therefore, it requires a comprehensive approach to negotiate the challenges in integration and interoperability. This paper focuses on the challenges of data integration and data interoperability in big data.","DOI":"10.1109/BigData.2014.7004486","author":[{"family":"Kadadi","given":"A."},{"family":"Agrawal","given":"R."},{"family":"Nyamful","given":"C."},{"family":"Atiq","given":"R."}],"issued":{"date-parts":[["2014",10]]}}},{"key":"http://zotero.org/users/39885/items/QE4BSCB2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QE4BSCB2","type":"article-journal","title":"The Leibniz Revolution in America, 1727-1752","container-title":"Executive Intelligence Review","volume":"31","issue":"32","URL":"http://www.larouchepub.com/eiw/public/2004/eirv31n32-20040813/index.html","ISSN":"0148-0537","author":[{"family":"Valenti","given":"Philip"}],"issued":{"date-parts":[["2004"]]}}},{"key":"http://zotero.org/users/39885/items/QFBUXJDD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QFBUXJDD","type":"article","title":"The problem of Uranium Isotope Separation by Means of Ultracentrifuge in the USSR","publisher":"Central Intelligence Agency.","URL":"http://www.fas.org/irp/cia/product/zippe.pdf","author":[{"family":"CIA","given":""}],"issued":{"date-parts":[["1957",10,8]]}}},{"key":"http://zotero.org/users/39885/items/QG476T8C","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QG476T8C","type":"webpage","title":"Incipient Emergy expresses the self-organization generative activity of man-made ecomimetic systems","URL":"http://www.unicamp.br/fea/ortega/energy/Albertina.pdf","author":[{"family":"J.A. Zuffo","given":"A.Lourenci"}],"issued":{"date-parts":[["2004"]]},"accessed":{"date-parts":[["2008",3,20]]}}},{"key":"http://zotero.org/users/39885/items/QGN3EN7F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QGN3EN7F","type":"book","title":"Business Dynamics","publisher":"McGraw Hill Higher Education","ISBN":"0-07-117989-5","call-number":"2833","author":[{"family":"Sterman","given":"John D."}],"issued":{"date-parts":[["2000",12,1]]}}},{"key":"http://zotero.org/users/39885/items/QH3C9UF3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QH3C9UF3","type":"article","title":"Introduction of the IRGC Risk Governance Framework","publisher":"International Risk Governance Council","URL":"http://www.irgc.org/wp-content/uploads/2015/04/An_introduction_to_the_IRGC_Risk_Governance_Framework_final_v2012.pdf","author":[{"family":"IRGC","given":""}],"issued":{"date-parts":[["2012"]]}}},{"key":"http://zotero.org/users/39885/items/QJVG34KE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QJVG34KE","type":"article-journal","title":"Odum–Tennenbaum–Brown calculus vs emergy and co-emergy analysis","container-title":"Ecological Modelling","page":"9-12","volume":"302","source":"ScienceDirect","abstract":"In a recent paper Tennenbaum introduced a new method of calculating emergy that requires only ordinary (i.e. linear) algebra. We prove on a simple example with one feedback and one split that ordinary algebra as developed by Tennenbaum in his paper is not sufficient to tackle the problem of emergy analysis. In particular, we point out the problem of enumerating pathways which are relevant for emergy analysis, i.e. which avoid the double counting problem of feedbacks. Hence, the emergy co-emergy analysis cannot work at least for energy system diagram with splits and feedbacks. Le Corre and Truffet have already proved that the emergy path-finding problem deals with idempotent (thus non-linear) algebra.","URL":"http://www.sciencedirect.com/science/article/pii/S030438001500040X","DOI":"10.1016/j.ecolmodel.2015.01.021","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Le Corre","given":"O."},{"family":"Truffet","given":"L."},{"family":"Lahlou","given":"C."}],"issued":{"date-parts":[["2015",4,24]]},"accessed":{"date-parts":[["2015",12,2]]}}},{"key":"http://zotero.org/users/39885/items/QK6KS2Z6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QK6KS2Z6","type":"speech","title":"Energy quality and carrying capacity of the earth","publisher-place":"Paris","event":"Prize awarding ceremony of Institute La Vie","event-place":"Paris","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1975"]]}}},{"key":"http://zotero.org/users/39885/items/QKDWE5WD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QKDWE5WD","type":"article-journal","title":"Environmental Regulation of Hydraulic Fracturing in Queensland","container-title":"SPE Production & Operations","source":"CrossRef","URL":"http://www.onepetro.org/doi/10.2118/166146-PA","DOI":"10.2118/166146-PA","ISSN":"1930-1855","language":"en","author":[{"family":"Campin","given":"David"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",8,24]]}}},{"key":"http://zotero.org/users/39885/items/QQMGUSXM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QQMGUSXM","type":"book","title":"Hydraulic Power System Analysis","collection-title":"Fluid Power and Control","publisher":"CRC Press","volume":"16","source":"CrossRef","URL":"http://www.crcnetbase.com/doi/book/10.1201/9781420014587","ISBN":"978-0-8247-9956-4","language":"en","author":[{"family":"Akers","given":"Arthur"},{"family":"Gassman","given":"Max"},{"family":"Smith","given":"Richard"}],"issued":{"date-parts":[["2006",4,17]]},"accessed":{"date-parts":[["2016",3,14]]}}},{"key":"http://zotero.org/users/39885/items/QRVAETKV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QRVAETKV","type":"article-journal","title":"Chaos theory and the evolution of consciousness and mind: A thermodynamic-holographic resolution to the mind-body problem","container-title":"New Ideas in Psychology","page":"107-127","volume":"13","issue":"2","source":"ScienceDirect","abstract":"This address describes Neurological Positivism's (NP) energetic evolution of consciousness, mind, and the brain-mind relationship within a model that integrates ideas and research from chaos theory, Pribram's holonomic brain theory, evolutionary theory, and the laws of thermodynamics (the energy laws The energetic evolution and encapsulation of space-time consciousness from chaotic-holographic environments is described. Consciousness is described as a natural evolutionary space-time template of continuously generated self-referential energy patterns (algorithms). The energetic evolution of mind is described as a natural self-referential exteriorization of the algorithmic organization of consciousness in the form of culturally shared mental models. It is proposed that the brain-mind energy relationship has historically undergone and continues to undergo change, and that this change is a natural thermodynamic arrow that constitutes the evolution of culture. That is, the evolution of culture proceeds in the direction of progressively more complete and efficient exteriorizations of the algorithmic organization of the brain-thus, for example, the recent evolution of brain-like computing systems and virtual reality systems. Accordingly, an uneven, but closing, central-energy-state identity (self-similarity) between brain and mind is described. It is concluded that NP's conception of mind helps us understand the evolutionary unfoldment of culture, and provides a sense of direction as to its future.","URL":"http://www.sciencedirect.com/science/article/pii/0732118X94000477","DOI":"10.1016/0732-118X(94)00047-7","ISSN":"0732-118X","shortTitle":"Chaos theory and the evolution of consciousness and mind","journalAbbreviation":"New Ideas in Psychology","author":[{"family":"Vandervert","given":"Larry R."}],"issued":{"date-parts":[["1995",7]]},"accessed":{"date-parts":[["2016",2,19]]}}},{"key":"http://zotero.org/users/39885/items/QS2UBC8X","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QS2UBC8X","type":"article-journal","title":"Synergy and Trade-off Potentials between Water and Energy Targets in Mine Water Management: an Exergy-Energy Approach","source":"espace.library.uq.edu.au","URL":"https://espace.library.uq.edu.au/view/UQ:327929","shortTitle":"Synergy and Trade-off Potentials between Water and Energy Targets in Mine Water Management","language":"eng","author":[{"family":"Thi Mai Thanh","given":"Nguyen"}],"issued":{"date-parts":[["2014",4,1]]},"accessed":{"date-parts":[["2015",12,14]]}}},{"key":"http://zotero.org/users/39885/items/QSUVSGEU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QSUVSGEU","type":"article","title":"The Australian and New Zealand standard on risk management, AS/NZS 4360: 2004","publisher":"Standards Australia","source":"Google Scholar","URL":"http://csusap.csu.edu.au/~imanock/EMG401/EMG401%20Readings/4360-2004.pdf","shortTitle":"The Australian and New Zealand standard on risk management, AS/NZS 4360","author":[{"family":"Standards Australia","given":""}],"issued":{"date-parts":[["2004"]]}}},{"key":"http://zotero.org/users/39885/items/QTRB2WJQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QTRB2WJQ","type":"article-journal","title":"Energy hierarchy and landscape sustainability","container-title":"Landscape Ecology","page":"1151-1159","volume":"28","issue":"6","source":"link.springer.com","abstract":"The study of ecosystems suggests principles by which energy flows generate hierarchies in all systems. All ecosystems in the landscapes are associated with energy transformation and the convergence of transformed products toward higher hierarchical levels, the recycling of materials to dispersed backgrounds, and feedbacks to reinforce the supporting environment. A hierarchy can be seen as an organized pattern with many small units at one level contributing to fewer units at the next higher level. Due to spatial variability in the natural environment, different types and amounts of energy received on the earth are not homogeneous; this in turn generates a heterogeneous pattern on the landscape. Energy from life-support and production systems of a heterogeneous landscape is transformed and converged spatially toward consumption centers. All energy transformation can be arranged in a series. The concept of transformity is used in this paper to indicate the position of an energy flow in the series. A hierarchical system can help to explain how energy and matter can be produced and recycled through each level of energy transfer. Building on the brief reviews of the concept of hierarchy in the landscape and the theoretical development of the concept of an ecological energetic hierarchy, this paper proposes two principles of energetic hierarchy for landscape sustainability. First, the landscape must be arranged spatially according to its energy hierarchy. Evaluation of normalized energy flows (emergy) can help identify zones of different spatial hierarchies, which will help establish the strategies needed for the landscapes to be sustainable. Second, a sustainable landscape must comprise a hierarchy of self-organizing ecosystems that can enable the systems to maximize useful power at all levels of the energy hierarchy.","URL":"http://link.springer.com/article/10.1007/s10980-012-9706-7","DOI":"10.1007/s10980-012-9706-7","ISSN":"0921-2973, 1572-9761","journalAbbreviation":"Landscape Ecol","language":"en","author":[{"family":"Lee","given":"Ying-Chieh"},{"family":"Yeh","given":"Chia-Tsung"},{"family":"Huang","given":"Shu-Li"}],"issued":{"date-parts":[["2012",1,19]]},"accessed":{"date-parts":[["2015",12,9]]}}},{"key":"http://zotero.org/users/39885/items/QU69NFZZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QU69NFZZ","type":"webpage","title":"International Society for Digital Earth","URL":"http://www.digitalearth-isde.org/","author":[{"literal":"ISDE"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",11,10]]}}},{"key":"http://zotero.org/users/39885/items/QUI97WVS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QUI97WVS","type":"book","title":"The ecological approach to visual perception","publisher":"Lawrence Erlbaum Associates","publisher-place":"Hillsdale  N.J.","event-place":"Hillsdale  N.J.","ISBN":"978-0-89859-958-9","call-number":"0000","author":[{"family":"Gibson","given":"James"}],"issued":{"date-parts":[["1986"]]}}},{"key":"http://zotero.org/users/39885/items/QUTSPVGW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QUTSPVGW","type":"article-journal","title":"Photosynthesis and negative entropy production","container-title":"Biochimica et Biophysica Acta (BBA) - Bioenergetics","page":"251-255","volume":"1709","issue":"3","abstract":"The widely held view that the maximum efficiency of a photosynthetic pigment system is given by the Carnot cycle expression (1 - T/Tr) for energy transfer from a hot bath (radiation at temperature Tr) to a cold bath (pigment system at temperature T) is critically examined and demonstrated to be inaccurate when the entropy changes associated with the microscopic process of photon absorption and photochemistry at the level of single photosystems are considered. This is because entropy losses due to excited state generation and relaxation are extremely small ([Delta]S << T/Tr) and are essentially associated with the absorption-fluorescence Stokes shift. Total entropy changes associated with primary photochemistry for single photosystems are shown to depend critically on the thermodynamic efficiency of the process. This principle is applied to the case of primary photochemistry of the isolated core of higher plant photosystem I and photosystem II, which are demonstrated to have maximal thermodynamic efficiencies of [xi] > 0.98 and [xi] > 0.92 respectively, and which, in principle, function with negative entropy production. It is demonstrated that for the case of [xi] > (1 - T/Tr) entropy production is always negative and only becomes positive when [xi] < (1 - T/Tr).","URL":"http://www.sciencedirect.com/science/article/B6T1S-4GYH6KH-3/2/9c5b839bf47c53fab96df065957fa598","DOI":"10.1016/j.bbabio.2005.08.004","call-number":"0009","author":[{"family":"Jennings","given":"Robert C."},{"family":"Engelmann","given":"Enrico"},{"family":"Garlaschi","given":"Flavio"},{"family":"Casazza","given":"Anna Paola"},{"family":"Zucchelli","given":"Giuseppe"}],"issued":{"date-parts":[["2005",9,30]]},"accessed":{"date-parts":[["2008",3,28]]}}},{"key":"http://zotero.org/users/39885/items/QVQ7QSJQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/QVQ7QSJQ","type":"book","title":"Leibniz's Philosophy of Logic and Language","publisher":"Cambridge University Press","number-of-pages":"264","source":"Google Books","abstract":"This is the second edition of an important introduction to Leibniz's philosophy of logic and language first published in 1972. It takes issue with several traditional interpretations of Leibniz (by Russell amongst others) while revealing how Leibniz's thought is related to issues of great interest in current logical theory. For this new edition, the author has added new chapters on infinitesimals and conditionals as well as taking account of reviews of the first edition.","ISBN":"978-0-521-37781-2","language":"en","author":[{"family":"Ishiguro","given":"Hide"}],"issued":{"date-parts":[["1990"]]}}},{"key":"http://zotero.org/users/39885/items/R3IR38HV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/R3IR38HV","type":"book","title":"The Oxford dictionary of philosophy","publisher":"Oxford University Press","publisher-place":"Oxford ;;New York","event-place":"Oxford ;;New York","ISBN":"978-0-19-283134-7","call-number":"0645","author":[{"family":"Blackburn","given":"Simon"}],"issued":{"date-parts":[["1996"]]}}},{"key":"http://zotero.org/users/39885/items/R4E36BVQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/R4E36BVQ","type":"book","title":"Network Programming with Perl","publisher":"Addison-Wesley Professional","publisher-place":"Boston","number-of-pages":"784","edition":"1 edition","source":"Amazon.com","event-place":"Boston","abstract":"Any developer who's comfortable with Perl can build remarkably powerful TCP/IP network applications -- no C required! In Network Programming with Perl, Lincoln Stein shows how, step-by-step, with extensive code examples. Modeled on W. Richard Stevens' legendary Unix network programming book, this book opens up network programming to a new generation of programmer: Web developers ready to build serious network applications and solve complex network problems. Stein begins with an overview of Perl's increasingly powerful networking facilities; then introduces Berkeley Sockets, and the UDP and TCP protocols at the heart of network programming. He presents Perl's IO:: socket API, which simplifies the creation and use of sockets; demonstrates how to create forking servers; and introduces practical techniques for creating multithreaded and multiplexed applications. Modeled upon the style of Stevens, and using extensive sample code, Stein demonstrates all of the key features. Network Programming with Perl also includes chapter-length explanations of creating Internet modules for FTP and Telnet; Mail and News; and Web services.","ISBN":"978-0-201-61571-5","language":"English","author":[{"family":"Stein","given":"Lincoln D."}],"issued":{"date-parts":[["2001",1,6]]}}},{"key":"http://zotero.org/users/39885/items/R4T5PBBR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/R4T5PBBR","type":"article-journal","title":"Molecular basis of bilirubin-induced neurotoxicity","container-title":"Trends in Molecular Medicine","page":"65-70","volume":"10","issue":"2","abstract":"Unconjugated bilirubin (UCB), at slightly elevated unbound concentrations, is toxic to astrocytes and neurons, damaging mitochondria (causing impaired energy metabolism and apoptosis) and plasma membranes (causing oxidative damage and disrupting transport of neurotransmitters). Accumulation of UCB in the CSF and CNS is limited by its active export, probably mediated by MRP1/Mrp1 present in choroid plexus epithelia, capillary endothelia, astrocytes and neurons. Upregulation of MRP1/Mrp1 protein levels by UCB might represent an important adaptive mechanism that protects the CNS from UCB toxicity. These concepts could explain the varied susceptibility of newborns to bilirubin neurotoxicity and the occurrence of neurological damage at plasma UCB concentrations well below therapeutic guidelines, and are relevant to the increasing prevalence of bilirubin encephalopathy in newborns.","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6W7J-4BCXHGJ-2&_user=10&_rdoc=1&_fmt=&_orig=search&_sort=d&view=c&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=53475fc087bfcaff4f1be2ad4b92d746","DOI":"10.1016/j.molmed.2003.12.003","call-number":"0066","author":[{"family":"Ostrow","given":"J. Donald"},{"family":"Pascolo","given":"Lorella"},{"family":"Brites","given":"Dora"},{"family":"Tiribelli","given":"Claudio"}],"issued":{"date-parts":[["2004",2]]},"accessed":{"date-parts":[["2009",6,10]]}}},{"key":"http://zotero.org/users/39885/items/R4XPTHSK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/R4XPTHSK","type":"webpage","title":"Santos Water Portal","container-title":"Santos Water Portal","URL":"http://www.santoswaterportal.com.au/","author":[{"literal":"Santos"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",11,10]]}}},{"key":"http://zotero.org/users/39885/items/R69AG4KC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/R69AG4KC","type":"book","title":"The myth of ability : nurturing mathematical talent in every child","publisher":"Walker & Co.","publisher-place":"New York","event-place":"New York","ISBN":"978-0-8027-7707-2","call-number":"0001","author":[{"family":"Mighton","given":"John"}],"issued":{"date-parts":[["2004"]]}}},{"key":"http://zotero.org/users/39885/items/R6H87GTU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/R6H87GTU","type":"book","title":"Requirements Engineering","publisher":"Springer Verlag London Limited","edition":"1. Aufl.","source":"UQ Library Search, Summon 2.0","abstract":"Written for those who want to develop their knowledge of requirements engineering process, whether practitioners or students. Using the latest research and driven by practical experience from industry, this book gives useful hints to practitioners on how to write and structure requirements. - Explains the importance of Systems Engineering and the creation of effective solutions to problems - Describes the underlying representations used in system modeling - data flow diagrams, statecharts, object-oriented approaches - Covers a generic multi-layer requirements process - Discusses the key elements of effective requirements management - Includes a chapter written by one of the developers of rich traceability - Introduces an overview of DOORS - a software tool which serves as an enabler of a requirements management processAdditional material and links are available at: http://www.requirementsengineering.info'In recent years we have been finding ourselves with a shortage of engineers with good competence in requirements engineering. Perhaps this is in part because requirements management tool vendors have persuaded management that a glitzy tool will solve their requirements engineering problems. Of course, the tools only make it possible for engineers who understand requirements engineering to do a better job. This book goes a long way towards building a foundational set of skills in requirements engineering, so that today's powerful tools can be used sensibly. Of particular value is a recognition of the place software requirements have within the system context, and of ways for dealing with that sensitive connection. This is an important book. I think its particular value in industry will be to bring the requirements engineers and their internal customers to a practical common understanding of what can and should be achieved.","URL":"http://ebooks.ciando.com/book/index.cfm/bok_id/203617","ISBN":"1-84996-404-1","language":"German","author":[{"family":"Hull","given":"Elizabeth"},{"family":"Dick","given":"Jeremy"},{"family":"Jackson","given":"Ken"}],"issued":{"date-parts":[["2011"]]},"accessed":{"date-parts":[["2015",8,18]]}}},{"key":"http://zotero.org/users/39885/items/R6URHD24","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/R6URHD24","type":"article-journal","title":"Bayesian conditioning of a rainfall-runoff model for predicting flows in ungauged catchments and under land use changes","container-title":"Water Resources Research","volume":"47","issue":"2","source":"Google Scholar","author":[{"family":"Bulygina","given":"Nataliya"},{"family":"McIntyre","given":"Neil"},{"family":"Wheater","given":"Howard"}],"issued":{"date-parts":[["2011"]]}}},{"key":"http://zotero.org/users/39885/items/R7JE2EJD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/R7JE2EJD","type":"article-journal","title":"The Ecosystem, Energy, And Human Values","container-title":"Zygon�","page":"109-133","volume":"12","issue":"2","source":"CrossRef","URL":"http://doi.wiley.com/10.1111/j.1467-9744.1977.tb00302.x","DOI":"10.1111/j.1467-9744.1977.tb00302.x","ISSN":"0591-2385, 1467-9744","language":"en","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1977",6]]},"accessed":{"date-parts":[["2015",10,7]]}}},{"key":"http://zotero.org/users/39885/items/RAZVQW87","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RAZVQW87","type":"article","title":"Water Management","publisher":"Australian Government Department of resource energy and tourism","URL":"http://www.industry.gov.au/resource/Documents/LPSDP/LPSDP-WaterHandbook.pdf","author":[{"family":"Australian Government","given":""}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2015",10,14]]}}},{"key":"http://zotero.org/users/39885/items/RBHTBVRT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RBHTBVRT","type":"book","title":"Biology of Microorganisms","publisher":"Prentice Hall","ISBN":"0-13-571225-4","call-number":"0322","author":[{"family":"Parker","given":"Madigan; Martinko;"}],"issued":{"date-parts":[["1997"]]}}},{"key":"http://zotero.org/users/39885/items/RCMEFUQI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RCMEFUQI","type":"article-journal","title":"The contribution of maps to the challenges of risk communication to the public","container-title":"International Journal of Digital Earth","page":"292-311","volume":"3","issue":"3","source":"Taylor and Francis+NEJM","abstract":"Risk communication is a significant challenge in risk management. It serves different purposes; an important one is to improve the public risk awareness and mitigation. Because of the strong spatio-temporal component of natural hazards, maps can play a decisive role in communicating risk information. The application and design of maps for risk communication especially to the public has not been investigated comprehensively. Specific constraints and challenges of risk communication have not been considered systematically in the map design process so far. This study aims at developing a frame for the application and design of interactive risk and hazard maps for the public which is based on the specific constraints and challenges of risk communication. In a literature review it introduces concepts and methods from social sciences and psychology, which have been assessed as important for communicating risk information. The concepts and methods are adapted to map-mediated risk communication according to the approaches of Activity Theory. Communication objectives and tasks which are essential to improve risk mitigation are identified and geovisualization methods for information presentation are related according to the degree which they are able to serve them. Based on this, some principles for map-based risk communication are established.","URL":"http://dx.doi.org/10.1080/17538941003774668","DOI":"10.1080/17538941003774668","ISSN":"1753-8947","author":[{"family":"Dransch","given":"Doris"},{"family":"Rotzoll","given":"Henry"},{"family":"Poser","given":"Kathrin"}],"issued":{"date-parts":[["2010",9,1]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/RD3A3QIP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RD3A3QIP","type":"article-journal","title":"Embodied energy, foreign trade, and welfare of nations","container-title":"Integration of Economy and Ecology, University of Stockholm Press, Stockholm","source":"Google Scholar","author":[{"family":"Odum","given":"HT"}],"issued":{"date-parts":[["1984"]]}}},{"key":"http://zotero.org/users/39885/items/RDE4C8P5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RDE4C8P5","type":"book","title":"Quantifying sustainable development : the future of tropical economies","publisher":"Academic Press","publisher-place":"San Diego","event-place":"San Diego","ISBN":"978-0-12-318861-8","call-number":"0046","shortTitle":"Quantifying sustainable development","author":[{"family":"Hall","given":"Charles"}],"issued":{"date-parts":[["2000"]]}}},{"key":"http://zotero.org/users/39885/items/RDRDB92E","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RDRDB92E","type":"book","title":"A dictionary of political thought","publisher":"Pan","publisher-place":"London","volume":"2","event-place":"London","ISBN":"978-0-330-28099-0","call-number":"0301","author":[{"family":"Scruton","given":"Roger"}],"issued":{"date-parts":[["1983"]]}}},{"key":"http://zotero.org/users/39885/items/RE2RGGMN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RE2RGGMN","type":"article-journal","title":"Fluorescence stopped-flow study of relaxation processes in the binding of bilirubin to serum albumins","container-title":"Archives of Biochemistry and Biophysics","page":"106-112","volume":"160","issue":"1","abstract":"Bilirubin binding to albumins of different species has been studied with stopped-flow measurements of protein fluorescence quenching and the appearance of bilirubin fluorescence. Binding, itself, as indicated by quenching of protein fluorescence, occurs at an immeasurably fast rate. The visible fluorescence of bilirubin, however, appears more slowly. The development of this fluorescence is a first-order process with a half-time of 50-100 msec, depending on the species of albumin, and may be related to the relaxation of bilirubin to a helical conformation. A slower secondary quenching of protein fluorescence occurs after the initial quenching associated with binding itself. The secondary process reduces the already quenched fluorescence by another 50%, is a first-order reaction, and has a half-time of 300-400 msec. From energy transfer calculations, a 4 � migration of bound bilirubin along the albumin binding crevice toward tryptophans could account for this degree of secondary quenching, but a protein conformational change is not ruled out. Multiple relaxation processes in macromolecular binding may prove to be rather general phenomena.","URL":"http://www.sciencedirect.com/science/article/B6WB5-4KBC36J-F/2/8d6899da2c9db2e6fe0c7d9a7cef915c","DOI":"10.1016/S0003-9861(74)80014-7","call-number":"0071","author":[{"family":"Chen","given":"Raymond F."}],"issued":{"date-parts":[["1974",1]]},"accessed":{"date-parts":[["2008",8,17]]}}},{"key":"http://zotero.org/users/39885/items/REAJGS9H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/REAJGS9H","type":"book","title":"Leibniz: a biography","publisher":"Cambridge Univ Press","source":"Google Scholar","URL":"http://journals.cambridge.org/production/action/cjoGetFulltext?fulltextid=7228136","shortTitle":"Leibniz","author":[{"family":"Aiton","given":"Eric J."},{"family":"Lanas","given":"Cristina Corredor"}],"issued":{"date-parts":[["1985"]]},"accessed":{"date-parts":[["2016",1,30]]}}},{"key":"http://zotero.org/users/39885/items/RET48QBP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RET48QBP","type":"article-journal","title":"Rebuttal of “Economic value of natural coastal wetlands: A critique”","container-title":"Coastal Zone Management Journal","page":"231-237","volume":"5","issue":"3","source":"Taylor and Francis+NEJM","URL":"http://dx.doi.org/10.1080/08920757909361808","DOI":"10.1080/08920757909361808","ISSN":"0090-8339","shortTitle":"Rebuttal of “Economic value of natural coastal wetlands","author":[{"family":"Odum","given":"Eugene P."}],"issued":{"date-parts":[["1979",1,1]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/RFGM9N4U","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RFGM9N4U","type":"article","title":"MMSD+10: Reflecting on a decade of mining and sustainable development","publisher":"International Institute for Environment and Development","URL":"http://pubs.iied.org/pdfs/16041IIED.pdf?","author":[{"family":"Buxton, Abbi","given":""}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",1,11]]}}},{"key":"http://zotero.org/users/39885/items/RFS4UEZE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RFS4UEZE","type":"book","title":"ELECTRONICS: Experimental Techniques","publisher":"McGraw-Hill Book Company, Inc.","call-number":"0021","shortTitle":"ELECTRONICS","author":[{"family":"Elmore","given":"William C. And Sands","suffix":"Matthew"}],"issued":{"date-parts":[["1949"]]}}},{"key":"http://zotero.org/users/39885/items/RM9Q5BXQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RM9Q5BXQ","type":"article-journal","title":"Self-Organization, Transformity, and Information","container-title":"Science","page":"1132-1139","volume":"242","issue":"4882","abstract":"Ecosystems and other self-organizing systems develop system designs and mathematics that reinforce energy use, characteristically with alternate pulsing of production and consumption, increasingly recognized as the new paradigm. Insights from the energetics of ecological food chains suggest the need to redefine work, distinguishing kinds of energy with a new quantity, the transformity (energy of one type required per unit of another). Transformities may be used as an energy-scaling factor for the hierarchies of the universe including information. Solar transformities in the biosphere, expressed as solar emjoules per joule, range from one for solar insolation to trillions for categories of shared information. Resource contributions multiplied by their transformities provide a scientifically based value system for human service, environmental mitigation, foreign trade equity, public policy alternatives, and economic vitality.","URL":"http://www.sciencemag.org/cgi/content/abstract/242/4882/1132","DOI":"10.1126/science.242.4882.1132","call-number":"0417","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1988",11,25]]},"accessed":{"date-parts":[["2008",6,18]]}}},{"key":"http://zotero.org/users/39885/items/RNGRUXJ5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RNGRUXJ5","type":"article-journal","title":"Towards an international legal reference environment","container-title":"Proceedings of ECOS","page":"409–20","volume":"2005","source":"Google Scholar","URL":"http://www.researchgate.net/profile/Alicia_Valero/publication/268304158_TOWARDS_AN_INTERNATIONAL_LEGAL_REFERENCE_ENVIRONMENT/links/54bcd5a90cf253b50e2d674a.pdf","author":[{"family":"Szargut","given":"Jan"},{"family":"Valero","given":"Antonio"},{"family":"Stanek","given":"Wojciech"},{"family":"Valero","given":"Alicia"}],"issued":{"date-parts":[["2005"]]},"accessed":{"date-parts":[["2015",12,17]]}}},{"key":"http://zotero.org/users/39885/items/RP2PCGTQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RP2PCGTQ","type":"article-journal","title":"Threads of time","container-title":"ISRN Thermodynamics","volume":"2012","source":"Google Scholar","URL":"http://downloads.hindawi.com/journals/isrn.thermodynamics/2012/850957.pdf","author":[{"family":"Annila","given":"Arto"},{"family":"Salthe","given":"Stanley"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2016",3,11]]}}},{"key":"http://zotero.org/users/39885/items/RP8RRTM3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RP8RRTM3","type":"article-journal","title":"Assessment of alternative fuels for transportation using a hybrid graph theory and analytic hierarchy process method","container-title":"Fuel","page":"9-16","volume":"154","source":"ScienceDirect","abstract":"The release of large amounts of greenhouse gases due to fossil fuel combustion contributes to global warming causing a serious environmental problem. The transportation technologies based on cleaner and renewable alternative fuels can play a major role in mitigating the green house effect and improving the urban air quality. In the present work, a hybrid multicriteria methodology is developed using graph theory and analytic hierarchy process methods for the performance assessment of conventional and non-conventional transportation fuels on the basis of multiple criteria. The proposed fuel suitability digraph presents a graphical visualization of alternative fuel selection attributes and their interrelations. The fuel preference index obtained from matrix permanent function provides a total objective value for comparison of alternative fuel options. Analytic hierarchy process is employed to assign the relative weights to the fuel selection attributes. Three examples are considered in order to demonstrate the effectiveness and flexibility of the proposed methodology.","URL":"http://www.sciencedirect.com/science/article/pii/S0016236115003580","DOI":"10.1016/j.fuel.2015.03.062","ISSN":"0016-2361","journalAbbreviation":"Fuel","author":[{"family":"Lanjewar","given":"Pramod B."},{"family":"Rao","given":"R. V."},{"family":"Kale","given":"A. V."}],"issued":{"date-parts":[["2015",8,15]]},"accessed":{"date-parts":[["2015",8,29]]}}},{"key":"http://zotero.org/users/39885/items/RPMJUEXF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RPMJUEXF","type":"article-journal","title":"Regulating coal seam gas in Queensland : lessons in an adaptive environmental management approach?","container-title":"Environmental and Planning Law Journal","page":"163-185","volume":"29","issue":"2","source":"eprints.qut.edu.au","abstract":"The current regulatory approach to coal seam gas projects in Queensland is based on the philosophy of adaptive environmental management. This method of “learning by doing” is implemented in Queensland primarily through the imposition of layered monitoring and reporting duties on the coal seam gas operator alongside obligations to compensate and “make good” harm caused. The purpose of this article is to provide a critical review of the Queensland regulatory approach to the approval and minimisation of adverse impacts from coal seam gas activities. Following an overview of the hallmarks of an effective adaptive management approach, this article begins by addressing the mosaic of approval processes and impact assessment regimes that may apply to coal seam gas projects. This includes recent Strategic Cropping Land reforms. This article then turns to consider the preconditions for land access in Queensland and the emerging issues for landholders relating to the negotiation of access and compensation agreements. This article then undertakes a critical review of the environmental duties imposed on coal seam gas operators relating to hydraulic fracturing, well head leaks, groundwater management and the disposal and beneficial use of produced water. Finally, conclusions are drawn regarding the overall effectiveness of the Queensland framework and the lessons that may be drawn from Queensland’s adaptive environmental management approach.","URL":"http://eprints.qut.edu.au/49293/","ISSN":"0813-300X","shortTitle":"Regulating coal seam gas in Queensland","author":[{"family":"Swayne","given":"Nicola"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",1,27]]}}},{"key":"http://zotero.org/users/39885/items/RPR4TGUF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RPR4TGUF","type":"book","title":"The Fabric of the Cosmos","publisher":"Alfred A. Knopf","call-number":"0114","author":[{"family":"Greene","given":"Brian"}],"issued":{"date-parts":[["2004"]]}}},{"key":"http://zotero.org/users/39885/items/RQEGGCPV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RQEGGCPV","type":"book","title":"Conflict in History, Measuring Symmetry, Thermodynamic Modeling and Other Work","publisher":"AuthorHouse","number-of-pages":"158","source":"Google Books","abstract":"This book should revolutionize the study of history, symmetry and economic modeling. History is dominated by one pattern, over different scales; symmetry is based on counting the number of pairs of equal distances; and social-science extends from Josiah Willard Gibbs' thermodynamic models.","ISBN":"978-1-4670-7640-1","language":"en","author":[{"family":"Collins","given":"Dennis Glenn"}],"issued":{"date-parts":[["2011",11,23]]}}},{"key":"http://zotero.org/users/39885/items/RQGKDG7M","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RQGKDG7M","type":"article-journal","title":"On the project of a universal character","container-title":"Mind","page":"49–63","volume":"63","issue":"249","source":"Google Scholar","author":[{"family":"Cohen","given":"J."}],"issued":{"date-parts":[["1954"]]}}},{"key":"http://zotero.org/users/39885/items/RT5GRR4N","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RT5GRR4N","type":"article-journal","title":"Mechanism of bilirubin toxicity on tissue culture cells: Factors that affect toxicity, reversibility by albumin, and comparison with other respiratory poisons and surfactants","container-title":"Biochemical Medicine","page":"1-16","volume":"5","issue":"1","abstract":"Various factors that influence the cytotoxic effects of bilirubin, a known electron-transport poison, on mammalian cells in culture have been studied. The cellular uptake of free bilirubin is rapid, being complete in 10 minutes or less following its addition to a cell suspension. Increasing bilirubin concentration increased cell death; there is a lag phase at all concentrations tested, inversely proportional to the concentration of the bile pigment seen with this effect on viability. Cytotoxicity increased at pH 7.6 and below. Albumin-bound bilirubin was nontoxic to tissue culture cells. Albumin added to bilirubin-treated cells resulted in extraction of significant quantities of the cellular-bound bilirubin. However, even when the albumin was added as rapidly as 1 minute after the bilirubin to cells there was still some loss in cell viability. Uncouplers of oxidative phosphorylation and inhibitors of NADH oxidase activity, unlike bilirubin, neither decreased cell viability nor brought about the loss of soluble proteins from cells. Bilirubin more closely resembled agents such as deoxycholate that affect cell membranes in bringing about the loss of cellular proteins. The suggestion is made that the electron-transport lesion induced by bilirubin may not in itself bring about cell death, but that the primary lethal lesion may be on multiple cell membrane systems, perhaps brought about by some alteration of membrane lipids.","URL":"http://www.sciencedirect.com/science/article/B7G7P-4KK2RRS-2/2/019686a17321e6959a26b8f4189b44b8","DOI":"10.1016/0006-2944(71)90069-X","call-number":"0059","shortTitle":"Mechanism of bilirubin toxicity on tissue culture cells","author":[{"family":"Cowger","given":"Marilyn L."}],"issued":{"date-parts":[["1971",2]]},"accessed":{"date-parts":[["2008",8,17]]}}},{"key":"http://zotero.org/users/39885/items/RT8N9GF3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RT8N9GF3","type":"article","title":"DMP Response to Report: ‘Regulation of Shale, Coal Seam and Tight Gas Activities in Western Australia'","publisher":"Government of Western Australia, Department of Mines and Petroleum","URL":"http://www.dmp.wa.gov.au/documents/DMP_Response_to_Report.pdf","author":[{"family":"DMP","given":""}],"issued":{"date-parts":[["2011"]]},"accessed":{"date-parts":[["2015",12,11]]}}},{"key":"http://zotero.org/users/39885/items/RTK88AHF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RTK88AHF","type":"article-journal","title":"The Shale Oil and Gas Revolution, Hydraulic Fracturing, and Water Contamination: A Regulatory Strategy","container-title":"Columbia Law and Economics Working Paper","issue":"440","source":"Google Scholar","URL":"http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2221025","shortTitle":"The Shale Oil and Gas Revolution, Hydraulic Fracturing, and Water Contamination","author":[{"family":"Merrill","given":"Thomas W."},{"family":"Schizer","given":"David"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",2,4]]}}},{"key":"http://zotero.org/users/39885/items/RTUZV39F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RTUZV39F","type":"webpage","title":"Groundwater Systems Research","container-title":"Institute for Future Environments; Science and Engineering Faculty","genre":"research-project","abstract":"The Groundwater Systems Research (GSR) program provides:a focus for groundwater researchmultidisciplinary expertise and applicationsopportunities f...","URL":"https://www.qut.edu.au/research/research-projects/groundwater-systems-research","author":[{"literal":"QUT"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/RURH7VUV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RURH7VUV","type":"article-journal","title":"An adaptive management framework for connected groundwater-surface water resources in Australia","container-title":"Bureau of Rural Sciences, Canberra","source":"Google Scholar","URL":"http://www.researchgate.net/profile/Baskaran_Sundaram/publication/265158256_An_Adaptive_Management_Framework_for_Connected_Groundwater-Surface_Water_Resources_in_Australia/links/55388abc0cf226723ab6306b.pdf","author":[{"family":"Brodie","given":"Ross"},{"family":"Sundaram","given":"Baskaran"},{"family":"Tottenham","given":"Robyn"},{"family":"Hostetler","given":"Stephen"},{"family":"Ransley","given":"Tim"}],"issued":{"date-parts":[["2007"]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/RVC2GFNP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/RVC2GFNP","type":"article-journal","title":"Measuring the sustainability of policy scenarios: Emergy-based strategic environmental assessment of the Chinese paper industry","container-title":"Ecological Complexity","collection-title":"Eco Summit 2007 Special Issue, Part Two","page":"156-161","volume":"7","issue":"2","source":"ScienceDirect","abstract":"Recent years have seen increasing demand for wider application of strategic environmental assessment (SEA), especially SEA of major policies, as a powerful instrument to safeguard the environment during the rapid industrialization and urbanization in China. Debates on SEA are concentrated on its feasibility and effective implementation in practice. This study applies Emergy analysis within the framework of social–economic–natural complex eco-system theory to overcome the limitations of methods used for assessing regional sustainability so far. This established model is tested in the case of Chinese paper industry to assess the sustainability of 5 policy scenarios. The results show that Emergy-based Indices (EbI) are more effective to measure the sustainability of industry complex ecosystem, thus EbI approach is very useful in SEAs on policy scenarios of a given complex ecosystem.","URL":"http://www.sciencedirect.com/science/article/pii/S1476945X10000231","DOI":"10.1016/j.ecocom.2010.04.004","ISSN":"1476-945X","shortTitle":"Measuring the sustainability of policy scenarios","journalAbbreviation":"Ecological Complexity","author":[{"family":"Ren","given":"Jing-Ming"},{"family":"Zhang","given":"Lei"},{"family":"Wang","given":"Ru-song"}],"issued":{"date-parts":[["2010",6]]},"accessed":{"date-parts":[["2015",12,2]]}}},{"key":"http://zotero.org/users/39885/items/S3DWVZUU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S3DWVZUU","type":"chapter","title":"Marine Ecosystems With Energy Circuit Diagrams","container-title":"Modelling of Marine Systems","collection-title":"Elsevier Oceanography Series","collection-number":"10","publisher":"Elsevier Scientific","page":"127-151","call-number":"0009","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1975"]]}}},{"key":"http://zotero.org/users/39885/items/S3E27ARW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S3E27ARW","type":"book","title":"Electronics demystified","publisher":"McGraw-Hill","publisher-place":"New York","event-place":"New York","ISBN":"978-0-07-143493-5","author":[{"family":"Gibilisco","given":"Stan"}],"issued":{"date-parts":[["2005"]]}}},{"key":"http://zotero.org/users/39885/items/S3XGEDGT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S3XGEDGT","type":"paper-conference","title":"Bettering corporate social responsibility through empowerment and effective engagement practices: an Australian mining perspective","container-title":"Proceedings of the International Association for Business and Society","page":"140–150","volume":"25","source":"Google Scholar","URL":"http://www.pdcnet.org/iabsproc/content/iabsproc_2014_0025_0140_0150","shortTitle":"Bettering corporate social responsibility through empowerment and effective engagement practices","author":[{"family":"Erdiaw-Kwasie","given":"Michael O."},{"family":"Alam","given":"Khorshed"},{"family":"Shahiduzzaman","given":"Md"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/S4JIRXHH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S4JIRXHH","type":"webpage","title":"Full Year Results","genre":"text","abstract":"Origin reports Statutory Loss of $658 million and Underlying Profit of $682 million; \nAustralia Pacific LNG nearing completion","URL":"http://www.originenergy.com.au/about/investors-media/reports-and-results/full-year-results-20150820.html","author":[{"family":"Origin Energy","given":""}],"issued":{"date-parts":[["2015",8,20]]},"accessed":{"date-parts":[["2015",8,24]]}}},{"key":"http://zotero.org/users/39885/items/S4NCU2F5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S4NCU2F5","type":"book","title":"The truth is what works: William James, pragmatism, and the seed of death","publisher":"Rowman & Littlefield Publishers","publisher-place":"Lanham, Md.","number-of-pages":"xv, 189 p.","source":"Hathi Trust","event-place":"Lanham, Md.","URL":"http://catalog.hathitrust.org/Record/004139055","ISBN":"0847692736","shortTitle":"The truth is what works","author":[{"family":"Cormier","given":"Harvey"}],"issued":{"date-parts":[["2001"]]},"accessed":{"date-parts":[["2016",3,8]]}}},{"key":"http://zotero.org/users/39885/items/S54H9GKM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S54H9GKM","type":"chapter","title":"Ecopsychology and Phenomenology: An Introduction","container-title":"Ecopsychology, Phenomenology, and the Environment","publisher":"Springer New York","page":"1-8","source":"link.springer.com.ezproxy.library.uq.edu.au","abstract":"Introduction to the book and to the intersection of ecopsychology and phenomenology. Explores the history of how the two fields have interacted with each other and how an early contra-naturalist penchant within phenomenology was transformed into a fecund opening towards ecological thinking. The chapter highlights the two fields' shared values, sensibilities and axioms and includes a contemporary and inclusive definition of ecopsychology. Introductions for each section and each chapter are provided. Concluding paragraphs speak to how the volume as a whole allows the reader to engage more fully with the climate crisis, thereby laying the groundwork for a different future for ourselves and the planet.","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/chapter/10.1007/978-1-4614-9619-9_1","ISBN":"978-1-4614-9618-2","note":"DOI: 10.1007/978-1-4614-9619-9_1","shortTitle":"Ecopsychology and Phenomenology","language":"en","author":[{"family":"Castrillón","given":"Fernando"}],"editor":[{"family":"Vakoch","given":"Douglas A."},{"family":"Castrillón","given":"Fernando"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2016",2,29]]}}},{"key":"http://zotero.org/users/39885/items/S58MCRRD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S58MCRRD","type":"book","title":"The Human Side of Enterprise, Annotated Edition","publisher":"McGraw-Hill","edition":"1","source":"Amazon.com","ISBN":"0-07-146222-8","author":[{"family":"McGregor","given":"Douglas"}],"issued":{"date-parts":[["2005",12,21]]}}},{"key":"http://zotero.org/users/39885/items/S6526GZ6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S6526GZ6","type":"article-journal","title":"Equilibrium microstates which generate second law violating steady states","container-title":"[[Physical Review]]","page":"1645&ndash;1648","volume":"E 50","call-number":"0215","author":[{"family":"Searles","given":"Denis J. Evans & Debra J."}],"issued":{"date-parts":[["1994"]]}}},{"key":"http://zotero.org/users/39885/items/S972DEUI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S972DEUI","type":"book","title":"Starting out in shares : the ASX way.","publisher":"Wrightbooks","publisher-place":"Milton  Qld.","event-place":"Milton  Qld.","ISBN":"978-0-7314-0198-7","author":[{"family":"Australian Stock Exchange.","given":""}],"issued":{"date-parts":[["2004"]]}}},{"key":"http://zotero.org/users/39885/items/S9F72Z7F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S9F72Z7F","type":"book","title":"Adding Value: A Systematic Guide to Business-Driven Management and Leadership","publisher":"Jossey-Bass Inc Pub","edition":"1st","source":"Amazon.com","ISBN":"1-55542-542-9","call-number":"0030","shortTitle":"Adding Value","author":[{"family":"Egan","given":"Gerard"}],"issued":{"date-parts":[["1993",4]]}}},{"key":"http://zotero.org/users/39885/items/S9N5C3E8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S9N5C3E8","type":"article","title":"NSW Aquifer Iinterference Policy","publisher":"NSW Department of Primary Industries","URL":"http://www.water.nsw.gov.au/__data/assets/pdf_file/0004/549175/nsw_aquifer_interference_policy.pdf","author":[{"family":"NSW","given":""}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",12,11]]}}},{"key":"http://zotero.org/users/39885/items/S9RQ2AJS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/S9RQ2AJS","type":"book","title":"Fluid, electrolyte, and acid-base physiology : a problem-based approach","publisher":"W.B. Saunders","publisher-place":"Philadelphia","edition":"3rd ed.","event-place":"Philadelphia","ISBN":"978-0-7216-7072-0","author":[{"family":"Halperin","given":"M"}],"issued":{"date-parts":[["1999"]]}}},{"key":"http://zotero.org/users/39885/items/SA25Q9H7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SA25Q9H7","type":"article-journal","title":"The Improved Determination of Acceleration in Atwood's Machine","container-title":"American Journal of Physics","page":"917-919","volume":"41","issue":"7","source":"scitation.aip.org","abstract":"Scitation is the online home of leading journals and conference proceedings from AIP Publishing and AIP Member Societies","URL":"http://scitation.aip.org/content/aapt/journal/ajp/41/7/10.1119/1.1987416","DOI":"10.1119/1.1987416","ISSN":"0002-9505, 1943-2909","author":[{"family":"Wang","given":"Charles T. P."}],"issued":{"date-parts":[["1973",7,1]]},"accessed":{"date-parts":[["2015",2,8]]}}},{"key":"http://zotero.org/users/39885/items/SA5CGUT2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SA5CGUT2","type":"webpage","title":"Picturing Knowledge : Historical and Philosophical Problems Concerning the Use of Art in Science","URL":"http://web.a.ebscohost.com.ezproxy.library.uq.edu.au/ehost/ebookviewer/ebook/bmxlYmtfXzQ2ODM4M19fQU41?sid=e98c5759-c0bb-4843-8879-77f6ea2b79ab@sessionmgr4001&vid=0&format=EB&rid=1","accessed":{"date-parts":[["2016",3,13]]}}},{"key":"http://zotero.org/users/39885/items/SABCURI5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SABCURI5","type":"article-journal","title":"The trophic-dynamic aspect of ecology","container-title":"Ecology","page":"399–417","volume":"23","issue":"4","source":"Google Scholar","URL":"http://www.esajournals.org/doi/abs/10.2307/1930126","author":[{"family":"Lindeman","given":"Raymond L."}],"issued":{"date-parts":[["1942"]]},"accessed":{"date-parts":[["2016",2,29]]}}},{"key":"http://zotero.org/users/39885/items/SB5EU5J6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SB5EU5J6","type":"article-journal","title":"Maintaining legitimacy of a contested practice: How the minerals industry understands its ‘social licence to operate’","container-title":"Resources Policy","page":"83–90","volume":"41","source":"Google Scholar","URL":"http://www.sciencedirect.com/science/article/pii/S0301420714000336","shortTitle":"Maintaining legitimacy of a contested practice","author":[{"family":"Parsons","given":"Richard"},{"family":"Lacey","given":"Justine"},{"family":"Moffat","given":"Kieren"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/SB5H3JPQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SB5H3JPQ","type":"article-journal","title":"The eco-price: How environmental emergy equates to currency","container-title":"Ecosystem Services","page":"128–140","volume":"7","source":"Google Scholar","URL":"http://www.sciencedirect.com/science/article/pii/S2212041613000995","shortTitle":"The eco-price","author":[{"family":"Campbell","given":"Elliott T."},{"family":"Tilley","given":"David R."}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/SBBZGN96","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SBBZGN96","type":"book","title":"An introduction to cybernetics","publisher":"Science Editions","call-number":"4835","author":[{"family":"Ashby","given":"William Ross"}],"issued":{"date-parts":[["1963"]]}}},{"key":"http://zotero.org/users/39885/items/SCR9BD3S","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SCR9BD3S","type":"article-journal","title":"The Sankey Diagram in Energy and Material Flow Management","container-title":"Journal of Industrial Ecology","page":"82-94","volume":"12","issue":"1","abstract":"The Sankey diagram is an important aid in identifying inefficiencies and potential for savings when dealing with resources. It was developed over 100�years ago by the Irish engineer Riall Sankey to analyze the thermal efficiency of steam engines and has since been applied to depict the energy and material balances of complex systems. The Sankey diagram is the main tool for visualizing industrial metabolism and hence is widely used in industrial ecology. In the history of the early 20th century, it played a major role when raw materials were scarce and expensive and engineers were making great efforts to improve technical systems. Sankey diagrams can also be used to map value flows in systems at the operational level or along global value chains. The article charts the historical development of the diagrams. After the First World War the diagrams were used to produce thermal balances of production plants for glass and cement and to optimize the energy input. In the 1930s, steel and iron ore played a strategic role in Nazi Germany. Their efficient use was highlighted with Sankey diagrams. Since the 1990s, these diagrams have become common for displaying data in life cycle assessments (LCAs) of products. Sankey diagrams can also be used to map value flows in systems at the operational level or along global value added chains. This article, the first of a pair, charts the historical development. The companion article discusses the methodology and the implicit assumptions of such Sankey diagrams.","URL":"http://dx.doi.org/10.1111/j.1530-9290.2008.00004.x","DOI":"10.1111/j.1530-9290.2008.00004.x","call-number":"0004","author":[{"family":"Schmidt","given":"Mario"}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2008",7,12]]}}},{"key":"http://zotero.org/users/39885/items/SEFS35GU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SEFS35GU","type":"book","title":"Democracy and its critics.","publisher":"Yale University Press","publisher-place":"New Haven","event-place":"New Haven","ISBN":"978-0-300-04938-1","call-number":"3445","author":[{"family":"Dahl","given":"Robert"}],"issued":{"date-parts":[["1989"]]}}},{"key":"http://zotero.org/users/39885/items/SFR3HQSV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SFR3HQSV","type":"article-journal","title":"Modelling of the steel-concrete interface to obtain information on reinforcement bar corrosion","container-title":"Journal of Applied Electrochemistry","page":"429-436","volume":"35","issue":"5","source":"CrossRef","URL":"http://www.springerlink.com/content/l1588m7831x80111/","DOI":"10.1007/s10800-004-8348-0","ISSN":"0021-891X","shortTitle":"Modelling of the steel?","journalAbbreviation":"J Appl Electrochem","author":[{"family":"Feliu","given":"V."},{"family":"Gonzalez","given":"J.A."},{"family":"Feliu","given":"S."}],"issued":{"date-parts":[["2005",5]]},"accessed":{"date-parts":[["2011",7,4]]}}},{"key":"http://zotero.org/users/39885/items/SHF9K2IK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SHF9K2IK","type":"paper-conference","title":"Something old, something new: data warehousing in the digital age","page":"14909","volume":"17","source":"NASA ADS","event":"EGU General Assembly Conference Abstracts","abstract":"The implications of digital transformation for Earth science data managers are significant: big data, internet of things, new sources of third-party observations. This at a time when many are struggling to deal with half a century of legacy data infrastructure since the International Geophysical Year. While data management best practice has evolved over this time, large-scale migration activities are rare, with processes and applications instead built up around a plethora of different technologies and approaches. It is perhaps more important than ever, before embarking on major investments in new technologies, to consider the benefits first of 'catching up' with mature best-practice. Data warehousing, as an architectural formalism, was developed in the 1990s as a response to the growing challenges in corporate environments of assembling, integrating, and quality controlling large amounts of data from multiple sources and for multiple purposes. A layered\narchitecture separates transactional data, integration and staging areas, the warehouse itself, and analytical 'data marts', with optimised ETL (Extract, Transform, Load) processes used to promote data through the layers. The data warehouse, together with associated techniques of 'master data management' and 'business intelligence', provides a classic foundation for 'enterprise information management' (\"an integrative discipline for structuring, describing and governing information assets across organizational and technological boundaries to improve\nefficiency, promote transparency and enable business insight\", Gartner). The Australian Bureau of Meteorology, like most Earth-science agencies, maintains a large amount of observation data in a variety of systems and architectures. These data assets evolve over decades, usually for operational, rather than information management, reasons. Consequently there can be inconsistency in architectures and technologies. We describe our experience with two major data assets: the Australian Water Resource Information System (AWRIS) and the Australian Data Archive for Meteorology (ADAM). These maintain the national archive of hydrological and climate data. We are undertaking a migration of AWRIS from a 'software-centric' system to a 'data-centric' warehouse, with\nsignificant benefits in performance, scalability, and maintainability. As well, the architecture supports the use of conventional BI tools for product development and visualisation. We have also experimented with a warehouse ETL replacement for custom tsunameter ingest code in ADAM, with considerable success. Our experience suggests that there is benefit to be gained through adoption by science agencies of professional IT best practice that is mature in industry but may have been overlooked by scientific information practitioners. In the case of data warehousing, the practice requires a change of perspective from a focus on code development to a focus on data. It will continue to be relevant in the 'digital age' as vendors increasingly support integrated warehousing and 'big data' platforms.","URL":"http://adsabs.harvard.edu/abs/2015EGUGA..1714909M","shortTitle":"Something old, something new","author":[{"family":"Maguire","given":"Rob"},{"family":"Woolf","given":"Andrew"}],"issued":{"date-parts":[["2015",4,1]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/SIH4Q5C3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SIH4Q5C3","type":"book","title":"Tao : the watercourse way","publisher":"Arkana","publisher-place":"London","event-place":"London","ISBN":"978-0-14-019254-4","call-number":"0161","author":[{"family":"Watts","given":"Alan"}],"issued":{"date-parts":[["1992"]]}}},{"key":"http://zotero.org/users/39885/items/SIIFKHCA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SIIFKHCA","type":"article-journal","title":"On the Second-Law inconsistency of Emergy Analysis","container-title":"Energy","page":"3696-3706","volume":"35","issue":"9","source":"ScienceDirect","abstract":"The paper argues against the claim made by Emergy Analysts that emergy is an exergy-based procedure. Both Emergy- and Exergy Analysis employ space- and time integrated energy input/output models to quantitatively assess the resource consumption of physical systems: the issue at stake is whether Emergy is embodied energy or embodied exergy. Although the compatibility of Exergy- and Emergy accounting procedures, the significance of the peculiar Emergy Algebra, and some cost-allocation issues have been studied in detail, a final agreement could not be reached, so that some doubt exists about the degree of compatibility of the two methods. The present paper shows that the definitions and the procedures employed in Emergy Analysis are in fact First Law-based, and that they neglect or misrepresent Second Law issues. This conclusion is reached by carefully reviewing and critically analyzing a series of general and specific procedures contained in the original Odum books and in some of the most representative publications by Emergy analysts.\n\nThe conclusions are that Emergy Analysis is a cumulative energy cost accounting method, and that therefore the claim that “emergy is embodied exergy” is not congruent with the methods adopted by Emergy Analysts in their studies, because the subsumed theory does not contain any consistent feature that allows it to treat fluxes with exergy factors different than unity.\n\nIt is recommended therefore that Emergy Analysis be not used to assess the global resource consumption caused by anthropic activities, because its results are misleading when it comes to estimate the exergy destruction enacted by real industrial transformations. For this kind of analyses, genuinely Second Law-based methods are the only ones to date that lead to a correct assessment of the real exergy resource use “embodied” in a commodity. It must be stressed that the arguments put forth in this paper do not deny the validity of Emergy Analysis per se: they simply disprove the claim that Emergy is a “Second Law-based method”.","URL":"http://www.sciencedirect.com/science/article/pii/S0360544210002781","DOI":"10.1016/j.energy.2010.05.015","ISSN":"0360-5442","journalAbbreviation":"Energy","author":[{"family":"Sciubba","given":"Enrico"}],"issued":{"date-parts":[["2010",9]]},"accessed":{"date-parts":[["2016",1,14]]}}},{"key":"http://zotero.org/users/39885/items/SIWJ48Q9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SIWJ48Q9","type":"chapter","title":"Lecture II: What pragmatism means","container-title":"Pragmatism: A new name for some old ways of thinking","publisher":"Longmans, Green and Co","publisher-place":"New York, NY, US","page":"43-81","source":"APA PsycNET","event-place":"New York, NY, US","abstract":"The meaning of pragmatism is discussed. The pragmatic method is primarily a method of settling metaphysical disputes that otherwise might be interminable. This method tries to interpret such notions as determinism versus freedom and materialism versus spiritualism by tracing their practical consequences. What difference would it practically make to any one if this notion rather than that notion were true? If no practical difference whatever can be traced, then the alternatives mean practically the same thing, and all dispute is idle. The history of the method and its character and affinities are discussed, as well as how it contrasts with rationalism and intellectualism. The word pragmatism has come to be used in a wider sense, as meaning also a certain theory of truth. In this sense, pragmatism is equivalent to humanism, which views truth as giving human satisfaction in marrying previous parts of experience with newer parts. As a mediator between empiricism and rationalism, pragmatism has no prejudices, no obstructive dogmas, and no rigid canons of what shall count as proof. Rationalism sticks to logic and the empyrean. Empiricism sticks to the external senses. Pragmatism is willing to take anything, to follow either logic or the senses and to count the humblest and most personal experiences. Its only test of probable truth is what fits every part of life best and combines with the collectivity of experience's demands, nothing being omitted.","shortTitle":"Lecture II","author":[{"family":"James","given":"William"}],"issued":{"date-parts":[["1907"]]}}},{"key":"http://zotero.org/users/39885/items/SMPI2675","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SMPI2675","type":"article-journal","title":"The Cybernetic Nature of Ecosystems","container-title":"The American Naturalist","page":"886-895","volume":"118","issue":"6","URL":"http://www.jstor.org/stable/2460822","ISSN":"00030147","call-number":"0098","note":"ArticleType: primary_article / Full publication date: Dec., 1981 / Copyright © 1981 The University of Chicago Press","author":[{"family":"Patten","given":"Bernard C."},{"family":"Odum","given":"Eugene P."}],"issued":{"date-parts":[["1981",12]]},"accessed":{"date-parts":[["2008",6,3]]}}},{"key":"http://zotero.org/users/39885/items/SPJSH7ZG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SPJSH7ZG","type":"article-journal","title":"Social License and Environmental Protection: Why Businesses Go beyond Compliance","container-title":"Law & Social Inquiry","page":"307-341","volume":"29","issue":"2","source":"JSTOR","abstract":"This article examines the concept of the corporate \"social license,\" which governs the extent to which a corporation is constrained to meet societal expectations and avoid activities that societies (or influential elements within them) deem unacceptable, whether or not those expectations are embodied in law. It examines the social license empirically, as it relates to one social problem-environmental protection-and as it relates to one particular industry: pulp and paper manufacturing. It shows why the social license is important, the circumstances in which it may encourage companies to go \"beyond compliance\" with regulation, how its terms are monitored and enforced, and how it interacts with what we term the regulatory and economic licenses. Overall, this research demonstrates that corporate environmental behavior cannot be explained purely in terms of instrumental threats and moral obligations to comply with the law, and that the increasing incidence of \"beyond compliance\" corporate behavior can be better explained in terms of the interplay between social pressures and economic constraints.","URL":"http://www.jstor.org/stable/4092687","ISSN":"0897-6546","shortTitle":"Social License and Environmental Protection","journalAbbreviation":"Law & Social Inquiry","author":[{"family":"Gunningham","given":"Neil"},{"family":"Kagan","given":"Robert A."},{"family":"Thornton","given":"Dorothy"}],"issued":{"date-parts":[["2004",4,1]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/SPV6UEZ9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SPV6UEZ9","type":"article-journal","title":"Economic value of natural Coastal wetlands: A critique","container-title":"Coastal Zone Management Journal","page":"231-247","volume":"4","issue":"3","source":"Taylor and Francis+NEJM","abstract":"Recent estimates by J. Gosselink, E. Odum, and R. Pope of the economic value of natural wetlands have had considerable impact on analyses and discussions of public policies concerning natural wetlands management. However, these economic value estimates are neither conceptually nor empirically correct. First, these workers failed to recognize the nature of the process by which economic values are determined and made an illegitimate marriage of the principles of systems ecology and economic theory. Second, where Gosselink et al. attempted to apply proper economic principles, their calculations resulted in economic value estimates that are most likely in error.","URL":"http://dx.doi.org/10.1080/08920757809361777","DOI":"10.1080/08920757809361777","ISSN":"0090-8339","shortTitle":"Economic value of natural Coastal wetlands","author":[{"family":"Shabman","given":"Leonard A."},{"family":"Batie","given":"Sandra S."}],"issued":{"date-parts":[["1978",1,1]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/SQEQ5WTF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SQEQ5WTF","type":"webpage","title":"Lee IMH -- Lohm Laws for Liquids – How to Calculate Flow Resistance for Liquids","URL":"http://www.leeimh.com/resources/liquids_lohms-simplified.htm","accessed":{"date-parts":[["2016",3,14]]}}},{"key":"http://zotero.org/users/39885/items/SSBJRKPX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SSBJRKPX","type":"article-journal","title":"Soft System Dynamics Methodology (SSDM): Combining Soft Systems Methodology (SSM) and System Dynamics (SD)","container-title":"Systemic Practice and Action Research","page":"303-334","volume":"18","issue":"3","abstract":"Soft System Dynamics Methodology (SSDM), a systemic methodology product of the combination of two widely used systems-based methodologies from two different systems thinking paradigms, Systems Dynamics (SD) and Soft Systems Methodology (SSM), is presented. The paper argues that by combining some of SD and SSM stages, within the intellectual framework proposed by SSDM, a methodology developed by one of the authors1 much can be gained in a systemic intervention to tackle complex social problematic situations. A framework for comparing the ontological, epistemological and methodological principles of SD, SSM and SSDM is proposed and the synthesizing and dialectical role of SSDM is advanced. The 10 stages of SSDM are outlined and illustrated by an application on a small Peruvian company; and a set of conclusions and points for further research are discussed.","URL":"http://dx.doi.org/10.1007/s11213-005-4816-7","DOI":"10.1007/s11213-005-4816-7","call-number":"0006","shortTitle":"Soft System Dynamics Methodology (SSDM)","author":[{"family":"Rodriguez-Ulloa","given":"Ricardo"},{"family":"Paucar-Caceres","given":"Alberto"}],"issued":{"date-parts":[["2005",6,1]]},"accessed":{"date-parts":[["2008",6,3]]}}},{"key":"http://zotero.org/users/39885/items/SSXHAG3G","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SSXHAG3G","type":"article-journal","title":"A procedure for the selection of objective functions for hydrologic simulation models","container-title":"Journal of Hydrology","page":"129-149","volume":"34","issue":"1–2","source":"ScienceDirect","abstract":"Hydrologic simulation models are calibrated by comparing observed data with data generated by the models. The comparison is made in an optimization procedure using an objective function adopted for that purpose and a set of data which is a subset of all data available or observable. The choise of the set of data and of the objective function to be used for any given model is a subjective decision which influences the values of the model parameters and the performance of the model. The set of data used should be comparable to the engineering application for which the model is intended. The objective function can be chosen by a procedure outlined in the article in which a number of possible functions are considered and compared with reference to one or more engineering applications.","URL":"http://www.sciencedirect.com/science/article/pii/002216947790066X","DOI":"10.1016/0022-1694(77)90066-X","ISSN":"0022-1694","journalAbbreviation":"Journal of Hydrology","author":[{"family":"Diskin","given":"M. H."},{"family":"Simon","given":"E."}],"issued":{"date-parts":[["1977",7]]},"accessed":{"date-parts":[["2015",2,11]]}}},{"key":"http://zotero.org/users/39885/items/STJ3FSKC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/STJ3FSKC","type":"article-journal","title":"Resistance to Ohm's Law","container-title":"American Journal of Physics","page":"536-547","volume":"31","abstract":"It is argued that the usual account of the discovery and subsequent rejection, or criticism, of Ohm's law is both a misleading and an inadequate explanation. A close logical examination of Ohm's experimental work reveals a conceptual structure quite different from that of the electrical science of his time. As a result of this analysis, it is claimed that the conceptual shift in Ohm's experimental work was the basis for the reaction of his contemporaries.","URL":"http://adsabs.harvard.edu/abs/1963AmJPh..31..536S","call-number":"0017","author":[{"family":"Schagrin","given":"Morton L."}],"issued":{"date-parts":[["1963",7,1]]},"accessed":{"date-parts":[["2008",3,28]]}}},{"key":"http://zotero.org/users/39885/items/STJGK8X5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/STJGK8X5","type":"report","title":"Underground Water Impact Report for the Surat Cumulative Management Area","publisher":"State of Queensland Queensland Water Commission","URL":"https://www.dnrm.qld.gov.au/__data/assets/pdf_file/0016/31327/underground-water-impact-report.pdf","author":[{"family":"QWC","given":"Queensland Water Commission"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/SU6KA9PC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SU6KA9PC","type":"article-journal","title":"Improved precision in measurements of acoustic impedance spectra using resonance-free calibration loads and controlled error distribution","container-title":"The Journal of the Acoustical Society of America","page":"1471–1481","volume":"121","issue":"3","source":"Google Scholar","URL":"http://scitation.aip.org/content/asa/journal/jasa/121/3/10.1121/1.2434764","author":[{"family":"Dickens","given":"Paul"},{"family":"Smith","given":"John"},{"family":"Wolfe","given":"Joe"}],"issued":{"date-parts":[["2007"]]},"accessed":{"date-parts":[["2016",3,14]]}}},{"key":"http://zotero.org/users/39885/items/SVMVVTWX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SVMVVTWX","type":"book","title":"Energy analysis overview of nations","publisher":"International Institute for Applied Systems Analysis","call-number":"0040","author":[{"family":"Odum","given":"Howard T"}],"issued":{"date-parts":[["1983"]]}}},{"key":"http://zotero.org/users/39885/items/SVWSVJR8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SVWSVJR8","type":"article","title":"Second Quarter Activities Report","publisher":"Santos","URL":"http://www.santos.com/share-price-performance/company-reporting.aspx","author":[{"family":"Santos","given":""}],"issued":{"date-parts":[["2015"]]}}},{"key":"http://zotero.org/users/39885/items/SWTEPVWP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SWTEPVWP","type":"article-journal","title":"Applying rich picture diagrams to model case studies of construction projects","container-title":"Engineering, Construction and Architectural Management","page":"164-179","volume":"14","issue":"2","source":"CrossRef","URL":"http://www.emeraldinsight.com/journals.htm?articleid=1595418&show=pdf","DOI":"10.1108/09699980710731281","ISSN":"0969-9988","journalAbbreviation":"Engineering, Construction and Architectural Management","author":[{"family":"Sutrisna","given":"Monty"},{"family":"Barrett","given":"Peter"}],"issued":{"date-parts":[["2007"]]},"accessed":{"date-parts":[["2011",7,4]]}}},{"key":"http://zotero.org/users/39885/items/SX55WKC4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SX55WKC4","type":"article-journal","title":"The Transformation of Energy by Daphnia pulex","container-title":"Ecological Monographs","page":"273-291","volume":"28","issue":"3","source":"JSTOR","URL":"http://www.jstor.org/stable/1942243","DOI":"10.2307/1942243","ISSN":"0012-9615","journalAbbreviation":"Ecological Monographs","author":[{"family":"Richman","given":"Sumner"}],"issued":{"date-parts":[["1958"]]},"accessed":{"date-parts":[["2016",3,10]]}}},{"key":"http://zotero.org/users/39885/items/SXBTM9TV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SXBTM9TV","type":"book","title":"Berlin noir","publisher":"Penguin Books","publisher-place":"London ;;New York","event-place":"London ;;New York","ISBN":"978-0-14-023170-0","call-number":"0001","author":[{"family":"Kerr","given":"Philip"}],"issued":{"date-parts":[["1993"]]}}},{"key":"http://zotero.org/users/39885/items/SZ4VJSXA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SZ4VJSXA","type":"article-journal","title":"The Scientific Status of Learning Styles Theories","container-title":"Teaching of Psychology","page":"266-271","volume":"42","issue":"3","source":"top.sagepub.com","abstract":"Theories of learning styles suggest that individuals think and learn best in different ways. These are not differences of ability but rather preferences for processing certain types of information or for processing information in certain types of way. If accurate, learning styles theories could have important implications for instruction because student achievement would be a product of the interaction of instruction and the student’s style. There is reason to think that people view learning styles theories as broadly accurate, but, in fact, scientific support for these theories is lacking. We suggest that educators’ time and energy are better spent on other theories that might aid instruction.","URL":"http://top.sagepub.com/content/42/3/266","DOI":"10.1177/0098628315589505","ISSN":"0098-6283, 1532-8023","journalAbbreviation":"Teaching of Psychology","language":"en","author":[{"family":"Willingham","given":"Daniel T."},{"family":"Hughes","given":"Elizabeth M."},{"family":"Dobolyi","given":"David G."}],"issued":{"date-parts":[["2015",7,1]]},"accessed":{"date-parts":[["2016",3,8]]}}},{"key":"http://zotero.org/users/39885/items/SZURHATH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/SZURHATH","type":"webpage","title":"What Is Risk Governance?","container-title":"IRGC","abstract":"Governance refers to the actions, processes, traditions and institutions by which authority is exercised and decisions are taken and implemented.","URL":"http://www.irgc.org/risk-governance/what-is-risk-governance/","author":[{"family":"IRGC","given":""}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",8,27]]}}},{"key":"http://zotero.org/users/39885/items/T2HNV43E","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T2HNV43E","type":"article-journal","title":"From Tweets to Polls: Linking Text Sentiment to Public Opinion Time Series.","container-title":"ICWSM","page":"1–2","volume":"11","issue":"122-129","source":"Google Scholar","URL":"http://www.aaai.org/ocs/index.php/ICWSM/ICWSM10/paper/viewFile/1536/1842/","shortTitle":"From Tweets to Polls","author":[{"family":"O'Connor","given":"Brendan"},{"family":"Balasubramanyan","given":"Ramnath"},{"family":"Routledge","given":"Bryan R."},{"family":"Smith","given":"Noah A."}],"issued":{"date-parts":[["2010"]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/T2J9MWDX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T2J9MWDX","type":"article-journal","title":"Preventing dehydration during sleep","container-title":"Nature Neuroscience","page":"403","volume":"13","issue":"4","source":"ProQuest","ISSN":"10976256","call-number":"0000","author":[{"family":"Colwell","given":"C."}],"issued":{"date-parts":[["2010",4]]}}},{"key":"http://zotero.org/users/39885/items/T2PX6IK4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T2PX6IK4","type":"book","title":"jQuery in Action 1st (first) edition Text Only","source":"Amazon.com","author":[{"family":"Bibeault","given":"Bear"}],"issued":{"date-parts":[["2008"]]}}},{"key":"http://zotero.org/users/39885/items/T4FTDG2W","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T4FTDG2W","type":"article-journal","title":"Energetics and systems","source":"Google Scholar","author":[{"family":"Mitsch","given":"W. J"},{"family":"Ragade","given":"R. K."},{"family":"Bosserman","given":"R. W."},{"family":"Dillon Jr","given":"J. A."}],"issued":{"date-parts":[["1982"]]}}},{"key":"http://zotero.org/users/39885/items/T4RDEXKJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T4RDEXKJ","type":"article-journal","title":"Bilirubin toxicity in the developing nervous system","container-title":"Pediatric Neurology","page":"410-421","volume":"29","issue":"5","abstract":"Bilirubin toxicity remains a significant problem despite recent advances in the care of jaundiced (hyperbilirubinemic) neonates. A recent surge in reported cases of classical kernicterus, due in part to earlier hospital discharge and relaxation of treatment criteria for hyperbilirubinemia, and new reports of hyperbilirubinemia-induced auditory dysfunction using evoked potential based infant testing and hearing screening, underscore the need to better understand how hyperbilirubinemia causes brain damage in some infants, especially because the damage is preventable. Recent progress in understanding bilirubin binding and neurotoxicity resulting from unbound or \"free\" unconjugated bilirubin, how bilirubin affects the central nervous system in vivo and in vitro, and the use of new clinical tools in neonates, for example magnetic resonance imaging revealing bilateral lesions in globus pallidus and subthalamus, and abnormal brainstem auditory evoked potentials with normal inner ear function, may lead to improved detection and prevention of neurologic dysfunction and damage from bilirubin. Finally, the concern is raised that partial or isolated neurologic sequelae, for example auditory neuropathy and other central auditory processing disorders, may result from excessive amount and duration of exposure to free, unconjugated bilirubin at different stages of neurodevelopment.","URL":"http://www.sciencedirect.com/science/article/B6TBD-4BBG54F-3/2/6740e580247ed2518c398d4818181486","DOI":"10.1016/j.pediatrneurol.2003.09.011","call-number":"0091","author":[{"family":"Shapiro","given":"Steven M."}],"issued":{"date-parts":[["2003",11]]},"accessed":{"date-parts":[["2008",8,17]]}}},{"key":"http://zotero.org/users/39885/items/T5BUU94C","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T5BUU94C","type":"article-journal","title":"Groundwater Protection and Unconventional Gas Extraction: The Critical Need for Field-Based Hydrogeological Research","container-title":"Groundwater","page":"488–510","volume":"51","issue":"4","source":"Google Scholar","URL":"http://onlinelibrary.wiley.com/doi/10.1111/gwat.12074/full","shortTitle":"Groundwater Protection and Unconventional Gas Extraction","author":[{"family":"Jackson","given":"R. E."},{"family":"Gorody","given":"A. W."},{"family":"Mayer","given":"B."},{"family":"Roy","given":"J. W."},{"family":"Ryan","given":"M. C."},{"family":"Van Stempvoort","given":"D. R."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/T5K3BJQA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T5K3BJQA","type":"article-journal","title":"Associations between diet and disease activity in ulcerative colitis patients using a novel method of data analysis","container-title":"Nutrition Journal","page":"7","volume":"4","source":"NCBI PubMed","abstract":"BACKGROUND: The relapsing nature and varying geographical prevalence of ulcerative colitis (UC) implicates environmental factors such as diet in its aetiology.\nMETHODS: In order to determine which foods might be related to disease activity in UC a new method of dietary analysis was developed and applied. Eighty-one UC patients were recruited at all stages of the disease process. Following completion of a 7 d diet diary, clinical assessment including a sigmoidoscopic examination (scale 0 (normal mucosa) to 6 (very active disease)) was conducted. Food weights for each person were adjusted (divided) by the person's calorific intake for the week. Each food consumed was given a food sigmoidoscopy score (FSS) calculated by summing the products of the (adjusted) weight of food consumed and sigmoidoscopy score for each patient and occurrence of food and dividing by the total (adjusted) weight of the food consumed by all 81 patients. Thus, foods eaten in large quantities by patients with very active disease have high FSSs and vice versa. Foods consumed by <10 people or weighing <1 kg for the whole group were excluded, leaving 75 foods.\nRESULTS: High FSS foods were characterized by high levels of the anti-thiamin additive sulfite (Mann-Whitney, p < 0.001), i.e. bitter, white wine, burgers, soft drinks from concentrates, sausages, lager and red wine. Caffeine also has anti-thiamin properties and decaffeinated coffee was associated with a better clinical state than the caffeine containing version. Beneficial foods (average intake per week) included pork (210 g), breakfast cereals (200 g), lettuce (110 g), apples and pears (390 g), milk (1250 ml), melon (350 g), bananas (350 g), bacon (120 g), beef and beef products (500 g), tomatoes (240 g), soup (700 g), citrus fruits (300 g), fish (290 g), yogurt (410 g), cheese (110 g), potatoes (710 g) and legumes (120 g).\nCONCLUSIONS: The dietary analysis method described provides a new tool for establishing relationships between diet and disease and indicates a potentially therapeutic diet for UC.","DOI":"10.1186/1475-2891-4-7","ISSN":"1475-2891","note":"PMID: 15705205 \nPMCID: PMC549081","journalAbbreviation":"Nutr J","language":"eng","author":[{"family":"Magee","given":"Elizabeth A."},{"family":"Edmond","given":"Laurie M."},{"family":"Tasker","given":"Shiona M."},{"family":"Kong","given":"San Choon"},{"family":"Curno","given":"Richard"},{"family":"Cummings","given":"John H."}],"issued":{"date-parts":[["2005"]]},"PMID":"15705205","PMCID":"PMC549081"}},{"key":"http://zotero.org/users/39885/items/T5QKDPK9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T5QKDPK9","type":"article-journal","title":"The influence of anger expression on wound healing","container-title":"Brain, Behavior, and Immunity","collection-title":"Personality and Disease","page":"699-708","volume":"22","issue":"5","source":"ScienceDirect","abstract":"Certain patterns of anger expression have been associated with maladaptive alterations in cortisol secretion, immune functioning, and surgical recovery. We hypothesized that outward and inward anger expression and lack of anger control would be associated with delayed wound healing. A sample of 98 community-dwelling participants received standardized blister wounds on their non-dominant forearm. After blistering, the wounds were monitored daily for 8 days to assess speed of repair. Logistic regression was used to distinguish fast and slow healers based on their anger expression pattern. Individuals exhibiting lower levels of anger control were more likely to be categorized as slow healers. The anger control variable predicted wound repair over and above differences in hostility, negative affectivity, social support, and health behaviors. Furthermore, participants with lower levels of anger control exhibited higher cortisol reactivity during the blistering procedure. This enhanced cortisol secretion was in turn related to longer time to heal. These findings suggest that the ability to regulate the expression of one’s anger has a clinically relevant impact on wound healing.","URL":"http://www.sciencedirect.com/science/article/pii/S0889159107002644","DOI":"10.1016/j.bbi.2007.10.013","ISSN":"0889-1591","journalAbbreviation":"Brain, Behavior, and Immunity","author":[{"family":"Gouin","given":"Jean-Philippe"},{"family":"Kiecolt-Glaser","given":"Janice K."},{"family":"Malarkey","given":"William B."},{"family":"Glaser","given":"Ronald"}],"issued":{"date-parts":[["2008",7]]},"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/T8G284AN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T8G284AN","type":"entry-encyclopedia","title":"Reactive programming","container-title":"Wikipedia, the free encyclopedia","source":"Wikipedia","abstract":"In computing, reactive programming is a programming paradigm oriented around data flows and the propagation of change. This means that it should be possible to express static or dynamic data flows with ease in the programming languages used, and that the underlying execution model will automatically propagate changes through the data flow.\nFor example, in an imperative programming setting,  would mean that  is being assigned the result of  in the instant the expression is evaluated. Later, the values of  and  can be changed with no effect on the value of .\nIn reactive programming, the value of  would be automatically updated based on the new values.\nA modern spreadsheet program is an example of reactive programming. Spreadsheet cells can contain literal values, or formulas such as \"=B1+C1\" that are evaluated based on other cells. Whenever the value of the other cells change, the value of the formula is automatically updated.\nAnother example is a hardware description language such as Verilog. In this case reactive programming allows changes to be modeled as they propagate through a circuit.\nReactive programming has foremost been proposed as a way to simplify the creation of interactive user interfaces, animations in real time systems, but is essentially a general programming paradigm.\nFor example, in a Model-view-controller architecture, reactive programming can allow changes in the underlying model to automatically be reflected in the view, and vice versa.","URL":"https://en.wikipedia.org/w/index.php?title=Reactive_programming&oldid=662405063","note":"Page Version ID: 662405063","language":"en","author":[{"family":"Wikipedia","given":""}],"issued":{"date-parts":[["2015",5,15]]},"accessed":{"date-parts":[["2015",8,21]]}}},{"key":"http://zotero.org/users/39885/items/T95TVW7X","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T95TVW7X","type":"article-journal","title":"Ecological economics began on the Texas bays during the 1950s","container-title":"Ecological modelling","page":"179–181","volume":"178","issue":"1-2","source":"Google Scholar","author":[{"family":"Kangas","given":"P."}],"issued":{"date-parts":[["2004"]]}}},{"key":"http://zotero.org/users/39885/items/T98PTCUI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T98PTCUI","type":"book","title":"Introduction to Electronic Circuits","publisher":"Prentice-Hall","call-number":"0026","author":[{"family":"Jackson","given":"Herbert W"}],"issued":{"date-parts":[["1965"]]}}},{"key":"http://zotero.org/users/39885/items/T994I9C5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T994I9C5","type":"article-journal","title":"A systems map of the universe","page":"107-114","journalAbbreviation":"Journal of Systems Engineering","author":[{"family":"Checkland","given":"Peter"}],"issued":{"date-parts":[["1971"]]}}},{"key":"http://zotero.org/users/39885/items/T9IPQ3EJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/T9IPQ3EJ","type":"article-journal","title":"Sustainable development of water resources: a challenge to science and engineering","container-title":"Water International","page":"84–94","volume":"18","issue":"2","source":"Google Scholar","shortTitle":"Sustainable development of water resources","author":[{"family":"Plate","given":"E. J"}],"issued":{"date-parts":[["1993"]]}}},{"key":"http://zotero.org/users/39885/items/TAM9Z3JG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TAM9Z3JG","type":"article-journal","title":"Ecological risk assessment on the system scale: A review of state-of-the-art models and future perspectives","container-title":"Ecological Modelling","page":"25-33","volume":"250","source":"ScienceDirect","abstract":"This paper reviews state-of-the-art models developed for ecological risk assessment and presents a system-oriented perspective for holistic risk evaluation and management. Ecological risk assessment (ERA), which is aimed at appraising a wide range of undesirable impacts on ecosystems exposed to a possible eco-environmental hazard, has been highly recommended for environmental decision-making. The existing system-based eco-risk models at different levels of hierarchical organization are reviewed, including food web-based models, ecosystem-based models and socio-ecological models are reviewed. Based on this inspection, an integrated framework characterizing problem formulation, risk characterization and risk assessment is depicted to illumine future ecological risk assessments. The possibility of integrating the various ERA modeling systems is addressed through examining the interconnections between models shown within the context of our diagrams. Furthermore, some refinements of the current system-level techniques are proposed to meet the requirements of risk evaluation in a holistic and regulatory context. We conclude that assessing ecological risk by using system-based models at different levels of organization in a combined way is an evolutionary step for the application of risk evaluation in environmental management.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380012005170","DOI":"10.1016/j.ecolmodel.2012.10.015","ISSN":"0304-3800","shortTitle":"Ecological risk assessment on the system scale","journalAbbreviation":"Ecological Modelling","author":[{"family":"Chen","given":"Shaoqing"},{"family":"Chen","given":"Bin"},{"family":"Fath","given":"Brian D."}],"issued":{"date-parts":[["2013",2,10]]},"accessed":{"date-parts":[["2015",12,15]]}}},{"key":"http://zotero.org/users/39885/items/TAPC72HC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TAPC72HC","type":"article-journal","title":"A Framework for Migrating Relational Datasets to NoSQL1","container-title":"Procedia Computer Science","collection-title":"International Conference On Computational Science, ICCS 2015 Computational Science at the Gates of Nature","page":"2593-2602","volume":"51","source":"ScienceDirect","abstract":"In software development, migration from a Data Base Management System (DBMS) to another, especially with distinct characteristics, is a challenge for programmers and database administrators. Changes in the application code in order to comply with new DBMS are usually vast, causing migrations infeasible. In order to tackle this problem, we present NoSQLayer, a framework capable to support conveniently migrating from relational (i.e., MySQL) to NoSQL DBMS (i.e., MongoDB). This framework is presented in two parts: (1) migration module; and, (2) mapping module. The first one is a set of methods enabling seamless migration between DBMSs (i.e. MySQL to MongoDB). The latter provides a persistence layer to process database requests, being capable to translate and execute these requests in any DBMS, returning the data in a suitable format as well. Experiments show NoSQLayer as a handful solution suitable to handle large volume of data (e.g., Web scale) in which traditional relational DBMS might be inept in the duty.","URL":"http://www.sciencedirect.com/science/article/pii/S1877050915011758","DOI":"10.1016/j.procs.2015.05.367","ISSN":"1877-0509","journalAbbreviation":"Procedia Computer Science","author":[{"family":"Rocha","given":"Leonardo"},{"family":"Vale","given":"Fernando"},{"family":"Cirilo","given":"Elder"},{"family":"Barbosa","given":"Dárlinton"},{"family":"Mourão","given":"Fernando"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2015",6,1]]}}},{"key":"http://zotero.org/users/39885/items/TB5HE8W5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TB5HE8W5","type":"article-journal","title":"Supply of carbon sequestration and biodiversity services from Australia's agricultural land under global change","container-title":"Global Environmental Change","page":"166-181","volume":"28","source":"ScienceDirect","abstract":"Global agroecosystems can contribute to both climate change mitigation and biodiversity conservation, and market mechanisms provide a highly prospective means of achieving these outcomes. However, the ability of markets to motivate the supply of carbon sequestration and biodiversity services from agricultural land is uncertain, especially given the future changes in environmental, economic, and social drivers. We quantified the potential supply of these services from the intensive agricultural land of Australia from 2013 to 2050 under four global outlooks in response to a carbon price and biodiversity payment scheme. Each global outlook specified emissions pathways, climate, food demand, energy price, and carbon price modeled using the Global Integrated Assessment Model (GIAM). Using a simplified version of the Land Use Trade-Offs (LUTO) model, economic returns to agriculture, carbon plantings, and environmental plantings were calculated each year. The supply of carbon sequestration and biodiversity services was then quantified given potential land use change under each global outlook, and the sensitivity of the results to key parameters was assessed. We found that carbon supply curves were similar across global outlooks. Sharp increases in carbon sequestration supply occurred at carbon prices exceeding 50 $ tCO2−1 in 2015 and exceeding 65 $ tCO2−1 in 2050. Based on GIAM-modeled carbon prices, little carbon sequestration was expected at 2015 under any global outlook. However, at 2050 expected carbon supply under each outlook differed markedly, ranging from 0 to 189 MtCO2 yr−1. Biodiversity services of 3.32% of the maximum may be achieved in 2050 for a 1 $B investment under median scenario settings. We conclude that a carbon market can motivate supply of substantial carbon sequestration but only modest amounts of biodiversity services from agricultural land. A complementary biodiversity payment can synergistically increase the supply of biodiversity services but will not provide much additional carbon sequestration. The results were sensitive to global drivers, especially the carbon price, and the domestic drivers of adoption hurdle rate and agricultural productivity. The results can inform the design of an effective national policy and institutional portfolio addressing the dual objectives of climate change and biodiversity conservation that is robust to future uncertainty in both national and global drivers.","URL":"http://www.sciencedirect.com/science/article/pii/S0959378014001186","DOI":"10.1016/j.gloenvcha.2014.06.013","ISSN":"0959-3780","journalAbbreviation":"Global Environmental Change","author":[{"family":"Bryan","given":"B. A."},{"family":"Nolan","given":"M."},{"family":"Harwood","given":"T. D."},{"family":"Connor","given":"J. D."},{"family":"Navarro-Garcia","given":"J."},{"family":"King","given":"D."},{"family":"Summers","given":"D. M."},{"family":"Newth","given":"D."},{"family":"Cai","given":"Y."},{"family":"Grigg","given":"N."},{"family":"Harman","given":"I."},{"family":"Crossman","given":"N. D."},{"family":"Grundy","given":"M. J."},{"family":"Finnigan","given":"J. J."},{"family":"Ferrier","given":"S."},{"family":"Williams","given":"K. J."},{"family":"Wilson","given":"K. A."},{"family":"Law","given":"E. A."},{"family":"Hatfield-Dodds","given":"S."}],"issued":{"date-parts":[["2014",9]]},"accessed":{"date-parts":[["2015",8,26]]}}},{"key":"http://zotero.org/users/39885/items/TBF29WWC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TBF29WWC","type":"article-journal","title":"Electrical Conduction Models for the Solution of Water Seepage Problems","container-title":"Journal of Applied Physics","page":"395-401","volume":"6","issue":"12","source":"scitation.aip.org","abstract":"A method is described for the construction of electrical models with which to solve problems of the flow of liquids through porous media under the action of gravity. With these models the shape of the free surface and the extent of the surface of seepage are determined simultaneously with the potential distribution within the flow system. Four examples are given of the application of the method to the problem of the seepage of water through dams. In two cases the faces of the dams were assumed to be sloping, and in the others they were taken as vertical, the free surface and velocity distributions at the faces of one of the latter cases checking closely with those derived from an analytical solution of the problem. The method of applying these models to the study of more complex gravity flow systems is briefly indicated.","URL":"http://scitation.aip.org/content/aip/journal/jap/6/12/10.1063/1.1745283","DOI":"10.1063/1.1745283","ISSN":"0021-8979, 1089-7550","author":[{"family":"Wyckoff","given":"R. D."},{"family":"Reed","given":"D. W."}],"issued":{"date-parts":[["1935",12,1]]},"accessed":{"date-parts":[["2015",2,17]]}}},{"key":"http://zotero.org/users/39885/items/TBNDU5XV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TBNDU5XV","type":"paper-conference","title":"A tutorial program for propositional logic with human/computer interactive learning","container-title":"ACM SIGCSE Bulletin","publisher":"ACM","page":"381–385","volume":"34","source":"Google Scholar","URL":"http://dl.acm.org/citation.cfm?id=563490","author":[{"family":"Lukins","given":"Stacy"},{"family":"Levicki","given":"Alan"},{"family":"Burg","given":"Jennifer"}],"issued":{"date-parts":[["2002"]]},"accessed":{"date-parts":[["2014",6,3]]}}},{"key":"http://zotero.org/users/39885/items/TBS4AMI3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TBS4AMI3","type":"book","title":"Test and analysis of Web services","publisher":"Springer","number-of-pages":"473","source":"Google Books","abstract":"The service-oriented approach has become more and more popular, now allowing highly integrated and yet heterogeneous applications. Web services are the natural evolution of conventional middleware technologies to support Web-based and enterprise-level integration.The highly dynamic characteristics of service-oriented applications means their validation is a continuous process that often runs in parallel with execution. It is not possible to clearly distinguish between the predeployment validation of a system and its use, nor is it possible to guarantee that the checks passed at a certain time will be passed at a later time and in the actual execution environment as well.Baresi and Di Nitto have put together the first reference on all aspects of testing and validating service-oriented architectures, taking into account these inherent intricacies. The contributions by leading academic and industrial research groups are structured into four parts on: static analysis to acquire insight into how the system is supposed to work; testing techniques to sample its actual behavior; monitoring to probe its operational performance; and nonfunctional requirements like reliability and trust.This monograph is an initial source of knowledge for researchers in both academia and industry in the field of service-oriented architecture validation and verification approaches. They will find a comprehensive survey of state-of-the-art approaches as well as techniques and tools to improve the quality of service-oriented applications.","ISBN":"978-3-540-72911-2","language":"en","author":[{"family":"Baresi","given":"Luciano"},{"family":"Nitto","given":"Elisabetta Di"}],"issued":{"date-parts":[["2007"]]}}},{"key":"http://zotero.org/users/39885/items/TCCNS24U","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TCCNS24U","type":"article-journal","title":"The Removal of Lead from Gasoline: Historical and Personal Reflections","container-title":"Environmental Research","page":"20-35","volume":"84","issue":"1","source":"ScienceDirect","abstract":"Tetraethyllead (TEL) was first fabricated for use in gasoline in 1923. Shortly after manufacture began, workers at all three plants began to become floridly psychotic and die. A moratorium on TEL production was put into place, but was lifted in 1926. Between 1926 and 1965, the prevailing consensus was that lead toxicity occurred only at high levels of exposure and that lead in the atmosphere was harmless. Most of the data on lead toxicity issued from a single source, the Kettering Laboratory in Cincinnati. In 1959, the first warnings of adverse health effects of lead at silent doses were raised by Clair Patterson, a geochemist. In hearings before the Senate Committee on Public Works, Senator Edward Muskie raised the question of adverse health effects from airborne lead. As new data accumulated on health effects of lead at lower doses, the movement to remove lead from gasoline gained momentum, and the Environmental Protection Agency examined the question. The removal of lead would take place over the next 25 years, and its accomplishment would require a severe change in the federal stance regarding its hazard. This article details the interaction of various forces, industrial, regulatory, judicial, public health, and public interest, that were engaged in this contest and estimates the value of this step.","URL":"http://www.sciencedirect.com/science/article/pii/S0013935100940696","DOI":"10.1006/enrs.2000.4069","ISSN":"0013-9351","shortTitle":"The Removal of Lead from Gasoline","journalAbbreviation":"Environmental Research","author":[{"family":"Needleman","given":"Herbert L."}],"issued":{"date-parts":[["2000",9]]},"accessed":{"date-parts":[["2015",3,19]]}}},{"key":"http://zotero.org/users/39885/items/TI5TITKP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TI5TITKP","type":"book","title":"Incredible Chord Finder - 6 inch. x 9 inch. Edition: Hal Leonard Guitar Method Supplement","publisher":"Hal Leonard Corporation","source":"Amazon.com","ISBN":"0-88188-140-6","call-number":"0000","shortTitle":"Incredible Chord Finder - 6 inch. x 9 inch. Edition","author":[{"family":"Corp","given":"Hal Leonard"}],"issued":{"date-parts":[["1970",1,1]]}}},{"key":"http://zotero.org/users/39885/items/TJP6Q2NT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TJP6Q2NT","type":"book","title":"Socialism, Utopian and scientific","publisher":"CH Kerr","source":"Google Scholar","author":[{"family":"Engels","given":"Friedrich"}],"issued":{"date-parts":[["1910"]]}}},{"key":"http://zotero.org/users/39885/items/TK8V7TT6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TK8V7TT6","type":"article-journal","title":"Fluorescence reaction of bilirubin with zinc ion in dimethyl sulfoxide and its application to assay of total bilirubin in serum","container-title":"Analytica Chimica Acta","page":"177-182","volume":"365","issue":"1-3","abstract":"A new fluorimetric method is described for the determination of total bilirubin in serum. The fluorescence with maximum excitation and emission at 470 and 545�nm, respectively, is based on the reaction of bilirubin with zinc acetate in dimethyl sulfoxide (DMSO). Serum (10�[mu]l) is added to 2.5�ml of DMSO solution containing zinc acetate (0.01�M) and Tris (0.2�M). After 60�min, at 37�C, the fluorescence is measured. The blank is obtained by mixing serum (10�[mu]l) and Tris-DMSO solution (2.5�ml) without zinc acetate. The method gave a linear calibration for 0.1-5�mg�dl-1 bilirubin, a 3.3[sigma] detection limit of 5�[mu]g�dl-1 and relative standard deviations for bilirubin in control sera of 1-2% (n=10). It is simple, specific and sensitive, and showed good correlation with the usual diazo-coupling method.","URL":"http://www.sciencedirect.com/science/article/B6TF4-3TW48PX-1Y/2/535ef06966e8f0a3e190250056d0cb43","DOI":"10.1016/S0003-2670(97)00666-1","call-number":"0009","author":[{"family":"Kohashi","given":"Kazuya"},{"family":"Date","given":"Yuuko"},{"family":"Morita","given":"Miki"},{"family":"Tsuruta","given":"Yasuto"}],"issued":{"date-parts":[["1998",6,5]]},"accessed":{"date-parts":[["2008",8,16]]}}},{"key":"http://zotero.org/users/39885/items/TKCCZZ64","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TKCCZZ64","type":"book","title":"Simulation-Based Engineering of Complex Systems","publisher":"Wiley-Interscience","number-of-pages":"503","edition":"1","source":"Amazon.com","ISBN":"0-470-40129-X","author":[{"family":"Clymer","given":"John R."}],"issued":{"date-parts":[["2009",3,16]]}}},{"key":"http://zotero.org/users/39885/items/TMKIZRUC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TMKIZRUC","type":"article-newspaper","title":"What we're dying from: the leading causes of death in Australia","container-title":"The Guardian","section":"News","source":"The Guardian","abstract":"As the mortality rate in Australia continues to decline, here we’ve visualised the leading causes of death, for each gender, by age group","URL":"http://www.theguardian.com/news/datablog/2015/oct/20/what-were-dying-from-the-leading-causes-of-death-in-australia","ISSN":"0261-3077","shortTitle":"What we're dying from","language":"en-GB","author":[{"family":"Evershed","given":"Nick"}],"issued":{"date-parts":[["2015",10,20]]},"accessed":{"date-parts":[["2015",10,22]]}}},{"key":"http://zotero.org/users/39885/items/TNWE3E2B","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TNWE3E2B","type":"thesis","title":"Integrating life cycle assessment, energy and emergy analysis","publisher":"The Ohio State University","source":"etd.ohiolink.edu","URL":"https://etd.ohiolink.edu/ap/10?0::NO:10:P10_ACCESSION_NUM:osu1407139681","author":[{"family":"Hau","given":"Jorge Luis"}],"issued":{"date-parts":[["2002"]]},"accessed":{"date-parts":[["2015",12,14]]}}},{"key":"http://zotero.org/users/39885/items/TQBXVW5I","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TQBXVW5I","type":"chapter","title":"Phenomenology","container-title":"The Stanford Encyclopedia of Philosophy","edition":"Winter 2013","source":"Stanford Encyclopedia of Philosophy","abstract":"Phenomenology is the study of structures of consciousness asexperienced from the first-person point of view. The central structureof an experience is its intentionality, its being directed towardsomething, as it is an experience of or about some object. Anexperience is directed toward an object by virtue of its content ormeaning (which represents the object) together with appropriateenabling conditions., Phenomenology as a discipline is distinct from but related to otherkey disciplines in philosophy, such as ontology, epistemology, logic,and ethics. Phenomenology has been practiced in various guises forcenturies, but it came into its own in the early 20th century in theworks of Husserl, Heidegger, Sartre, Merleau-Ponty and others.Phenomenological issues of intentionality, consciousness, qualia, andfirst-person perspective have been prominent in recent philosophy ofmind.","URL":"http://plato.stanford.edu/archives/win2013/entries/phenomenology/","author":[{"family":"Smith","given":"David Woodruff"}],"editor":[{"family":"Zalta","given":"Edward N."}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2016",2,29]]}}},{"key":"http://zotero.org/users/39885/items/TR8T8XXS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TR8T8XXS","type":"book","title":"Gaia: A New Look at Life on Earth","publisher":"Oxford University Press, USA","edition":"Rerpint","ISBN":"0-19-286030-5","call-number":"1985","shortTitle":"Gaia","author":[{"family":"Lovelock","given":"J. E."}],"issued":{"date-parts":[["1987",12,17]]}}},{"key":"http://zotero.org/users/39885/items/TRCQ43IQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TRCQ43IQ","type":"book","title":"Ecological Engineering Design: Restoring and Conserving Ecosystem Services","publisher":"John Wiley and Sons","number-of-pages":"354","source":"Google Books","abstract":"\"Ecologically-sensitive building and landscape design is a broad, intrinsically interdisciplinary field. Existing books independently cover narrow aspects of ecological design in depth (hydrology, ecosystems, soils, flora and fauna, etc.), but none of these books can boast of the integrated approach taken by this one. Drawing on the experience of the authors, this book begins to define explicit design methods for integrating consideration of ecosystem processes and services into every facet of land use design, management, and policy. The approach is to provide a prescriptive approach to ecosystem design based upon ecological engineering principles and practices. This book will include a novel collection of design methods for the non-built and built environments, linking landscape design explicitly to ecosystem services\"--","ISBN":"978-0-470-34514-6","shortTitle":"Ecological Engineering Design","language":"en","author":[{"family":"Matlock","given":"Marty D."},{"family":"Morgan","given":"Robert"}],"issued":{"date-parts":[["2011",3,29]]}}},{"key":"http://zotero.org/users/39885/items/TRK8NH3T","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TRK8NH3T","type":"book","title":"The Philosophy of law","publisher":"Oxford University Press","publisher-place":"London ;;New York","event-place":"London ;;New York","ISBN":"978-0-19-875022-2","call-number":"0235","author":[{"family":"Dworkin","given":"Ronald"}],"issued":{"date-parts":[["1977"]]}}},{"key":"http://zotero.org/users/39885/items/TSDN77W2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TSDN77W2","type":"article-journal","title":"Emergy-based indices and ratios to evaluate sustainability: monitoring economies and technology toward environmentally sound innovation","container-title":"Ecological Engineering","page":"51-69","volume":"9","issue":"1-2","abstract":"This paper provides a reference set of indices based on emergy, for the evaluation of ecotechnological processes and whole economies. Indices of emergy yield ratio (EYR), environmental loading ratio (ELR), and emergy investment ratio (EIR), among others, are stressed, and a new index the emergy sustainability index (ESI) is defined. The emergy indices for a given system are shown to be functions of renewable, nonrenewable and purchased emergy inflows. Indices are given for several ecological engineering activities including oil spill restoration, land reclamation and wastewater recycle through wetlands, several production systems, and several national economies to demonstrate their usefulness. Ecological engineering involves both natural and engineered systems and the flows of renewable and nonrenewable energy, the appropriate amounts of which are important to determine if they are to result in sustainable use of resources. The sustainability index can be used to evaluate appropriate nonrenewable investments in eco-technology to maximize their performance. Sustainability of economies is shown to be a function of the net yield of the economy and its ‘load' on the environment. The trends of these indices can be monitored over time and provide useful information about the dynamics of economic systems within the carrying capacity of the environment in which they develop. When a particular sector or production process is focused on, instead of a national economy, emergy based indices can provide insights into the thermodynamic efficiency of the process, the quality of its output, and the interaction between the process and its surrounding environment.","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6VFB-3SWMM6C-4&_user=10&_origUdi=B6VFX-45B5NKW-4&_fmt=high&_coverDate=09%2F30%2F1997&_rdoc=1&_orig=article&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=9b1e9d4a6642736a90f203f4863dc16c","DOI":"10.1016/S0925-8574(97)00033-5","call-number":"0135","shortTitle":"Emergy-based indices and ratios to evaluate sustainability","author":[{"family":"Brown","given":"M. T."},{"family":"Ulgiati","given":"S."}],"issued":{"date-parts":[["1997",9]]},"accessed":{"date-parts":[["2008",3,21]]}}},{"key":"http://zotero.org/users/39885/items/TSQZU5WA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TSQZU5WA","type":"article-journal","title":"Emergy and co-emergy","container-title":"Ecological Modelling","source":"ScienceDirect","abstract":"We introduce a method of calculating emergy that requires only ordinary algebra without any reliance on special rules to account for co-production. This is accomplished by using an intermediate computation “co-emergy”, and treating co-production as a problem of scale. In addition, we compare emergy calculations using inputs to the system with emergy calculations using what was used up in the system. It is shown that this can lead to slightly different results. We show how these methods can be used to compute emergy in systems at steady state, with imports and exports and with changes in stocks. These techniques allow direct comparison of competitive species, industries, or technologies using standard methods of linear algebra. It also enables us to include the efficiencies of various processes explicitly, which can help in the formulation and testing of conjectures about the relationships between emergy and local and system-wide efficiencies.","URL":"http://www.sciencedirect.com/science/article/pii/S030438001400427X","DOI":"10.1016/j.ecolmodel.2014.09.012","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Tennenbaum","given":"Stephen E."}],"accessed":{"date-parts":[["2015",1,23]]}}},{"key":"http://zotero.org/users/39885/items/TT3JVF6M","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TT3JVF6M","type":"article-journal","title":"Passive hepatic congestion in heart failure: CT abnormalities","container-title":"Am. J. Roentgenol.","page":"939-942","volume":"151","issue":"5","abstract":"Using bolus-enhanced CT, we encountered an unusual constellation of findings in seven patients with clinical evidence of right heart failure. These included retrograde hepatic venous opacification on the early bolus scans and a diffusely mottled pattern of hepatic enhancement seen only during the vascular phase of contrast administration. Ancillary CT findings include cardiomegaly, pleural effusions, ascites, and intrahepatic perivascular radiolucency. We believe that these CT abnormalities are caused by passive hepatic congestion. This pattern of abnormal hepatic enhancement represents a potential pitfall in the use of dynamic bolus-enhanced CT for the detection of focal hepatic masses. Recognition of passive hepatic congestion as a possible cause of mottled hepatic enhancement on CT may help explain clinical abnormalities of liver function in patients with heart failure and prevent confusion with other disease processes that produce abnormalities of hepatic attenuation.","URL":"http://www.ajronline.org/cgi/content/abstract/151/5/939","call-number":"0017","shortTitle":"Passive hepatic congestion in heart failure","author":[{"family":"Moulton","given":"JS"},{"family":"Miller","given":"BL"},{"family":"Dodd","given":"GD"},{"family":"Vu","given":"DN"}],"issued":{"date-parts":[["1988",11,1]]},"accessed":{"date-parts":[["2008",7,30]]}}},{"key":"http://zotero.org/users/39885/items/TTD7TVB2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TTD7TVB2","type":"book","title":"Order Out of Chaos","publisher":"Bantam","ISBN":"0-553-34363-7","call-number":"2358","author":[{"family":"Prigogine","given":"Ilya"}],"issued":{"date-parts":[["1984",3,1]]}}},{"key":"http://zotero.org/users/39885/items/TUPHB2VB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TUPHB2VB","type":"chapter","title":"Energy Systems and the Unification of Science","container-title":"Maximum Power: The ideas and applications of H.T.Odum","publisher":"Colorado University Press","ISBN":"978-0-585-03345-7","call-number":"0003","author":[{"family":"Odum","given":"Howard"}],"issued":{"date-parts":[["1995"]]}}},{"key":"http://zotero.org/users/39885/items/TURWX6T8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TURWX6T8","type":"article-journal","title":"The role of passive electrical analogs in HT Odum’s systems thinking","container-title":"Ecological Modelling","page":"101-106","volume":"178","issue":"1-2","call-number":"0000","author":[{"family":"Kangas","given":"P."}],"issued":{"date-parts":[["2004"]]}}},{"key":"http://zotero.org/users/39885/items/TWR787WN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TWR787WN","type":"article-journal","title":"The first epidemiologic text","container-title":"American Journal of Epidemiology","page":"855–856","volume":"157","issue":"9","source":"Google Scholar","URL":"http://aje.oxfordjournals.org/content/157/9/855.2.short","author":[{"family":"Bracken","given":"Michael B."}],"issued":{"date-parts":[["2003"]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/TXGTF2AC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TXGTF2AC","type":"article-journal","title":"Ordinal benefits vs economic benefits as a reference guide for policy decision making. The case of hydrogen technologies","container-title":"Energy","volume":"In Press, Corrected Proof","source":"ScienceDirect","abstract":"The paper presents an Investment Evaluation Method in Energetic-Economic-Environmental field which is particularly indicated for Hydrogen Technologies because it enables us to account not only for the traditional economic return and the possible negative externalities (damages), but also for: i) the induced economic benefits at a social level; ii) those positive (and negative) externalities usually considered as being estimable in economic terms as \"proxies\"; iii) and, finally, Ordinal Benefits. That is those Benefits which are never ever reducible to a simple monetary value, nonetheless they can always be object of a possible estimation, still in economic terms, by means of values understood as a \"cipher\".\nThe advantages of a Decision Making Process based on Ordinal Benefits (vs traditional economic benefits) will be shown with reference to the evaluation of well-calibrated Incentives concerning Hydrogen Fuel Cells, both under static and dynamic conditions. Such an evaluation criterion, which is preferentially based on the estimated external Benefits to be \"remunerated\" rather than on possible damages to be internalized, represents a valid reference guide for a Policy Maker. This precisely because it is always orientated toward the genesis of the Maximum Ordinality Excess.","URL":"http://www.sciencedirect.com.ezproxy.lib.rmit.edu.au/science/article/B6V2S-4WDNBR5-1/2/2550c75f14da3f4fdc635b393e81738a","DOI":"10.1016/j.energy.2008.12.019","ISSN":"0360-5442","author":[{"family":"Giannantoni","given":"Corrado"}],"accessed":{"date-parts":[["2009",8,29]]}}},{"key":"http://zotero.org/users/39885/items/TZNSZD6V","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TZNSZD6V","type":"article-journal","title":"Conceptualizing the built environment as a social–ecological system","container-title":"Building Research & Information","page":"248","volume":"36","issue":"3","source":"Informaworld","URL":"http://www.informaworld.com/10.1080/09613210801928131","ISSN":"0961-3218","author":[{"family":"Moffatt","given":"Sebastian"},{"family":"Kohler","given":"Niklaus"}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2011",3,19]]}}},{"key":"http://zotero.org/users/39885/items/TZZ38NMW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/TZZ38NMW","type":"article-journal","title":"In memory of Mavericks","container-title":"Conservation Ecology","volume":"6","issue":"2","source":"Scopus","abstract":"Cited By (since 1996): 4","URL":"http://www.scopus.com.ezproxy.lib.rmit.edu.au/inward/record.url?eid=2-s2.0-0037660478&partnerID=40&md5=2771ceaa70b7b61e0797a2c17cb871b0","author":[{"family":"Gunderson","given":"L."},{"family":"Folke","given":"C."},{"family":"Lee","given":"M."},{"family":"Holling","given":"C.S."}],"issued":{"date-parts":[["2002"]]},"accessed":{"date-parts":[["2011",3,19]]}}},{"key":"http://zotero.org/users/39885/items/U2EUAGJB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/U2EUAGJB","type":"book","title":"Leibnizens und Huygens' Briefwechsel mit Papin, nebst der Biographie Papin's und einigen Briefen ...","publisher":"Dr. Martin Sändig oHG","number-of-pages":"423","source":"Internet Archive","abstract":"Book digitized by Google from the library of Oxford University and uploaded to the Internet Archive by user tpb.","URL":"http://archive.org/details/leibnizensundhu00leibgoog","language":"German","author":[{"family":"Ernst Gerland","given":"Christiaan Huygens"}],"issued":{"date-parts":[["1881"]]},"accessed":{"date-parts":[["2016",2,1]]}}},{"key":"http://zotero.org/users/39885/items/U3RSIGBW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/U3RSIGBW","type":"article-journal","title":"Embodied energy analysis and EMERGY analysis: a comparative view","container-title":"Ecological Economics","page":"219-235","volume":"19","issue":"3","source":"ScienceDirect","abstract":"Similarities and differences between energy analysis and EMERGY analysis are discussed and highlighted using the two approaches to analyze the same systems. With particular emphasis on accounting schemes, parallel quantitative analyses of several simple model systems are performed. For the first time in the open literature EMERGY accounting procedures are given in detail. The discussion is presented in alternating sections since the authors still disagree on several fundamental issues.","URL":"http://www.sciencedirect.com/science/article/pii/S0921800996000468","DOI":"10.1016/S0921-8009(96)00046-8","ISSN":"0921-8009","shortTitle":"Embodied energy analysis and EMERGY analysis","journalAbbreviation":"Ecological Economics","author":[{"family":"Brown","given":"M. T"},{"family":"Herendeen","given":"R. A"}],"issued":{"date-parts":[["1996",12]]},"accessed":{"date-parts":[["2015",2,15]]}}},{"key":"http://zotero.org/users/39885/items/U4U6ZXHK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/U4U6ZXHK","type":"article","title":"NASA Systems Engineering Handbook","publisher":"National Aeronautics and Space Administration","source":"NASA/SP-2007-6105","author":[{"family":"NASA","given":""}],"issued":{"date-parts":[["2007"]]}}},{"key":"http://zotero.org/users/39885/items/U6B4TDT5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/U6B4TDT5","type":"book","title":"A survey of physical theory","publisher":"Dover Publications","publisher-place":"New York","event-place":"New York","ISBN":"978-0-486-67867-2","call-number":"0051","author":[{"family":"Planck","given":"Max"}],"issued":{"date-parts":[["1993"]]}}},{"key":"http://zotero.org/users/39885/items/U6TWHSVP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/U6TWHSVP","type":"chapter","title":"An energy circuit language for ecological and social systems: its physical basis","container-title":"Systems Analysis and Simulation in Ecology","page":"139–211","volume":"2","call-number":"0074","shortTitle":"An energy circuit language for ecological and social systems","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1972"]]}}},{"key":"http://zotero.org/users/39885/items/U6UZJV8F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/U6UZJV8F","type":"article-journal","title":"Role of pictograms in online communication","container-title":"DESIGN, INNOVATION, PARTICIPATION","page":"240","source":"Google Scholar","URL":"http://eknihy.knihovna.cz/static/files/design-innovation-participation-bobcatsss-2015-proceedings-abstracts.pdf#page=240","author":[{"family":"Begović","given":"Nikolina"},{"family":"Blažević","given":"Katarina"},{"family":"Jakić","given":"Ivana"}],"issued":{"date-parts":[["2015"]]},"accessed":{"date-parts":[["2016",2,19]]}}},{"key":"http://zotero.org/users/39885/items/U7KX8Z8K","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/U7KX8Z8K","type":"article-journal","title":"Is somatic retrotransposition a parasitic or symbiotic phenomenon?","container-title":"Mobile Genetic Elements","page":"279-282","volume":"1","issue":"4","source":"PubMed","abstract":"The extraordinary evolutionary success of transposable elements (TEs) invites us to question the nature of the co-evolutionary dynamics between TE and host. Although sometimes assumed to be wholly parasitic, TEs have penetrated and spread throughout eukaryotic genomes at a rate unparalleled by other parasites. This near-ubiquity, occurring despite the potentially deleterious effects of insertional mutagenesis, raises the possibility that a counterbalancing benefit exists for the host. Such a benefit may act at the population level to generate genomic diversity within a species and hence greater adaptability under new selective pressures, or at the level of primary gain for the individual. Recent studies have highlighted the occurrence of retrotransposition events in the germline and discovered a surprisingly high rate of mobilization in somatic cells. Here we examine the available evidence for somatic retrotransposition and discuss how this phenomenon may confer a selective advantage upon an individual or species.","DOI":"10.4161/mge.18422","ISSN":"2159-2543","note":"PMID: 22545239\nPMCID: PMC3337137","journalAbbreviation":"Mob Genet Elements","language":"ENG","author":[{"family":"Upton","given":"Kyle R."},{"family":"Baillie","given":"J. Kenneth"},{"family":"Faulkner","given":"Geoffrey J."}],"issued":{"date-parts":[["2011",11,1]]},"PMID":"22545239","PMCID":"PMC3337137"}},{"key":"http://zotero.org/users/39885/items/U7X9FT5X","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/U7X9FT5X","type":"article-journal","title":"Discovering Neural Nets with Low Kolmogorov Complexity and High Generalization Capability","container-title":"Neural Networks","page":"857-873","volume":"10","issue":"5","source":"ScienceDirect","abstract":"Many neural net learning algorithms aim at finding “simple” nets to explain training data. The expectation is that the “simpler” the networks, the better the generalization on test data (→ Occam's razor). Previous implementations, however, use measures for “simplicity” that lack the power, universality and elegance of those based on Kolmogorov complexity and Solomonoff's algorithmic probability. Likewise, most previous approaches (especially those of the “Bayesian” kind) suffer from the problem of choosing appropriate priors. This paper addresses both issues. It first reviews some basic concepts of algorithmic complexity theory relevant to machine learing, and how the Solomonoff-Levin distribution (or universal prior) deals with the prior problem. The universal prior leads to a probabilistic method for finding “algorithmically simple” problem solutions with high generalization capability. The method is based on Levin complexity (a time-bounded generalization of Kolmogorov complexity) and inspired by Levin's optimal universal search algorithm. For a given problem, solution candidates are computed by efficient “self-sizing” programs that influence their own runtime and storage size. The probabilistic search algorithm finds the “good” programs (the ones quickly computing algorithmically probable solutions fitting the training data). Simulations focus on the task of discovering “algorithmically simple” neural networks with low Kolmogorov complexity and high generalization capability. It is demonstrated that the method, at least with certain toy problems where it is computationally feasible, can lead to generalization results unmatchable by previous neural network algorithms. Much remains to be done, however, to make large scale applications and “incremental learning” feasible. © 1997 Elsevier Science Ltd.","URL":"http://www.sciencedirect.com/science/article/pii/S089360809600127X","DOI":"10.1016/S0893-6080(96)00127-X","ISSN":"0893-6080","journalAbbreviation":"Neural Networks","author":[{"family":"Schmidhuber","given":"Jürgen"}],"issued":{"date-parts":[["1997",7]]},"accessed":{"date-parts":[["2016",2,24]]}}},{"key":"http://zotero.org/users/39885/items/U83B2R62","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/U83B2R62","type":"article-journal","title":"Quantitative Risk Assessment on Safety and Reliability of Casing Strength for Oil and Gas Wells","container-title":"Energy Procedia","collection-title":"2012 International Conference on Future Electrical Power and Energy System","page":"429-435","volume":"17, Part A","source":"ScienceDirect","abstract":"A quantitative risk assessment method of casing collapse resistance and internal pressure resistance is established in accordance with the theory of structural reliability and random theory, in terms of geometrical parameters, mechanical property and external load randomness of casing and on the basis of the analysis on shortcomings of safety coefficient and assessment methods for conventional casing design. Using Monte-Carlo random sampling method, a probability of casing failure with different pressure and a relationship between safety coefficient and probability of casing failure have been obtained by simulating a random distribution regularity of casing strength. Studies show that quantitative risk assessment methods could be adopted to perform quantitative assessment on casing safety and reliability. Casings of different types and under the effect of different external loads have similar safety coefficient and different probabilities of failure. Failure probability assessment index calculated with random theory may provide bases for the selection of conventional safety coefficient and casing design and assessment with uncertain external loads.","URL":"http://www.sciencedirect.com/science/article/pii/S1876610212004523","DOI":"10.1016/j.egypro.2012.02.116","ISSN":"1876-6102","journalAbbreviation":"Energy Procedia","author":[{"family":"Liao","given":"Hualin"},{"family":"Guan","given":"Zhichuan"},{"family":"Long","given":"Gang"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",8,26]]}}},{"key":"http://zotero.org/users/39885/items/U84AKTZ6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/U84AKTZ6","type":"book","title":"Cambridge encyclopedia of language.","publisher":"Cambridge University Press","publisher-place":"Cambridge","edition":"2. edition.","event-place":"Cambridge","ISBN":"978-0-521-55967-6","call-number":"2253","author":[{"family":"Crystal","given":"David"}],"issued":{"date-parts":[["1997"]]}}},{"key":"http://zotero.org/users/39885/items/U9TA7XEN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/U9TA7XEN","type":"article-journal","title":"An interoperability model for ultra large scale systems","container-title":"Advances in Engineering Software","page":"22-46","volume":"67","source":"ScienceDirect","abstract":"Ultra large scale systems are a new generation of distributed software system that are composed of various changing, inconsistent or even conflicting components that are distributed in a wide domain. Some important characteristics of these systems include their very large size, global geographical distribution, operational and managerial independence of their member systems. The main function of these systems arises from the interoperability between their components. Nowadays one of the most important challenges facing ultra large scale systems is the interoperability of their component systems. Interoperability is the ability by which system elements can exchange and understand the information required with each other. This paper aims to solve the mentioned challenge, which is divided into two main parts. In the first part, this paper presents a maturity model for the interoperability of ultra large scale systems, by using the interoperability level of the component system of one ultra large scale system its maturity level can be determined. In the second part, by proposing a framework we try to increase the interoperability of the component systems in ultra large scale systems based on the interoperability maturity levels determined in the first part. Consequently their interoperability is improved.","URL":"http://www.sciencedirect.com/science/article/pii/S096599781300121X","DOI":"10.1016/j.advengsoft.2013.07.003","ISSN":"0965-9978","journalAbbreviation":"Advances in Engineering Software","author":[{"family":"Rezaei","given":"Reza"},{"family":"Chiew","given":"Thiam Kian"},{"family":"Lee","given":"Sai Peck"}],"issued":{"date-parts":[["2014",1]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/UBCF7NNC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UBCF7NNC","type":"book","title":"e : the story of a number","publisher":"Princeton University Press","publisher-place":"Princeton  N.J.","event-place":"Princeton  N.J.","ISBN":"978-0-691-05854-2","call-number":"0111","author":[{"family":"Maor","given":"Eli"}],"issued":{"date-parts":[["1998"]]}}},{"key":"http://zotero.org/users/39885/items/UCZ35XFM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UCZ35XFM","type":"article-journal","title":"A Practical Approach for Demonstrating Environmental Sustainability and Stewardship through a Net Ecosystem Service Analysis","container-title":"Sustainability","page":"2152-2177","volume":"5","issue":"5","source":"www.mdpi.com","abstract":"The increasing pressure on the earth’s resources due to population growth requires that development and resource use be managed to maintain a sustainable environment so as to preserve or enhance human well-being. A practical approach for demonstrating the environmental sustainability of an action (e.g., green business practice) through ecosystem service analysis is presented. The overarching premise of the approach is that human well-being is directly related to changes in ecosystems and associated services. The approach evaluates the net change in ecosystem services, and hence human well-being, and is termed a net ecosystem service analysis (NESA). Using this approach, if a net positive change in ecosystem services relative to the baseline condition occurs for an action, that action would be considered potentially sustainable. In addition, if an action creates net ecosystem service value above the baseline condition, it would be considered to embody environmental stewardship. Established ecological and human use quantification methods are incorporated into the analysis. In addition, to demonstrate potential sustainability, the approach must also consider the need to satisfy intergenerational equity objectives. The use of a practical approach from which private business and government representatives can make decisions regarding environmental sustainability and stewardship will provide for improved decision-making based on quantifiable metrics.","URL":"http://www.mdpi.com/2071-1050/5/5/2152","DOI":"10.3390/su5052152","language":"en","author":[{"family":"Nicolette","given":"Joseph"},{"family":"Burr","given":"Stephanie"},{"family":"Rockel","given":"Mark"}],"issued":{"date-parts":[["2013",5,10]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/UD3GM96F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UD3GM96F","type":"book","title":"Accelerated C++: Practical Programming by Example","publisher":"Addison-Wesley Professional","publisher-place":"Boston, MA","number-of-pages":"352","edition":"1 edition","source":"Amazon.com","event-place":"Boston, MA","abstract":"Want to learn how to program in C++ immediately? Want to start writing better, more powerful C++ programs today? Accelerated C++'s uniquely modern approach will help you learn faster and more fluently than you ever believed possible. Based on the authors' intensive summer C++ courses at Stanford University, Accelerated C++ covers virtually every concept that most professional C++ programmers will ever use -- but it turns the \"traditional\" C++ curriculum upside down, starting with the high-level C++ data structures and algorithms that let you write robust programs immediately. Once you're getting results, Accelerated C++ takes you \"under the hood,\" introducing complex language features such as memory management in context, and explaining exactly how and when to use them. From start to finish, the book concentrates on solving problems, rather than learning language and library features for their own sake. The result: You'll be writing real-world programs in no time -- and outstanding code faster than you ever imagined.","ISBN":"978-0-201-70353-5","shortTitle":"Accelerated C++","language":"English","author":[{"family":"Koenig","given":"Andrew"},{"family":"Moo","given":"Barbara E."}],"issued":{"date-parts":[["2000",8,24]]}}},{"key":"http://zotero.org/users/39885/items/UDM56TZE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UDM56TZE","type":"book","title":"Systems Engineering and Analysis","publisher":"Prentice Hall","edition":"Second Edition","source":"Amazon.com","call-number":"0908","author":[{"family":"Blanchard","given":"B"},{"family":"Fabrycky","given":"W"}],"issued":{"date-parts":[["1990",1,1]]}}},{"key":"http://zotero.org/users/39885/items/UDP9AX56","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UDP9AX56","type":"article-journal","title":"3D-mapping optimization of embodied energy of transportation","container-title":"Resources, Conservation and Recycling","page":"435-453","volume":"51","issue":"2","abstract":"The recent development of Google Earth, an information service that provides imagery and three-dimensional data depicting the entire Earth, provides an opportunity to use a new method of navigating information to save energy in the real world. Google Earth uses Keyhole Markup Language (KML) for modeling and storing geographic features and information for display in the Google Earth Client. This paper will analyze the potential of this novel and free geographic mapping service to reduce embodied energy of transportation in two ways. First, at the consumer level, Google Earth will be studied to map the automobile route that uses the least fuel and maintains vehicle velocities at their individual maximum fuel efficiency. The same analysis for single destination trips could be used to optimize fleet vehicle routes such as garbage or recycling collection trucks. The secondary benefit of ecological education will also be explored. Fuel used could be converted into monetary units based on the current price of gas, pollution/greenhouse gas emissions, or ecological footprints to improve driving habits. Secondly, KML overlays will be analyzed for use of determining: (i) raw material and products availability as a function of location, and (ii) modes of transportation as a function of emissions. These overlays would enable manufacturers access to an easily navigable method to optimize the life cycle of their products by minimizing embodied energy of transportation. The most efficient transportation methods and travel routes could be calculated. This same tool would be useful for architects to obtain Leadership in Energy and Environmental Design rating points for the green design of buildings. Overall, the analysis completed finds that the flexibility and visual display of quantitative information made available by Google Earth could have a significant impact at conserving fuel resources by reducing the embodied energy of transportation on a global scale.","URL":"http://www.sciencedirect.com/science/article/B6VDX-4MFKD8J-1/1/e6aea3f29d5f91e30a8bf3fb7fd57b17","DOI":"10.1016/j.resconrec.2006.10.010","call-number":"0008","author":[{"family":"Pearce","given":"Joshua M."},{"family":"Johnson","given":"Sara J."},{"family":"Grant","given":"Gabriel B."}],"issued":{"date-parts":[["2007",8]]},"accessed":{"date-parts":[["2008",6,20]]}}},{"key":"http://zotero.org/users/39885/items/UF49VZJQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UF49VZJQ","type":"article-journal","title":"Dissolved oxygen sensor based on fluorescence quenching of oxygen-sensitive ruthenium complexes immobilized in sol-gel-derived porous silica coatings","container-title":"The Analyst","page":"785-788","volume":"121","issue":"6","source":"RSC Publishing","abstract":"A dissolved oxygen sensor based on the quenching of fluorescence from a ruthenium dye complex entrapped in a porous sol-gel film is reported. Sol-gel-derived silica films were fabricated by dip-coating on to planar and optical fibre substrates. The films were pre-doped with the oxygen-sensitive ruthenium complex [RII-tris(4,7-diphenyl-1,10-phenanthroline)], the fluorescence of which is quenched in the presence of oxygen. The structure and behaviour of sol-gel films are dependent on the fabrication parameters. In particular, enhancement of the surface hydrophobicity increases the quenching response in water. This is achieved by using suitable proportions of modified precursors of silica of the form R(OEt)3Si, where R is an alkyl group, in the standard fabrication procedure. It is shown that by increasing the ratio of modified precursor, the quenching response in the aqueous phase increases. A very low limit of detection, 6 ppb, was determined for the modified films. Using a high-brightness blue LED, combined with a miniature photodiode detection system, these results indicate the potential for a low-cost, high-performance, portable dissolved oxygen sensor for use in many varied situations from aeration control to on-line river pollution monitoring.","URL":"http://dx.doi.org/10.1039/AN9962100785","journalAbbreviation":"Analyst","author":[{"family":"McEvoy","given":"Aisling K."},{"family":"McDonagh","given":"Colette M."},{"family":"MacCraith","given":"Brian D."}],"issued":{"date-parts":[["1996"]]},"accessed":{"date-parts":[["2009",8,23]]}}},{"key":"http://zotero.org/users/39885/items/UFB76XVH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UFB76XVH","type":"article-journal","title":"The Equity Illusion of Surface Ownership in Coalbed Methane Gas; The Rise of Mutual Simultaneous Rights in Mineral Law and The Resulting Need for Dispute Resolution in Split Estate Relations","container-title":"Mo. Envtl. L. & Pol'y Rev.","page":"109–751","volume":"16","source":"Google Scholar","URL":"https://litigation-essentials.lexisnexis.com/webcd/app?action=DocumentDisplay&crawlid=1&srctype=smi&srcid=3B15&doctype=cite&docid=16+Mo.+Envtl.+L.+%26+Pol%27y+Rev.+109&key=bfced7b25cfc1ae0e20951aa7f0af8cb","author":[{"family":"Mullins","given":"LoValerie"}],"issued":{"date-parts":[["2009"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/UFF8TDCB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UFF8TDCB","type":"book","title":"Operating Manual for Spaceship Earth","publisher":"Amereon Ltd","number-of-pages":"128","source":"Amazon.com","ISBN":"0-89190-235-X","author":[{"family":"Fuller","given":"R. Buckminster"}],"issued":{"date-parts":[["1998",6,19]]}}},{"key":"http://zotero.org/users/39885/items/UFUC8RFZ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UFUC8RFZ","type":"article-journal","title":"A critique of vandervert's thermodynamic-holographic brain model: A response to vandervert","container-title":"New Ideas in Psychology","page":"139-141","volume":"13","issue":"2","source":"ScienceDirect","URL":"http://www.sciencedirect.com/science/article/pii/0732118X9400050D","DOI":"10.1016/0732-118X(94)00050-D","ISSN":"0732-118X","shortTitle":"A critique of vandervert's thermodynamic-holographic brain model","journalAbbreviation":"New Ideas in Psychology","author":[{"family":"Alexander","given":"David M."},{"family":"Globus","given":"Gordon"}],"issued":{"date-parts":[["1995",7]]},"accessed":{"date-parts":[["2016",2,19]]}}},{"key":"http://zotero.org/users/39885/items/UGXINASE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UGXINASE","type":"book","title":"Support to the Identification of Potential Risks for the Environment and Human Health Arising from Hydrocarbons Operations Involving Hydraulic Fracturing in Europe/[Author: Dr. Mark Bloomfield].","publisher":"AEA Technology pic","source":"Google Scholar","shortTitle":"Support to the Identification of Potential Risks for the Environment and Human Health Arising from Hydrocarbons Operations Involving Hydraulic Fracturing in Europe/[Author","author":[{"family":"Bloomfield","given":"Mark"}],"issued":{"date-parts":[["2012"]]}}},{"key":"http://zotero.org/users/39885/items/UK579268","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UK579268","type":"chapter","title":"Models for national, international, and global systems policy","container-title":"Economic-Ecological Modelling. North-Holland, Amsterdam","call-number":"0029","author":[{"family":"Odum","given":"H. T."}],"issued":{"date-parts":[["1987"]]}}},{"key":"http://zotero.org/users/39885/items/UKVNTN7H","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UKVNTN7H","type":"article-journal","title":"Concepts of efficiency in ecological economics: Sisyphus and the decision maker","container-title":"Ecological Economics","collection-title":"Think Tank 2003 Ecological Economics Think Tank held in Auckland, NZ 2003","page":"359-372","volume":"56","issue":"3","source":"ScienceDirect","abstract":"Efficiency forms the bedrock of policy, planning and business approaches to sustainable development. But what do ecological economists mean by efficiency? In the resource use context, efficiency has a wide range of potential interpretations, from the ratio of work output/energy inputs to Pareto efficiency. Despite the potential richness of the efficiency concept, in practice, efficiency is often narrowly conceived within disciplinary boundaries. This appears to be the case even in ecological economics, which purports to be ‘transdisciplinary’ and pluralistic. Such narrow disciplinary perspectives essentially waste the richness of the efficiency concept. This wasting could mean ecological economists and decision-makers are destined to Sisyphean toil in the pursuit of sustainable development.\n\nThis paper explores the efficiency concept and its interpretation. It then reviews ecological economic literature to find that there is much room for improvement in the way ecological economists apply efficiency. Finally, the paper presents a framework within which a truly ecological economic approach to efficiency can emerge. Armed with this framework, policy makers and planners should be better prepared to make decisions leading to sustainable development.","URL":"http://www.sciencedirect.com/science/article/pii/S0921800905004271","DOI":"10.1016/j.ecolecon.2005.09.014","ISSN":"0921-8009","shortTitle":"Concepts of efficiency in ecological economics","journalAbbreviation":"Ecological Economics","author":[{"family":"Jollands","given":"Nigel"}],"issued":{"date-parts":[["2006",3,15]]},"accessed":{"date-parts":[["2015",2,8]]}}},{"key":"http://zotero.org/users/39885/items/UMJSATAR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UMJSATAR","type":"article-journal","title":"Groundwater Visualisation System (GVS): A software framework for integrated display and interrogation of conceptual hydrogeological models, data and time-series animation","container-title":"Journal of Hydrology","page":"56-72","volume":"491","source":"ScienceDirect","abstract":"Summary\nManagement of groundwater systems requires realistic conceptual hydrogeological models as a framework for numerical simulation modelling, but also for system understanding and communicating this to stakeholders and the broader community. To help overcome these challenges we developed GVS (Groundwater Visualisation System), a stand-alone desktop software package that uses interactive 3D visualisation and animation techniques. The goal was a user-friendly groundwater management tool that could support a range of existing real-world and pre-processed data, both surface and subsurface, including geology and various types of temporal hydrological information. GVS allows these data to be integrated into a single conceptual hydrogeological model. In addition, 3D geological models produced externally using other software packages, can readily be imported into GVS models, as can outputs of simulations (e.g. piezometric surfaces) produced by software such as MODFLOW or FEFLOW. Boreholes can be integrated, showing any down-hole data and properties, including screen information, intersected geology, water level data and water chemistry. Animation is used to display spatial and temporal changes, with time-series data such as rainfall, standing water levels and electrical conductivity, displaying dynamic processes. Time and space variations can be presented using a range of contouring and colour mapping techniques, in addition to interactive plots of time-series parameters. Other types of data, for example, demographics and cultural information, can also be readily incorporated. The GVS software can execute on a standard Windows or Linux-based PC with a minimum of 2 GB RAM, and the model output is easy and inexpensive to distribute, by download or via USB/DVD/CD.\n\nExample models are described here for three groundwater systems in Queensland, northeastern Australia: two unconfined alluvial groundwater systems with intensive irrigation, the Lockyer Valley and the upper Condamine Valley, and the Surat Basin, a large sedimentary basin of confined artesian aquifers. This latter example required more detail in the hydrostratigraphy, correlation of formations with drillholes and visualisation of simulation piezometric surfaces. Both alluvial system GVS models were developed during drought conditions to support government strategies to implement groundwater management. The Surat Basin model was industry sponsored research, for coal seam gas groundwater management and community information and consultation. The “virtual” groundwater systems in these 3D GVS models can be interactively interrogated by standard functions, plus production of 2D cross-sections, data selection from the 3D scene, rear end database and plot displays. A unique feature is that GVS allows investigation of time-series data across different display modes, both 2D and 3D. GVS has been used successfully as a tool to enhance community/stakeholder understanding and knowledge of groundwater systems and is of value for training and educational purposes. Projects completed confirm that GVS provides a powerful support to management and decision making, and as a tool for interpretation of groundwater system hydrological processes. A highly effective visualisation output is the production of short videos (e.g. 2–5 min) based on sequences of camera ‘fly-throughs’ and screen images. Further work involves developing support for multi-screen displays and touch-screen technologies, distributed rendering, gestural interaction systems. To highlight the visualisation and animation capability of the GVS software, links to related multimedia hosted online sites are included in the references.","URL":"http://www.sciencedirect.com/science/article/pii/S0022169413002321","DOI":"10.1016/j.jhydrol.2013.03.023","ISSN":"0022-1694","shortTitle":"Groundwater Visualisation System (GVS)","journalAbbreviation":"Journal of Hydrology","author":[{"family":"Cox","given":"Malcolm E."},{"family":"James","given":"Allan"},{"family":"Hawke","given":"Amy"},{"family":"Raiber","given":"Matthias"}],"issued":{"date-parts":[["2013",5,29]]},"accessed":{"date-parts":[["2015",10,11]]}}},{"key":"http://zotero.org/users/39885/items/UMUAJGMU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UMUAJGMU","type":"book","title":"Leibniz on the Parallel Postulate and the Foundations of Geometry: The Unpublished Manuscripts","publisher":"Birkhäuser","number-of-pages":"199","source":"Google Books","abstract":"This book offers a general introduction to the geometrical studies of Gottfried Wilhelm Leibniz (1646-1716) and his mathematical epistemology. In particular, it focuses on his theory of parallel lines and his attempts to prove the famous Parallel Postulate. Furthermore it explains the role that Leibniz’s work played in the development of non-Euclidean geometry. The first part is an overview of his epistemology of geometry and a few of his geometrical findings, which puts them in the context of the seventeenth-century studies on the foundations of geometry. It also provides a detailed mathematical and philosophical commentary on his writings on the theory of parallels, and discusses how they were received in the eighteenth century as well as their relevance for the non-Euclidean revolution in mathematics. The second part offers a collection of Leibniz’s essays on the theory of parallels and an English translation of them. While a few of these papers have already been published (in Latin) in the standard Leibniz editions, most of them are transcribed from Leibniz’s manuscripts written in Hannover, and published here for the first time. The book provides new material on the history of non-Euclidean geometry, stressing the previously neglected role of Leibniz in these developments.This volume will be of interest to historians in mathematics, philosophy or logic, as well as mathematicians interested in non-Euclidean geometry.","ISBN":"978-3-319-19863-7","shortTitle":"Leibniz on the Parallel Postulate and the Foundations of Geometry","language":"en","author":[{"family":"Risi","given":"Vincenzo De"}],"issued":{"date-parts":[["2016",2,29]]}}},{"key":"http://zotero.org/users/39885/items/UQ7AASE9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UQ7AASE9","type":"book","title":"Rich dad, poor dad : what the rich teach their kids about money that the poor and middle class do not!","publisher":"TechPress","publisher-place":"Paradise Valley  Ariz.","event-place":"Paradise Valley  Ariz.","ISBN":"978-0-9643856-1-0","author":[{"family":"Kiyosaki","given":"Robert"}],"issued":{"date-parts":[["1998"]]}}},{"key":"http://zotero.org/users/39885/items/UQESHIZW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UQESHIZW","type":"post-weblog","title":"Groundwater Monitoring Optimisation","container-title":"NICTA","abstract":"National ICT Australia","URL":"http://www.nicta.com.au/project/groundwater-monitoring-optimisation/","author":[{"family":"Leihn, Peter","given":""},{"family":"Mathews, George","given":""}],"issued":{"date-parts":[["2015",6,11]]},"accessed":{"date-parts":[["2015",11,5]]}}},{"key":"http://zotero.org/users/39885/items/UQTVXSQP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UQTVXSQP","type":"motion_picture","title":"Sir Robert Moray - Soldier, scientist, spy, freemason and founder of The Royal Society","publisher-place":"Gresham College","event-place":"Gresham College","URL":"http://www.gresham.ac.uk/lectures-and-events/sir-robert-moray-soldier-scientist-spy-freemason-and-founder-of-the-royal","author":[{"family":"Lomas","given":"Dr Robert"}],"issued":{"date-parts":[["2007",4,4]]}}},{"key":"http://zotero.org/users/39885/items/UR7DFG3I","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UR7DFG3I","type":"article-journal","title":"Complexity clouds finance-risk models","container-title":"Nature","page":"166","volume":"471","issue":"7337","source":"UQ Library Search, Summon 2.0","URL":"http://www.ncbi.nlm.nih.gov/pubmed/21390114","DOI":"10.1038/471166a","ISSN":"0028-0836","language":"English","author":[{"family":"Sornette","given":"Didier"},{"family":"Becke","given":"Susanne","non-dropping-particle":"von der"}],"issued":{"date-parts":[["2011",3]]},"accessed":{"date-parts":[["2015",8,21]]}}},{"key":"http://zotero.org/users/39885/items/USQVKSTE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/USQVKSTE","type":"article-journal","title":"Relation between two proposed fluctuation theorems","container-title":"Molecular Simulation","page":"389","volume":"31","issue":"6","URL":"http://www.informaworld.com/10.1080/08927020412331332721","DOI":"10.1080/08927020412331332721","ISSN":"0892-7022","call-number":"0003","author":[{"family":"Evans","given":"Denis J."}],"issued":{"date-parts":[["2005"]]},"accessed":{"date-parts":[["2008",3,28]]}}},{"key":"http://zotero.org/users/39885/items/UT6J2TIT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UT6J2TIT","type":"book","title":"The biosphere and noosphere reader: global environment, society, and change","publisher":"Psychology Press","number-of-pages":"226","source":"Google Books","abstract":"The Reader is the first comprehensive history of the noosphere and biosphere. Drawing on classical influences, modern parallels, and insights into the future, the Reader traces the emergence of noosphere and biosphere concepts within the concept of environmental change. Reproducing material from seminla works, both past and present, key ideas and writings of prominent thinkers are presented, including Bergson, Vernadsky, Lovelock, Russell, Needham, Huxley, Medawar, Toynbee and Boulding, and extensive introductory pieces bu the editors drawattention to common themes and competing ideas. Focussing on issues of origins, theories, parallels and potential, the discussions place issues in a broad context, compare and contrast central concepts with those of the Gaia hypothesis, sustainability and global change, and examine the potential application of noospheric ideas to current debates about culture, education and technology in such realms as the Internet, space exploration, and the emergence of super-consciousness. Literally the sphere of mind or intellect', the noosphere is aprt of the realm of the possible' in human affairs, where there is a conscious effort to tackle global issues The noosphere concept captures a number of key contemporary issues - social evolution, global ecology, Gaia, deep ecology and global environmental change - contributing to ongoing debates concerning the implications of emerging technologies.","ISBN":"978-0-415-16644-7","shortTitle":"The biosphere and noosphere reader","language":"en","author":[{"family":"Samson","given":"Paul R."},{"family":"Pitt","given":"David"}],"issued":{"date-parts":[["1999"]]}}},{"key":"http://zotero.org/users/39885/items/UTQVFQ37","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UTQVFQ37","type":"article-journal","title":"Groundwater-dependent ecosystems in Australia : it's more than just water for rivers","source":"UQ Library Search, Summon 2.0","URL":"http://hdl.handle.net/1959.14/101458","ISSN":"1442-8903","shortTitle":"Groundwater-dependent ecosystems in Australia","language":"English","author":[{"family":"Murray","given":"Brad R."},{"family":"Zeppel","given":"Melanie J. B."},{"family":"Hose","given":"Grant C."},{"family":"Eamus","given":"Derek"}],"issued":{"date-parts":[["2003"]]},"accessed":{"date-parts":[["2015",10,12]]}}},{"key":"http://zotero.org/users/39885/items/UTUNXM6F","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UTUNXM6F","type":"article","title":"AS/NZS ISO 31000:2009, Risk management - Principles and guidelines","publisher":"Standards Australia","author":[{"family":"Standards Australia","given":""}],"issued":{"date-parts":[["2009"]]}}},{"key":"http://zotero.org/users/39885/items/UUXQD2P3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UUXQD2P3","type":"article-journal","title":"The Sensor Web: A Macro-Instrument for Coordinated Sensing","container-title":"Sensors","page":"270-285","volume":"2","source":"CrossRef","URL":"http://www.mdpi.com/search/?q=The+Sensor+Web%3A+A+macro-instrument+for+coordinated+sensing&s_journal=sensors&s_volume=&s_authors=&s_section=0&s_issue=&s_article_type=0&s_special_issue=0&s_page=&s_search=Search","DOI":"10.3390/s20700270","ISSN":"1424-8220","shortTitle":"The Sensor Web","author":[{"family":"Delin","given":"Kevin A."}],"issued":{"date-parts":[["2002",7,14]]},"accessed":{"date-parts":[["2011",9,11]]}}},{"key":"http://zotero.org/users/39885/items/UWCVCHDN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UWCVCHDN","type":"article","title":"THE MINING, MINERALS AND SUSTAINABLE DEVELOPMENT PROJECT - EXECUTIVE SUMMARY","publisher":"International Institute for Environment and Development","URL":"http://pubs.iied.org/pdfs/9084IIED.pdf?","author":[{"family":"IIED","given":""}],"issued":{"date-parts":[["2002"]]},"accessed":{"date-parts":[["2015",1,11]]}}},{"key":"http://zotero.org/users/39885/items/UWNTZHD4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UWNTZHD4","type":"book","title":"Socrates,","publisher":"Cambridge University Press","publisher-place":"London","event-place":"London","ISBN":"978-0-521-09667-6","call-number":"2091","author":[{"family":"Guthrie","given":"W"}],"issued":{"date-parts":[["1971"]]}}},{"key":"http://zotero.org/users/39885/items/UWV7EBDS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UWV7EBDS","type":"article-journal","title":"WHAT’S AT STEAK? ECOLOGICAL ECONOMIC SUSTAINABILITY AND THE ETHICAL, ENVIRONMENTAL, AND POLICY IMPLICATIONS FOR GLOBAL LIVESTOCK PRODUCTION","source":"dalspace.library.dal.ca","abstract":"Achieving environmental s¬ustainability in human organization is the defining challenge of the modern era. In light of the inability of the existing economic paradigm to provide for sustainability objectives, novel approaches to understanding and managing economic activities are required. Towards this end, the emergent field of ecological economics provides an alternative paradigm that expressly prioritizes the development of the theory and tools necessary to operationalize environmental sustainability in economic activity, which is viewed as prerequisite to sustainability in any other sphere. Here, I advance an internally consistent framework for understanding and implementing the core ecological economic sustainability criteria: appropriate scale relative to biocapacity; distributive justice; and efficient allocation. This framework includes: (1) an ecological communitarian conception of distributive justice which recognizes environmental sustainability as the first principle of distributive justice; (2) the rationale for biophysically-consistent ecological economic modeling of human activities as a basis for environmentally-enlightened policy and management; and (3) an appeal for scale-oriented environmental governance as could potentially be operationalized by a strong, centralized World Environment Organization.  I further apply this framework to evaluating the current and future status of livestock production systems at regional and global scales with respect to efficiency considerations as well as their relationships to sustainability boundary conditions for human activities as a whole. It is suggested that the current and projected scale of the livestock sector is fundamentally unsustainable, and that all leverage points must be exploited to rein in this sector in the interest of preventing irreversible ecological change. This must include, but cannot be limited to, strong eco-efficiency measures and changes in production technologies, species substitutions, and consumption patterns and volumes. Outcomes are interpreted in terms of their implications for environmental policy and governance oriented towards the sustainability objective.","URL":"http://DalSpace.library.dal.ca:8080/xmlui/handle/10222/12821","shortTitle":"WHAT’S AT STEAK?","language":"en","author":[{"family":"Pelletier","given":"Nathaniel L."}],"issued":{"date-parts":[["2010",5,14]]},"accessed":{"date-parts":[["2015",9,24]]}}},{"key":"http://zotero.org/users/39885/items/UXJZMUJM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/UXJZMUJM","type":"book","title":"Leibniz and the Environment","publisher":"Routledge","publisher-place":"New York","number-of-pages":"256","source":"Amazon","event-place":"New York","abstract":"The work of seventeenth-century polymath Gottfried Wilhelm Leibniz has proved inspirational to philosophers and scientists alike. In this thought-provoking book, Pauline Phemister explores the ecological potential of Leibniz’s dynamic, pluralist, panpsychist, metaphysical system. She argues that Leibniz’s philosophy has a renewed relevance in the twenty-first century, particularly in relation to the environmental change and crises that threaten human and non-human life on earth.  Drawing on Leibniz’s theory of soul-like, interconnected metaphysical entities he termed 'monads', Phemister explains how an individual’s true good is inextricably linked to the good of all. Phemister also finds in Leibniz’s works the rudiments of a theory of empathy and strategies for strengthening human feelings of compassion towards all living things.  Leibniz and the Environment is essential reading for historians of philosophy and environmental philosophers, and will also be of interest to anyone seeking a metaphysical perspective from which to pursue environmental action and policy.","ISBN":"978-1-138-92491-8","language":"English","issued":{"date-parts":[["2016",4,15]]}}},{"key":"http://zotero.org/users/39885/items/V23NZPDT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V23NZPDT","type":"paper-conference","title":"Integrating models and simulations of continuous dynamics into sysml","container-title":"Modelica Conference 2008","source":"Google Scholar","author":[{"family":"Johnson","given":"T."},{"family":"Paredis","given":"C.J.J."},{"family":"Burkhart","given":"R."}],"issued":{"date-parts":[["2008"]]}}},{"key":"http://zotero.org/users/39885/items/V29RJNZE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V29RJNZE","type":"article-journal","title":"ANIMAL AUTOMATISM AND CONSCIOUSNESS","container-title":"The Monist","page":"1-18","volume":"7","issue":"1","source":"JSTOR","URL":"http://www.jstor.org/stable/27897384","ISSN":"0026-9662","journalAbbreviation":"The Monist","author":[{"family":"Morgan","given":"C. Lloyd"}],"issued":{"date-parts":[["1896"]]},"accessed":{"date-parts":[["2016",2,24]]}}},{"key":"http://zotero.org/users/39885/items/V2PUVTCA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V2PUVTCA","type":"article-journal","title":"Quasi-equilibrium states in channel morphology","container-title":"American Journal of Science","page":"782-794","volume":"262","issue":"6","source":"www.ajsonline.org.ezproxy.library.uq.edu.au","abstract":"In addition to the usual physical laws of hydraulics, other influences are operative, which account for quasi-equilibrium states in the observed form of stream channels. These states represent the most probable state between two opposing tendencies--toward minimum total rate of work in the whole fluvial system and toward uniform distribution of energy expenditure throughout the system. Aspects of several types of fluvial systems are discussed in terms of these principles.","URL":"http://www.ajsonline.org.ezproxy.library.uq.edu.au/content/262/6/782","DOI":"10.2475/ajs.262.6.782","ISSN":"0002-9599, 1945-452X","journalAbbreviation":"Am J Sci","language":"en","author":[{"family":"Langbein","given":"Walter B."},{"family":"Leopold","given":"Luna B."}],"issued":{"date-parts":[["1964",6,1]]},"accessed":{"date-parts":[["2016",1,30]]}}},{"key":"http://zotero.org/users/39885/items/V3MBJNAP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V3MBJNAP","type":"article-journal","title":"NRDS - Annual Report","container-title":"Journal of Natural Resource Data","page":"1-11","volume":"1","issue":"1","source":"nrds.github.io","URL":"http://nrds.github.io/","author":[{"family":"Maud","given":"Sholto"}],"issued":{"date-parts":[["2015",1,17]]},"accessed":{"date-parts":[["2015",8,26]]}}},{"key":"http://zotero.org/users/39885/items/V4UNBH7R","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V4UNBH7R","type":"article-journal","title":"Polyscape: A GIS mapping framework providing efficient and spatially explicit landscape-scale valuation of multiple ecosystem services","container-title":"Landscape and Urban Planning","page":"74–88","volume":"112","source":"Google Scholar","URL":"http://www.sciencedirect.com/science/article/pii/S0169204612003532","shortTitle":"Polyscape","author":[{"family":"Jackson","given":"Bethanna"},{"family":"Pagella","given":"Timothy"},{"family":"Sinclair","given":"Fergus"},{"family":"Orellana","given":"Barbara"},{"family":"Henshaw","given":"Alex"},{"family":"Reynolds","given":"Brian"},{"family":"Mcintyre","given":"Neil"},{"family":"Wheater","given":"Howard"},{"family":"Eycott","given":"Amy"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/V5GVETQ2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V5GVETQ2","type":"book","title":"Principles of Physics","publisher":"Saunders College Publishing","edition":"2nd","ISBN":"0-03-020457-7","call-number":"2896","author":[{"family":"Serway","given":""}],"issued":{"date-parts":[["1997",7]]}}},{"key":"http://zotero.org/users/39885/items/V5QG7ZAX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V5QG7ZAX","type":"webpage","title":"Soil samples from the Pilliga reveal toxicity","container-title":"ABC News","genre":"Text","abstract":"A Gunnedah-based soil scientist says tests of soil samples from the site of a possible spill of produced coal seam gas water in the Pilliga State Forest show toxic levels of manganese and chloride.","URL":"http://www.abc.net.au/news/2015-03-21/soil-samples-from-the-pilliga-reveal-27toxic27-levels-of-chem/6336166","language":"en-AU","author":[{"family":"McOwan","given":"Johannah"}],"issued":{"date-parts":[["2015",3,21]]},"accessed":{"date-parts":[["2015",10,13]]}}},{"key":"http://zotero.org/users/39885/items/V66W6Q9J","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V66W6Q9J","type":"article","title":"REGULATION OF HYDRAULIC FRACTURING IN AUSTRALIA","publisher":"Australian Water Association","URL":"http://www.awa.asn.au/htmlemails/Ozwater14/pdf/40740000Final00328.pdf","author":[{"family":"Hoare, Rebecca","given":""},{"family":"Finn, Wilfred","given":""}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",12,11]]}}},{"key":"http://zotero.org/users/39885/items/V6H4R5B3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V6H4R5B3","type":"chapter","title":"Chapter 14 Innovation, Risk, Precaution, and the Regulation of GM Crops","container-title":"Genetically Modified Food and Global Welfare","collection-title":"Frontiers of Economics and Globalization","collection-number":"10","publisher":"Emerald Group Publishing Limited","page":"337-367","volume":"10","number-of-volumes":"0","source":"emeraldinsight.com (Atypon)","URL":"http://www.emeraldinsight.com/doi/full/10.1108/S1574-8715%282011%290000010019","author":[{"literal":"Alan Randall"}],"issued":{"date-parts":[["2011",1,1]]},"accessed":{"date-parts":[["2015",3,30]]}}},{"key":"http://zotero.org/users/39885/items/V6HFMC22","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V6HFMC22","type":"article-journal","title":"Improving satellite soil moisture estimates by combining passive and active microwave observations (1992–2008)","container-title":"IAHS-AISH publication","page":"16–20","source":"Google Scholar","URL":"http://web.science.unsw.edu.au/~jasone/publications/liuetal2012a.pdf","author":[{"family":"Liu","given":"Yi"},{"family":"Parinussa","given":"Robert"},{"family":"Dorigo","given":"Wouter"},{"family":"De Jeu","given":"Richard"},{"family":"Wagner","given":"Wolfgang"},{"family":"McCabe","given":"Matthew"},{"family":"Evans","given":"Jason"},{"family":"Van Dijk","given":"Albert"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2014",4,2]]}}},{"key":"http://zotero.org/users/39885/items/V6IDREVM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V6IDREVM","type":"article-journal","title":"Coping with Complexity, Uncertainty and Ambiguity in Risk Governance: A Synthesis","container-title":"AMBIO","page":"231-246","volume":"40","issue":"2","source":"link.springer.com","URL":"http://link.springer.com/article/10.1007/s13280-010-0134-0","DOI":"10.1007/s13280-010-0134-0","ISSN":"0044-7447, 1654-7209","shortTitle":"Coping with Complexity, Uncertainty and Ambiguity in Risk Governance","journalAbbreviation":"AMBIO","language":"en","author":[{"family":"Renn","given":"Ortwin"},{"family":"Klinke","given":"Andreas"},{"family":"Asselt","given":"Marjolein","dropping-particle":"van"}],"issued":{"date-parts":[["2011",2,3]]},"accessed":{"date-parts":[["2015",10,12]]}}},{"key":"http://zotero.org/users/39885/items/V8ED4EEI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/V8ED4EEI","type":"article","title":"The Principle of Least Action","publisher":"California Institute of Technology","URL":"http://www.feynmanlectures.caltech.edu/II_19.html","author":[{"literal":"Feinman, Richard"}],"issued":{"date-parts":[["1964"]]},"accessed":{"date-parts":[["2016",3,7]]}}},{"key":"http://zotero.org/users/39885/items/VB65NRXW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VB65NRXW","type":"book","title":"The hero with a thousand faces","publisher":"Fontana","publisher-place":"London","event-place":"London","ISBN":"978-0-586-08571-4","call-number":"3549","author":[{"family":"Campbell","given":"Joseph"}],"issued":{"date-parts":[["1993"]]}}},{"key":"http://zotero.org/users/39885/items/VC2A6QHW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VC2A6QHW","type":"article-journal","title":"Relating Financial and Energy Return on Investment","container-title":"Sustainability","page":"1810-1832","volume":"3","source":"CrossRef","URL":"http://www.mdpi.com/2071-1050/3/10/1810/","DOI":"10.3390/su3101810","ISSN":"2071-1050","author":[{"family":"King","given":"Carey W."},{"family":"Hall","given":"Charles A.S."}],"issued":{"date-parts":[["2011",10,11]]},"accessed":{"date-parts":[["2011",10,15]]}}},{"key":"http://zotero.org/users/39885/items/VDX63CK9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VDX63CK9","type":"article-journal","title":"From Lotka to the entropy generation approach","container-title":"Physica A: Statistical Mechanics and its Applications","page":"3634-3639","volume":"392","issue":"17","source":"ScienceDirect","abstract":"The entropy approach to the evolution of open systems is analyzed, using Lotka’s principle as a starting point. A Lagrangian is sought after to develop an analytical method for the evaluation of the stationary states of open irreversible systems. The stationary conditions for open systems are first obtained on the basis of the entropy generation and its maximum principle, suggesting them as a link between the classical engineering thermodynamics approach and the more mathematical Lotka point of view.","URL":"http://www.sciencedirect.com/science/article/pii/S0378437113003385","DOI":"10.1016/j.physa.2013.04.025","ISSN":"0378-4371","journalAbbreviation":"Physica A: Statistical Mechanics and its Applications","author":[{"family":"Lucia","given":"Umberto"},{"family":"Sciubba","given":"Enrico"}],"issued":{"date-parts":[["2013",9,1]]},"accessed":{"date-parts":[["2016",1,14]]}}},{"key":"http://zotero.org/users/39885/items/VE9MTVNJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VE9MTVNJ","type":"article-journal","title":"Sustainability of poultry production","container-title":"Agriculture, Ecosystems and Environment","page":"470-471","volume":"120","issue":"2-4","call-number":"0001","author":[{"family":"Maud","given":"S."}],"issued":{"date-parts":[["2007"]]}}},{"key":"http://zotero.org/users/39885/items/VEKBCB9B","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VEKBCB9B","type":"article-journal","title":"Environmental assessment of a territory: An overview of existing tools and methods","container-title":"Journal of Environmental Management","page":"213-225","volume":"112","source":"ScienceDirect","abstract":"In order to reduce our environmental impact, methods for environmental assessment of human activities are urgently needed. In particular in the case of assessment of land planning scenarios, there is presently no consensual and widely adopted method although it is strongly required by the European Directive (2001/42/EC) on Strategic Environmental Assessment. However, different kinds of tools and methods are available such as human and environmental risk assessment, the ecological footprint, material flow analysis, substance flow analysis, physical input–output table, ecological network analysis, exergy, emergy or life cycle assessment. This review proposes a discussion on these tools and methods specifically applied to territories. After the meaning of territory is clarified, these approaches are presented and analyzed based on “key features” such as formalization, system modeling, inventoried flows, indicators provided and usability. This comparison highlights the strengths and weaknesses of each tool. It also emphasizes that the approach of life cycle assessment could provide a relevant framework for the environmental assessment of territories as it is the only method which can avoid burden shifting between life cycle stages, environmental impacts and territories.","URL":"http://www.sciencedirect.com/science/article/pii/S030147971200388X","DOI":"10.1016/j.jenvman.2012.07.024","ISSN":"0301-4797","shortTitle":"Environmental assessment of a territory","journalAbbreviation":"Journal of Environmental Management","author":[{"family":"Loiseau","given":"Eléonore"},{"family":"Junqua","given":"Guillaume"},{"family":"Roux","given":"Philippe"},{"family":"Bellon-Maurel","given":"Véronique"}],"issued":{"date-parts":[["2012",12,15]]},"accessed":{"date-parts":[["2015",12,14]]}}},{"key":"http://zotero.org/users/39885/items/VFDNGMMM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VFDNGMMM","type":"article-journal","title":"Emergy analysis of emerging methods of fossil fuel production","container-title":"Ecological Modelling","collection-title":"Emergy Synthesis 8 ∼ Emergy and Environmental Accounting: Theories, Applications, and Methodologies","page":"57-68","volume":"315","source":"ScienceDirect","abstract":"The production of energy from unconventional sources of fossil fuels, (e.g., tar sands, shale or sandstone formations where oil or natural gas is tightly bound), is forming an increasingly large proportion of global energy use. This research evaluates three of the most prominent emerging methods of fossil fuel production—oil from oil/tar sands, shale oil and shale gas, both produced through hydraulic fracturing. In 2013, 42% of natural gas production and 41% of oil production in the United States was produced through hydraulic fracturing and ∼60% of new oil and gas wells use the method. In 2013, the Alberta region of Canada produced 1.7 million barrels per day of synthetic crude oil from oil sands, exporting 1.3 million barrels to the US every day, comprising ∼7% of daily US oil consumption. Results from this work show that natural gas obtained through hydraulic fracturing has an emergy yield ratio (EYR) between 4.23 and 9.18, depending on well productivity and whether the gas is “wet” (contains other hydrocarbons) or “dry” (pure or nearly pure methane). Synthetic crude oil from oil sands was found to have an EYR of 3.38–4.06 (in situ vs. mined production, respectively). The EYR of tight oil was found to be 3.43–4.73, dependent on the productivity of the well. Given the relatively high current market price of oil and relatively low market price of natural gas the observed results (i.e., similar or higher EYR for natural gas than past observations and a lower EYR for oil than past observations) are expected.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380014005547","DOI":"10.1016/j.ecolmodel.2014.10.036","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Campbell","given":"Elliott T."}],"issued":{"date-parts":[["2015",11,10]]},"accessed":{"date-parts":[["2015",12,8]]}}},{"key":"http://zotero.org/users/39885/items/VFQQKUM5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VFQQKUM5","type":"book","title":"Social influence.","publisher":"Thomson Brooks/Cole Publishing Co","source":"Google Scholar","URL":"http://doi.apa.org/psycinfo/1992-97487-000","author":[{"family":"Turner","given":"John C."}],"issued":{"date-parts":[["1991"]]},"accessed":{"date-parts":[["2015",8,12]]}}},{"key":"http://zotero.org/users/39885/items/VFT8CPIE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VFT8CPIE","type":"article-journal","title":"Assessing the sustainability of the UK society using thermodynamic concepts: Part 1","container-title":"Renewable and Sustainable Energy Reviews","volume":"In Press, Uncorrected Proof","abstract":"This paper provides a concise overview of the influence of human activity within the UK society on resource consumption and the subsequent effects on the environment. The concept of the multi-scale integrated analysis of societal metabolism is applied to elucidate the evolution of the UK economy for the period between 1981 and 2004. Our findings highlight the transition to a service-based economy and the disproportionate increase of energy demand when compared to the overall population increase. Emergy synthesis is applied in order to understand the production and consumption patterns and the environmental support required to sustain human activity within the UK for the year 2004. Generally speaking the UK society greatly benefits from its significant natural resources with 44.3% of the total emergy used coming from home sources and 29.1% from locally renewable sources. Interestingly enough, despite its significant natural resources, the UK economy, seems to be a net emergy importer by 638.5�נ1021�seJ. Furthermore, the current economic activity is believed to have a significant impact in the environment despite the relatively low environmental load ratio of 2.44.","URL":"http://www.sciencedirect.com/science/article/B6VMY-4SBYH7R-1/1/1b00e3c44e748fab14223f8e52d24e2d","DOI":"10.1016/j.rser.2008.03.004","call-number":"0002","shortTitle":"Assessing the sustainability of the UK society using thermodynamic concepts","author":[{"family":"Gasparatos","given":"Alexandros"},{"family":"El-Haram","given":"Mohamed"},{"family":"Horner","given":"Malcolm"}],"issued":{"date-parts":[["2008",5,11]]},"accessed":{"date-parts":[["2008",5,11]]}}},{"key":"http://zotero.org/users/39885/items/VFZUT8DD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VFZUT8DD","type":"article-journal","title":"SQL databases v. NoSQL databases","container-title":"Communications of the ACM","page":"10","volume":"53","issue":"4","source":"CrossRef","URL":"http://portal.acm.org/citation.cfm?doid=1721654.1721659","DOI":"10.1145/1721654.1721659","ISSN":"00010782","language":"en","author":[{"family":"Stonebraker","given":"Michael"}],"issued":{"date-parts":[["2010",4,1]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/VGSW68F4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VGSW68F4","type":"speech","title":"Model driven development with sysml","URL":"http://www.google.com.au/#hl=en&sugexp=kjrmc&cp=37&gs_id=4&xhr=t&q=%22Model+Driven+Development+with+SysML%22&pf=p&sclient=psy-ab&site=&source=hp&pbx=1&oq=%22Model+Driven+Development+with+SysML%22&aq=f&aqi=&aql=&gs_sm=&gs_upl=&bav=on.2,or.r_gc.r_pw.r_cp.,cf.osb&fp=fe3ddd13887eb71a&biw=1920&bih=890","author":[{"family":"IBM","given":""}],"issued":{"date-parts":[["2009"]]},"accessed":{"date-parts":[["2011",10,15]]}}},{"key":"http://zotero.org/users/39885/items/VIK7RESV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VIK7RESV","type":"book","title":"Raven Biology 2e Ise","publisher":"McGraw-Hill Education","ISBN":"0-8016-3531-4","call-number":"0000","author":[{"family":"Raven","given":""}],"issued":{"date-parts":[["1989",2,1]]}}},{"key":"http://zotero.org/users/39885/items/VITVH7QC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VITVH7QC","type":"book","title":"From soul to mind : the emergence of psychology, from Erasmus Darwin to William James.","publisher":"Yale University Press","publisher-place":"New Haven  ;London","event-place":"New Haven  ;London","ISBN":"978-0-300-07581-6","call-number":"0000","author":[{"family":"Reed","given":"Edward"}],"issued":{"date-parts":[["1998"]]}}},{"key":"http://zotero.org/users/39885/items/VKCFIHSV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VKCFIHSV","type":"article-journal","title":"Hexastore: sextuple indexing for semantic web data management","container-title":"Proceedings of the VLDB Endowment","page":"1008–1019","volume":"1","issue":"1","source":"Google Scholar","URL":"http://dl.acm.org/citation.cfm?id=1453965","shortTitle":"Hexastore","author":[{"family":"Weiss","given":"Cathrin"},{"family":"Karras","given":"Panagiotis"},{"family":"Bernstein","given":"Abraham"}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2016",3,8]]}}},{"key":"http://zotero.org/users/39885/items/VKJXHPX4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VKJXHPX4","type":"book","title":"A Perspective of Environmental Pollution","publisher":"Cambridge University Press","publisher-place":"Cambridge ; New York","number-of-pages":"288","edition":"First edition","source":"Amazon","event-place":"Cambridge ; New York","ISBN":"978-0-521-22197-9","language":"English","author":[{"family":"Holdgate","given":"M. W."}],"issued":{"date-parts":[["1979",6,29]]}}},{"key":"http://zotero.org/users/39885/items/VNZWUMNG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VNZWUMNG","type":"webpage","title":"Parliament of Victoria - Research Papers","abstract":"Parliament of Victoria","URL":"http://www.parliament.vic.gov.au/publications/research-papers/8927-unconventional-gas-coal-seam-gas-shale-gas-and-tight-gas","language":"en-AU","author":[{"family":"Victoria","given":"corporatename=Parliament","dropping-particle":"of"}],"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/VPDCNQPE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VPDCNQPE","type":"article-journal","title":"4.4.3 A Visual Explanation of Development Methods and Strategies including the Waterfall, Spiral, Vee, Vee+, and Vee++ Models","container-title":"INCOSE International Symposium","page":"610-617","volume":"11","issue":"1","source":"Wiley Online Library","abstract":"Considerable confusion continues relative to development methods, development strategies, and delivery strategies. This confusion is prevalent in routine engineering discussions and in recent textbooks. Method models such as the Waterfall, Spiral, Vee, Vee+, and Vee++ offer a variety of software and system development approaches each with a specific emphasis. Each of these models can be applied to an incremental or evolutionary strategy according to the nature of the project and each of these in turn can be produced in single or multiple deliveries. This paper addresses the choosing of a technical development strategy, which consists of selecting and implementing a combination of the most appropriate development method, a development strategy, and a delivery strategy.","URL":"http://onlinelibrary.wiley.com/doi/10.1002/j.2334-5837.2001.tb02348.x/abstract","DOI":"10.1002/j.2334-5837.2001.tb02348.x","ISSN":"2334-5837","journalAbbreviation":"INCOSE International Symposium","language":"en","author":[{"family":"Mooz","given":"Hal"},{"family":"Forsberg","given":"Kevin"}],"issued":{"date-parts":[["2001",7,1]]},"accessed":{"date-parts":[["2015",3,17]]}}},{"key":"http://zotero.org/users/39885/items/VQIR6489","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VQIR6489","type":"report","title":"Risk Assessment Guidelines for Cumulative Impact Assessment","collection-title":"Framework for Assessing Potential Local and Cumulative Effects of Mining on Groundwater Resources","publisher":"Sinklair Knight Mertz & National Water Commission","publisher-place":"Australia","event-place":"Australia","number":"5","author":[{"family":"Moran","given":"Chris"}],"issued":{"date-parts":[["2010",12,3]]}}},{"key":"http://zotero.org/users/39885/items/VQZT2F8K","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VQZT2F8K","type":"book","title":"Physical computing : sensing and controlling the physical world with computers","publisher":"Thomson","publisher-place":"Boston  Mass.","edition":"[Nachdr.]","event-place":"Boston  Mass.","ISBN":"978-1-59200-346-4","author":[{"family":"O'Sullivan","given":"Dan"}],"issued":{"date-parts":[["2007"]]}}},{"key":"http://zotero.org/users/39885/items/VSDAM5B4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VSDAM5B4","type":"article-journal","title":"Selecting a Small Run-of-River Hydropower Plant by the analytic hierarchy process (AHP): a case study of Miño-Sil River Basin, Spain","container-title":"pending","journalAbbreviation":"Ecological Engineering","author":[{"family":"Luis Fuentes-Bargues","given":"Jose"}]}},{"key":"http://zotero.org/users/39885/items/VTE3TRKH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VTE3TRKH","type":"article","title":"Open Technology Development (OTD): Lessons Learned & Best Practices for Military Software","publisher":"Sponsored by the Assistant Secretary of Defense (Networks & Information  Integration) (NII) / DoD Chief Information Officer (CIO) and the Under Secretary of Defense for Acquisition, Technology, and Logistics (AT&L)","URL":"http://mil-oss.org/resources/otd-lessons-learned-military-v1.pdf","author":[{"family":"Scott","given":"J"},{"family":"Wheeler","given":"D"},{"family":"Lucus","given":"M"},{"family":"Herz","given":"J"}],"issued":{"date-parts":[["2011"]]}}},{"key":"http://zotero.org/users/39885/items/VV3HBV79","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VV3HBV79","type":"article","title":"Ecological tools and their use: Man and the Ecosystem","publisher":"Conneticut Agricultural Experiment Station","URL":"http://www.cep.ees.ufl.edu/emergy/documents/publications/Odum_HT_1962_EcologicalToolsAndTheirUse_ManAndTheEcosystem_CTAgriculturalBu.pdf","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1962"]]}}},{"key":"http://zotero.org/users/39885/items/VVTHN47N","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VVTHN47N","type":"book","title":"Philosophical Writings of Peirce","publisher":"Dover Publications","edition":"New Ed","ISBN":"0-486-20217-8","call-number":"0472","author":[{"family":"Peirce","given":"Charles S."}],"issued":{"date-parts":[["1955",6,1]]}}},{"key":"http://zotero.org/users/39885/items/VXEIK2DG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/VXEIK2DG","type":"article-journal","title":"Energy recovery and environmental concerns addressed through emergy–pinch analysis","container-title":"Energy","collection-title":"Double Special Issue: 2nd Dubrovnik Conference on Sustainable Development of Energy, Water and Environment Systems/PRES 03 and PRES 2004 Process Integration, Modelling and Optimisation for Energy Saving and Pollution Reduction2nd Dubrovnik Conference on Sustainable Energy, Water and Environment Systems/PRES 03 and PRES 2004 Process Integration, Modelling and Optimisation for Energy Saving and Pollution Reduction","page":"2486-2498","volume":"31","issue":"13","source":"ScienceDirect","abstract":"Presented paper shows the power of emergy analysis and its ability for simultaneous consideration of different industrial resources, goods and services for the purposes of decision-making. Accompanied by the pinch concept, which by now tries to deal separately with each of the resources (energy, water, hydrogen, oxygen, etc.), the combined emergy–pinch analysis provides wide range of benefits boosted with extra inside and design guidelines improving the integration of processes and the ability to consider the ‘past’ and the ‘future’ of the resources (the effort of making them available and the effort of minimising their environmental impact). The paper presents the theoretical background of the emergy and pinch combination into general resources management technique and proves this concept on classical emergy and pinch examples accompanied with a combined resources management industrial problem considering the environmental impact of industrial activities.","URL":"http://www.sciencedirect.com/science/article/pii/S0360544205002252","DOI":"10.1016/j.energy.2005.10.021","ISSN":"0360-5442","journalAbbreviation":"Energy","author":[{"family":"Zhelev","given":"T. K."},{"family":"Ridolfi","given":"R."}],"issued":{"date-parts":[["2006",10]]},"accessed":{"date-parts":[["2015",12,15]]}}},{"key":"http://zotero.org/users/39885/items/W23DTI5G","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W23DTI5G","type":"book","title":"Handbook of Ecosystem Theories and Management","publisher":"CRC Press","number-of-pages":"604","source":"Google Books","abstract":"As part of the Environmental and Ecological Modeling Handbooks series, the Handbook of Ecosystem Theories and Management provides a comprehensive overview of ecosystem theory and the tools - ecological engineering, ecological modeling, ecotoxicology and ecological economics -to manage these systems.  The book is laid out to provide a summary or survey of each topic, using many tables and figures. Concepts, definitions, important findings, basic hypotheses, important correlations between theories and observation with illustrative graphs are included.  The comprehensive treatment of ecosystem theory and application of theoretical tools, and the integration of classical theory and real world examples, sets this book apart. It covers newly emerging topical areas as well as nontraditional topical areas (i.e. chaos) that will interest professionals trained in previous decades and enlighten those now entering into formal training. The general approach taken by the authors makes this an essential reference and handbook for professionals and students.","ISBN":"978-1-56670-253-9","language":"en","author":[{"family":"Muller","given":"Felix"}],"issued":{"date-parts":[["2000",2,10]]}}},{"key":"http://zotero.org/users/39885/items/W3DACGSI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W3DACGSI","type":"article-journal","title":"Resource quality, technological efficiency and factors of scale within the emergy framework: A response to Marco Raugei","container-title":"Ecological Modelling","page":"109-111","volume":"227","source":"ScienceDirect","URL":"http://www.sciencedirect.com/science/article/pii/S0304380011005862","DOI":"10.1016/j.ecolmodel.2011.12.004","ISSN":"0304-3800","shortTitle":"Resource quality, technological efficiency and factors of scale within the emergy framework","journalAbbreviation":"Ecological Modelling","author":[{"family":"Ulgiati","given":"Sergio"},{"family":"Brown","given":"Mark T."}],"issued":{"date-parts":[["2012",2,24]]},"accessed":{"date-parts":[["2015",12,30]]}}},{"key":"http://zotero.org/users/39885/items/W3W95AH9","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W3W95AH9","type":"book","title":"Engines of Logic: Mathematicians and the Origin of the Computer","publisher":"WW Norton & Co., Inc.","source":"Google Scholar","URL":"http://dl.acm.org/citation.cfm?id=601168","shortTitle":"Engines of Logic","author":[{"family":"Davis","given":"Martin"}],"issued":{"date-parts":[["2001"]]},"accessed":{"date-parts":[["2016",3,5]]}}},{"key":"http://zotero.org/users/39885/items/W4MV6S57","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W4MV6S57","type":"article-journal","title":"Cycling emergy: computing emergy in trophic networks","container-title":"Ecological Modelling","collection-title":"Emergy Synthesis 8 ∼ Emergy and Environmental Accounting: Theories, Applications, and Methodologies","page":"37-45","volume":"315","source":"ScienceDirect","abstract":"While cycles are a very important phenomena of ecosystems, they represent a methodological challenge in emergy accounting. The relevance of feedbacks is acknowledged in emergy evaluations, however they are not considered by the emergy algebra. In this paper, we present supporting arguments in favor of an update in the emergy accounting methodology. We argue that including the contribution of feedback emergy is essential to understand a system's internal functioning, thus studies interested in better capturing these features should consider emergy cycling. Feedbacks represent emergy that entered the system in the past (therefore it is not double counting), and they enable additional organization and work above that supported by input emergy alone.\n\nTo evaluate the effect upon system properties of including feedbacks, we compared two different methods for calculating transformities using trophic networks as case studies. One method followed the classic emergy rules where feedbacks were not included, and the other included the feedbacks (we refer to them as static and network method, respectively). The comparison between the resulting transformities and system emergy patterns showed that (1) transformities and system emergy were significantly higher with the network method, and (2) this increase affected the network compartments unevenly, altering their position in the emergy hierarchy. Estimating relative importance of the system's components or their true emergy requirements are only possible by evaluating the total emergy that flows through them.","URL":"http://www.sciencedirect.com/science/article/pii/S0304380015000757","DOI":"10.1016/j.ecolmodel.2015.02.019","ISSN":"0304-3800","shortTitle":"Cycling emergy","journalAbbreviation":"Ecological Modelling","author":[{"family":"Zarbá","given":"Lucía"},{"family":"Brown","given":"Mark T."}],"issued":{"date-parts":[["2015",11,10]]},"accessed":{"date-parts":[["2015",12,15]]}}},{"key":"http://zotero.org/users/39885/items/W4SC3CDW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W4SC3CDW","type":"book","title":"Matter and Form in Early Modern Science and Philosophy","publisher":"BRILL","number-of-pages":"259","source":"Google Books","abstract":"Matter and form have been fundamental principles in natural science since Greek Antiquity and their apparent rejection during the seventeenth century typically has been described as a precursor to the emergence of modern science. This volume reconsiders the fate of these principles and the complex history of their reception. By analyzing work being done in physics, chemistry, theology, physiology, psychology, and metaphysics, and by considering questions about change, identity, and causation, the contributors show precisely how matter and form entered into early modern science and philosophy. The result is our best picture to date of the diverse reception of matter and form among the innovators of the early modern period.","ISBN":"90-04-21870-X","language":"en","author":[{"family":"Manning","given":"Gideon"}],"issued":{"date-parts":[["2012",6,22]]}}},{"key":"http://zotero.org/users/39885/items/W4V7RTUF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W4V7RTUF","type":"article-journal","title":"Integrated emergy, energy and economic evaluation of rice and vegetable production systems in alluvial paddy fields: Implications for agricultural policy in China","container-title":"Journal of Environmental Management","page":"2727-2735","volume":"91","issue":"12","source":"ScienceDirect","abstract":"China is the largest rice producing and consuming country in the world, but rice production has given way to the production of vegetables during the past twenty years. The government has been trying to stop this land-use conversion and increase the area in rice-vegetable rotation. Important questions that must be answered to determine what strategy is best for society are, \"What is the reason behind this conversion?\"; \"Which system is more productive and which is more sustainable?\"; and \"How can economic policy be used to adjust the pattern of farmland use to attain sustainable development?\" To answer these questions, a combined evaluation of these agricultural production systems was done using emergy, energy and economic methods. An economic analysis clearly showed that the reason for this conversion was simply that the economic output/input ratio and the benefit density of the vegetable production system were greater than that of rice. However, both energy and emergy evaluations showed that long-term rice was the best choice for sustainable development, followed by rotation systems. The current price of rice is lower than the em-value of rice produced from the long-term rice system, but higher than that of rice produced from the rotation system. Scenario analysis showed that if the government increases the price of rice to the em-value of rice produced from the long-term rice system, US$0.4/kg, and takes the value of soil organic matter into account, the economic output/input ratios of both the rice and rotation systems will be higher than that of the vegetable system. The three methods, energy, emergy and economics, are different but complementary, each revealing a different aspect of the same system. Their combined use shows not only the reasons behind a system's current state or condition, but also the way to adjust these systems to move toward more sustainable states.","URL":"http://www.sciencedirect.com.ezproxy.lib.rmit.edu.au/science/article/B6WJ7-50RMPRR-5/2/49d431952717cb78ed48e6742786cd61","DOI":"10.1016/j.jenvman.2010.07.025","ISSN":"0301-4797","shortTitle":"Integrated emergy, energy and economic evaluation of rice and vegetable production systems in alluvial paddy fields","author":[{"family":"Lu","given":"Hongfang"},{"family":"Bai","given":"Yu"},{"family":"Ren","given":"Hai"},{"family":"Campbell","given":"Daniel E."}],"issued":{"date-parts":[["2010",12]]},"accessed":{"date-parts":[["2010",12,14]]}}},{"key":"http://zotero.org/users/39885/items/W65VZ96M","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W65VZ96M","type":"article-journal","title":"Dam Risk Analysis Using Bayesian Networks","container-title":"Geohazards","URL":"http://dc.engconfintl.org/geohazards/10","author":[{"family":"Smith","given":"Marc"}],"issued":{"date-parts":[["2006",6,18]]}}},{"key":"http://zotero.org/users/39885/items/W6QKTCEP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W6QKTCEP","type":"article-journal","title":"Reciprocal aspects of transient and steady-state concepts","container-title":"Electrical Engineering","page":"319-321","volume":"69","issue":"4","source":"IEEE Xplore","abstract":"IT IS well known that the transient response of a network can be specified completely in terms of its steady-state behavior and vice versa. This is one of the most significant interpretations attached to the Fourier and Laplace transformations as applied to the study of electric networks. Actually, the steady-state and transient concepts are regarded as alternative viewpoints of network behavior as expressed in the frequency and time domains respectively.","DOI":"10.1109/EE.1950.6433781","ISSN":"0095-9197","author":[{"family":"Kessler","given":"W. J."}],"issued":{"date-parts":[["1950",4]]}}},{"key":"http://zotero.org/users/39885/items/W75MCVMU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W75MCVMU","type":"book","title":"Systems Engineering Principles and Practice","publisher":"Wiley-Interscience","ISBN":"0-471-23443-5","call-number":"0074","author":[{"family":"Kossiakoff","given":"Alexander"},{"family":"Sweet","given":"William N."}],"issued":{"date-parts":[["2002",12,2]]}}},{"key":"http://zotero.org/users/39885/items/W785VFRH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W785VFRH","type":"book","title":"THE NATURE AND VALIDITY OF THE PRINCIPLE OF LEAST ACTION","publisher":"The Monist","number-of-pages":"18","source":"Internet Archive","abstract":"\"THE NATURE AND VALIDITY OF THE PRINCIPLE OF LEAST ACTION\" is an article from The Monist, Volume 23. View more articles from The Monist.\nView this article on JSTOR.\nView this article's JSTOR metadata.\nYou may also retrieve all of this items metadata in JSON at the following URL: https://archive.org/metadata/jstor-27900429","URL":"http://archive.org/details/jstor-27900429","language":"eng","author":[{"family":"Jourdain","given":"Philip E. B."}],"issued":{"date-parts":[["1913",4,1]]},"accessed":{"date-parts":[["2016",1,15]]}}},{"key":"http://zotero.org/users/39885/items/W8JAZ5W4","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W8JAZ5W4","type":"article-journal","title":"Cosmological Foundations of Consciousness","container-title":"Journal of Consciousness Exploration & Research","volume":"3","issue":"1","source":"jcer.com","abstract":"How the biological brain generates subjective consciousness remains the principal abyss in the scientific description of reality, a problem complementary to the cosmological theory of everything, and equally as challenging, because it takes the scientific model beyond the confines of objective reality. This paper examines the cosmological basis of consciousness and subjective experience in biological organisms. It draws on principles of symmetry-breaking and interactive non-linear dynamics to establish the cosmological status of biogenesis, and biological tissues as fractal forms of interactive symmetry-breaking. It then investigates the Archaean genetic expansion as a source of the envelope of functional machinery forming the basis of neural activity, based on the universal excitability of all living cells. Finally it examines the biophysical basis for consciousness, both in single cells, and in the human brain and its ‘Cartesian theatre’ of consciousness, to elucidate cosmological principles underlying the mind-body relationship.","URL":"http://jcer.com/index.php/jcj/article/view/197","ISSN":"2153-8212","language":"en","author":[{"family":"King","given":"Chris"}],"issued":{"date-parts":[["2012",1,31]]},"accessed":{"date-parts":[["2016",2,20]]}}},{"key":"http://zotero.org/users/39885/items/W8UP3TQD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/W8UP3TQD","type":"thesis","title":"A computational framework for dam safety risk assessment with uncertainty analysis","publisher":"Utah State University","publisher-place":"United States -- Utah","number-of-pages":"158","genre":"Ph.D.","source":"ProQuest","event-place":"United States -- Utah","abstract":"The growing application of risk analysis in dam safety, especially for the owners of large numbers of dams (e.g., U.S. Army Corps of Engineers), has motivated the development of a new tool (DAMRAE) for event tree based dam safety risk analysis. Various theoretical challenges were overcome in formulating the computational framework of DAMRAE and several new computational concepts were introduced. The concepts of Connectivity and Pedigree matrices are proposed to quantify the user-drawn event tree structures with proper accounting of interdependencies among the event tree branches. A generic calculation of Common-Cause Adjustment for the non-mutually exclusive failure modes is implemented along with introducing the new concepts of system response probability and consequence freezing. New output presentation formats such as cumulative risk estimate vs. initiating variable plots to analyze the increase of an incremental (annualized) risk estimate as a function of initiating variable are introduced. An additional consideration is given to the non-breach risk estimates in the risk modeling and new output formats such as non-breach F-N and F-$ charts are included as risk analysis outputs.\nDAMRAE, a Visual Basic.NET based framework, provides a convenient platform to structure the risk assessment of a dam in its existing state and for alternatives or various stages of implementing a risk reduction plan. The second chapter of the dissertation presents the architectural framework of DAMRAE and describes the underlying theoretical and computational logic employed in the software. An example risk assessment is presented in the third chapter to demonstrate the DAMRAE functionalities.\nIn the fourth chapter, the DAMRAE framework is extended into DAMRAE-U to incorporate uncertainty analysis functionality. Various aspects and requirements reviewed for uncertainty analysis in the context of dam safety risk assessment and theoretical challenges overcome to develop the computational framework for DAMRAE-U are described in this chapter. The capabilities of DAMRAE-U are illustrated in the fifth chapter, which contains an example dam safety risk assessment with uncertainty analysis. The dissertation concludes with a summary of DAMRAE features and recommendations for further work in the sixth chapter.","URL":"http://search.proquest.com.ezproxy.library.uq.edu.au/docview/1347669301/abstract/3E542058AD4B4BFFPQ/1?accountid=14723","language":"English","author":[{"family":"Srivastava","given":"Anruag"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",3,20]]}}},{"key":"http://zotero.org/users/39885/items/WAGT62P3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WAGT62P3","type":"article-journal","title":"The emergence and use of diagramming in system dynamics: a critical account","container-title":"Systems Research and Behavioral Science","page":"3-23","volume":"25","issue":"1","abstract":"The paper reviews the leading diagramming methods employed in system dynamics to communicate the contents of models. The main ideas and historical development of the field are first outlined. Two diagramming methods�-�causal loop diagrams (CLDs) and stock/flow diagrams (SFDs)�-�are then described and their advantages and limitations discussed. A set of broad research directions is then outlined. These concern: the abilities of different diagrams to communicate different ideas, the role that diagrams have in group model building, and the question of whether diagrams can be an adequate substitute for simulation modelling. The paper closes by suggesting that although diagrams alone are insufficient, they have many benefits. However, since these benefits have emerged only as lsquocraft wisdomrsquo, a more rigorous programme of research into the diagrams' respective attributes is called for. Copyright � 2008 John Wiley & Sons, Ltd.","URL":"http://dx.doi.org/10.1002/sres.826","DOI":"10.1002/sres.826","call-number":"0012","shortTitle":"The emergence and use of diagramming in system dynamics","author":[{"family":"Lane","given":"David C."}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2008",7,10]]}}},{"key":"http://zotero.org/users/39885/items/WBAASCKC","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WBAASCKC","type":"article-journal","title":"The theory of unequal ecological exchange: a Marx-Odum dialectic","container-title":"The Journal of Peasant Studies","page":"199-233","volume":"41","issue":"2","source":"Taylor and Francis+NEJM","abstract":"A world-system analysis of the ecological rift generated by capitalism requires as one of its elements a developed theory of the unequal ecological exchange between center and periphery. After reviewing the literature on unequal exchange (both economic and ecological) from Ricardo and Marx to the present, a new approach is provided, based on a critical appropriation of systems ecologist Howard Odum's emergy (spelled with an m) analysis. Odum's contribution offers key elements of a wider dialectical synthesis, made possible in part by his intensive studies of Marx's political-economic critique of capitalism and by Marx's own theory of metabolic rift.","URL":"http://dx.doi.org/10.1080/03066150.2014.889687","DOI":"10.1080/03066150.2014.889687","ISSN":"0306-6150","shortTitle":"The theory of unequal ecological exchange","author":[{"family":"Foster","given":"John Bellamy"},{"family":"Holleman","given":"Hannah"}],"issued":{"date-parts":[["2014",3,4]]},"accessed":{"date-parts":[["2015",2,20]]}}},{"key":"http://zotero.org/users/39885/items/WBB9VB78","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WBB9VB78","type":"article-journal","title":"Towards an SSM toolkit: rich picture diagramming","container-title":"European Journal of Information Systems","page":"397-408","volume":"1","issue":"6","source":"CrossRef","URL":"http://www.palgrave-journals.com/doifinder/10.1057/ejis.1992.17","DOI":"10.1057/ejis.1992.17","ISSN":"0960-085X","shortTitle":"Towards an SSM toolkit","journalAbbreviation":"Eur J Inf Syst","author":[{"family":"Avison","given":"D. E."},{"family":"Golder","given":"P. A."},{"family":"Shah","given":"H. U."}],"issued":{"date-parts":[["1992",9]]},"accessed":{"date-parts":[["2011",7,4]]}}},{"key":"http://zotero.org/users/39885/items/WCZQWENJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WCZQWENJ","type":"article-journal","title":"The theory of power and efficiency in ecology","container-title":"Ecological Modelling","page":"159-164","volume":"15","issue":"2","source":"ScienceDirect","abstract":"Some previous work on the theory of power and optimal efficiency in ecology is shown to be either incorrect or of limited applicability. The standard analysis based on Atwood's machine is not valid, and the optimal efficiency for maximum power production depends on the characteristics of the individual system. For optimally foraging aquatic organisms the theoretical efficiency is less than 50% when the hydrodynamic flow is laminar, but under turbulent conditions the optimal efficiency can rise as high as 67%. Despite these restrictions it still appears plausible that ecological efficiency should be the same for broad classes of living organisms.","URL":"http://www.sciencedirect.com/science/article/pii/030438008290059X","DOI":"10.1016/0304-3800(82)90059-X","ISSN":"0304-3800","journalAbbreviation":"Ecological Modelling","author":[{"family":"Silvert","given":"William"}],"issued":{"date-parts":[["1982",3]]},"accessed":{"date-parts":[["2015",11,8]]}}},{"key":"http://zotero.org/users/39885/items/WDSXJHKH","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WDSXJHKH","type":"article-journal","title":"Integrating ecosystem services into risk management decisions: Case study with Spanish citrus and the insecticide chlorpyrifos","container-title":"Science of The Total Environment","page":"732-739","volume":"505","source":"ScienceDirect","abstract":"The European regulatory system for the approval of pesticides includes a thorough evaluation of risks to the environment and is designed to be protective of ecosystems. However, a decision to ban an agrochemical could also potentially have a negative impact on the value of ecosystem services, if resulting changes in crop management are damaging to ecosystems or result in negative socio-economic impacts. To support regulatory decision-making, consideration of ecosystem services to identify best environmental management options could be a way forward. There is generally a growing trend for the consideration of ecosystem services in decision making. Ecosystems provide the conditions for growing food, regulate water and provide wildlife habitats; these, amongst others, are known as ecosystem services.\n\nThe objectives of this case study were to bring a holistic approach to decision making by valuing the environmental, social and economic benefits derived from the use of chlorpyrifos in Valencian citrus production. Spanish growers harvest between 5 and 6 million t of citrus annually, worth an estimated €5 to 7 billion in food markets throughout Europe. The approach highlighted the potential for unintended negative consequences of regulatory decisions if the full context is not considered. In this study, rather than a regulatory restriction, the best option was the continued use of chlorpyrifos together with vegetated conservation patches as refuges for non-target insects. The conservation patches offset potential insecticidal impacts to insects whilst maintaining citrus production, farm income and the amenity value of the citrus landscape of Valencia. This was an initial proof-of-concept study and illustrates the importance of a wider perspective; other cases may have different outcomes depending on policies, the pesticide, crop scenarios, farm economics and the region.","URL":"http://www.sciencedirect.com/science/article/pii/S0048969714014727","DOI":"10.1016/j.scitotenv.2014.10.034","ISSN":"0048-9697","shortTitle":"Integrating ecosystem services into risk management decisions","journalAbbreviation":"Science of The Total Environment","author":[{"family":"Deacon","given":"Samantha"},{"family":"Norman","given":"Steve"},{"family":"Nicolette","given":"Joseph"},{"family":"Reub","given":"Gregory"},{"family":"Greene","given":"Gretchen"},{"family":"Osborn","given":"Rachel"},{"family":"Andrews","given":"Paul"}],"issued":{"date-parts":[["2015",2,1]]},"accessed":{"date-parts":[["2015",8,25]]}}},{"key":"http://zotero.org/users/39885/items/WEK4HP3A","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WEK4HP3A","type":"article-journal","title":"Coal Seam Gas: Issues for Consideration in the Illawarra Region, NSW, Australia","source":"Google Scholar","URL":"http://ro.uow.edu.au/thsci/45/","shortTitle":"Coal Seam Gas","author":[{"family":"Stammers","given":"Joe"}],"issued":{"date-parts":[["2012"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/WGFK2D6D","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WGFK2D6D","type":"paper-conference","title":"Hydroinformatics: Interoperability, standards and governance of water information infrastructures","container-title":"Proceedings of the WIRADA Science Symposium","page":"120–124","source":"Google Scholar","shortTitle":"Hydroinformatics","author":[{"family":"Denzer","given":"R."}],"issued":{"date-parts":[["2012"]]}}},{"key":"http://zotero.org/users/39885/items/WGVZ75PA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WGVZ75PA","type":"book","title":"Systems Thinkers","publisher":"Springer","edition":"x, 316 p.","source":"Amazon.com","ISBN":"1-84882-524-2","author":[{"family":"Ramage","given":"Magnus"},{"family":"Shipp","given":"Karen"}],"issued":{"date-parts":[["2009",9,18]]}}},{"key":"http://zotero.org/users/39885/items/WHFENT6Z","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WHFENT6Z","type":"article-journal","title":"Emergy Evaluation of Formal Education in the United States: 1870 to 2011","container-title":"Systems","page":"328-365","volume":"2","issue":"3","source":"www.mdpi.com","abstract":"We evaluated the education system of the United States from 1870 to 2011 using emergy methods. The system was partitioned into three subsystems (elementary, secondary and college/university education) and the emergy inputs required to support each subsystem were determined for every year over the period of analysis. We calculated the emergy required to produce an individual with a given number of years of education by summing over the years of support needed to attain that level of education. In 1983, the emergy per individual ranged from 8.63E+16 semj/ind. for a pre-school student to 165.9E+16 semj/ind. for a Ph.D. with 2 years of postdoctoral experience. The emergy of teaching and learning per hour spent in this process was calculated as the sum of the emergy delivered by the education and experience of the teachers and the emergy brought to the process of learning by the students. The emergy of teaching and learning was about an order of magnitude larger than the annual emergy supporting the U.S. education system (i.e., the emergy inflows provided by the environment, energy and materials, teachers, entering students, goods and services). The implication is that teaching and learning is a higher order social process related to the development and maintenance of the national information cycle. Also, the results imply that there is a 10-fold return on the emergy invested in operating the education system of the United States.","URL":"http://www.mdpi.com/2079-8954/2/3/328","DOI":"10.3390/systems2030328","shortTitle":"Emergy Evaluation of Formal Education in the United States","language":"en","author":[{"family":"Campbell","given":"Daniel E."},{"family":"Lu","given":"Hongfang"}],"issued":{"date-parts":[["2014",7,24]]},"accessed":{"date-parts":[["2016",2,24]]}}},{"key":"http://zotero.org/users/39885/items/WI2UEI2S","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WI2UEI2S","type":"article-journal","title":"Ecosystem as circuits: diagrams and the limits of physical analogies","container-title":"Biology and Philosophy","page":"275–294","volume":"6","issue":"2","source":"Google Scholar","shortTitle":"Ecosystem as circuits","author":[{"family":"Taylor","given":"P.J."},{"family":"Blum","given":"A.S."}],"issued":{"date-parts":[["1991"]]}}},{"key":"http://zotero.org/users/39885/items/WJVUWRQE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WJVUWRQE","type":"article-journal","title":"Water network optimisation in the process industry--case study of a liquid detergent plant","container-title":"Journal of Cleaner Production","page":"495-498","volume":"13","issue":"5","source":"ScienceDirect","abstract":"The main target of this research project is the optimisation of the water management in a liquid detergent production plant according to the concept for retrofit optimisation of water networks (CROWN) strategy in order to reduce freshwater consumption and the costs for wastewater disposal. A membrane process and a disinfection step are integrated into the water network in order to recycle process water and to recover concentrated product solutions.","URL":"http://www.sciencedirect.com.ezproxy.lib.rmit.edu.au/science/article/B6VFX-49WPK6C-1/2/3bdecebd5f59c83ec7b48b71fe36373e","DOI":"10.1016/j.jclepro.2003.09.002","ISSN":"0959-6526","author":[{"family":"Forstmeier","given":"M."},{"family":"Goers","given":"B."},{"family":"Wozny","given":"G."}],"issued":{"date-parts":[["2005",4]]},"accessed":{"date-parts":[["2011",3,19]]}}},{"key":"http://zotero.org/users/39885/items/WM977GW2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WM977GW2","type":"article-journal","title":"Commentary on Vandervert's “from idiots savants to Albert Einstein”","container-title":"New Ideas in Psychology","page":"93-96","volume":"14","issue":"1","source":"ScienceDirect","abstract":"Vandervert believes that his model, Neurological Positivism (NP), not only supports my position on the sources of the remarkable skills of certain calendar calculating idiots savants, but can be extended to the other end of the intellectual scale, to an Albert Einstein for example. In this paper I present further evidence in support of the concepts of NP. In addition, it is proposed that NP incorporate a concept of human variability in many different domains to take into account these extremes of ability. The evolutionary importance of many domains of ability and individual differences and interactions in these domains is discussed.","URL":"http://www.sciencedirect.com/science/article/pii/0732118X96000062","DOI":"10.1016/0732-118X(96)00006-2","ISSN":"0732-118X","journalAbbreviation":"New Ideas in Psychology","author":[{"family":"Spitz","given":"H. H."}],"issued":{"date-parts":[["1996",3]]},"accessed":{"date-parts":[["2016",2,24]]}}},{"key":"http://zotero.org/users/39885/items/WMQEM5W2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WMQEM5W2","type":"entry-encyclopedia","title":"Teleology","container-title":"Encyclopedia of the Mind","page":"735 - 737","source":"UQ Library Search, Summon 2.0","ISBN":"978-1-4522-7721-9","language":"English","author":[{"family":"Sehon","given":"Scott"}],"issued":{"date-parts":[["2013"]]}}},{"key":"http://zotero.org/users/39885/items/WQ4CPT59","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WQ4CPT59","type":"article-journal","title":"Global risk governance","container-title":"Concept and practice using the IRGC framework. Dordrecht","source":"Google Scholar","URL":"http://link.springer.com/content/pdf/10.1007/978-1-4020-6799-0.pdf","author":[{"family":"Renn","given":"Ortwin"},{"family":"Walker","given":"K."}],"issued":{"date-parts":[["2008"]]},"accessed":{"date-parts":[["2015",8,27]]}}},{"key":"http://zotero.org/users/39885/items/WQ4QINRM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WQ4QINRM","type":"book","title":"Principles of physics","publisher":"Saunders College Pub.","publisher-place":"Fort Worth","edition":"2nd ed.","event-place":"Fort Worth","ISBN":"978-0-03-020457-9","author":[{"family":"Serway","given":"Raymond"}],"issued":{"date-parts":[["1998"]]}}},{"key":"http://zotero.org/users/39885/items/WQSQ9C2E","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WQSQ9C2E","type":"thesis","title":"Pulsing and self-organization","publisher":"University of Florida","publisher-place":"United States -- Florida","event-place":"United States -- Florida","abstract":"This dissertation investigated systems designs to account for the pulsing paradigm, a general systems concept, that states that self-organization increases performance by accumulating storages, which are transferred to a higher consumer level in the energy hierarchy and fed back in sharp repeating pulses. Similar pulsing patterns were found in published data from many fields, and graphical analyses were made of published time series of plankton data of limnology and oceanography. Although the data appeared to be noisy and irregular, pulse amplitude was proportional to the time interval between pulses of similar size. Small-scale pulses were more frequent. Larger scale pulses delivered their effects in shorter time periods relative to their intervals. Such patterns may be explained as the result of simultaneous pulsing on several scales.                 After review of simulation models by other investigators, alternative systems designs were simulated including a single simple producer-consumer-recycle model and compound combinations. Designs which generated time series like those observed in many fields were analyzed for their energy characteristics.                 Simulation of the emergy (spelled with an \"m\"; the available energy of one kind required to make a product) flows and storages showed pulses to be high transformity, a hypothetical measure of feedback impact. Whereas the model with a single pulsing pair unit (e.g. consumer-resource unit) did not generate pulsing patterns when energy input was very low or very high, compound designs allowed excess input energy to be routed to the productivity of other pulsing units. The model with two producer-consumer-recycle units connected in parallel pulsed over a wide range of input energy levels and efficiencies. A hierarchy of pulses of different frequency was obtained when producer-consumer-recycle models were connected in series, with more frequent pulses in lower energy levels. The pulsing producer-consumer unit drew more power than a non-pulsing producer-consumer unit with similar calibrations. The theory that self-organization selects pulsing which increases performance of complex systems was compared with other theories for pulsing in various fields including economics and earth science.                 The pulsing paradigm explains fluctuations observed in systems as the concurrent dynamic pulsing on many scales.","URL":"http://search.proquest.com/docview/304425129?accountid=13552","note":"Ph.D.; University of Florida","author":[{"family":"Kang","given":"Daeseok"}],"issued":{"date-parts":[["1998"]]}}},{"key":"http://zotero.org/users/39885/items/WR5DTISQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WR5DTISQ","type":"article-journal","title":"The Trade-Off between Risk and Control in Corporate Ownership","container-title":"Journal of Institutional and Theoretical Economics (JITE) / Zeitschrift für die gesamte Staatswissenschaft","page":"252-274","volume":"160","issue":"2","source":"JSTOR","abstract":"This paper analyses the risk-control trade-off in corporate ownership. It presents a simple model in which large shareholders decide their share depending on their risk aversion, risk-neutral effects attached to firm size, and the effectiveness of different (external and internal) mechanisms for controlling managers' behaviour. Two institutional settings in which the expected benefits from control appear to overcome risk aspects are explored: the U.S. at the turn of the twentieth century and Spain in the 1990s. The empirical evidence seems to support the predictions of the model regarding the relationship between ownership concentration, the characteristics of governance, and the size of the firm.","URL":"http://www.jstor.org/stable/40752457","ISSN":"0932-4569","journalAbbreviation":"Journal of Institutional and Theoretical Economics (JITE) / Zeitschrift für die gesamte Staatswissenschaft","author":[{"family":"Manjón","given":"Miguel C."}],"issued":{"date-parts":[["2004",6,1]]},"accessed":{"date-parts":[["2015",3,17]]}}},{"key":"http://zotero.org/users/39885/items/WS22H5AK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WS22H5AK","type":"book","title":"Mathematische Schriften. Hrsg. von C.I. Gerhardt","publisher":"Berlin A. Asher","number-of-pages":"556","source":"Internet Archive","abstract":"14","URL":"http://archive.org/details/mathematischesch04leibuoft","call-number":"AGB-4884","language":"ger","author":[{"family":"Leibniz","given":"Gottfried Wilhelm"},{"family":"Gerhardt","given":"Karl Immanuel"}],"issued":{"date-parts":[["1863"]]},"accessed":{"date-parts":[["2016",2,1]]}}},{"key":"http://zotero.org/users/39885/items/WU4U34G6","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WU4U34G6","type":"book","title":"Dictionary of philosophy","publisher":"Barnes & Noble Books","publisher-place":"New York","edition":"1st ed.","event-place":"New York","ISBN":"978-0-06-463461-8","call-number":"0043","author":[{"family":"Angeles","given":"Peter"}],"issued":{"date-parts":[["1981"]]}}},{"key":"http://zotero.org/users/39885/items/WWTG33PK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WWTG33PK","type":"article-journal","title":"Natural Selection as a Physical Principle","container-title":"Proceedings of the National Academy of Sciences of the United States of America","page":"151-154","volume":"8","issue":"6","URL":"http://www.pubmedcentral.nih.gov/picrender.fcgi?artid=1085053&blobtype=pdf","call-number":"0080","author":[{"family":"Lotka","given":"A. J."}],"issued":{"date-parts":[["1922"]]}}},{"key":"http://zotero.org/users/39885/items/WWUBXKHM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WWUBXKHM","type":"article-journal","title":"Unconjugated bilirubin activates and damages microglia","container-title":"Journal of Neuroscience Research","page":"194-201","volume":"84","issue":"1","abstract":"Microglia are the resident immune cells of the brain and are the principal source of cytokines produced during central nervous system inflammation. We have previously shown that increased levels of unconjugated bilirubin (UCB), which can be detrimental to the central nervous system during neonatal life, induce the secretion of inflammatory cytokines and glutamate by astrocytes. Nevertheless, the effect of UCB on microglia has never been investigated. Hence, the main goal of the present study was to evaluate whether UCB leads to microglial activation and to the release of the cytokines tumor necrosis factor (TNF)-alpha, interleukin (IL)-1beta, and IL-6. Additionally, we investigated the effects of UCB on glutamate efflux and cell death. The results showed that UCB induces morphological changes characteristic of activated microglia and the release of high levels of TNF-alpha, IL-1beta, and IL-6 in a concentration-dependent manner. In addition, UCB triggered extracellular accumulation of glutamate and an increased cell death by apoptosis and necrosis. These results demonstrate, for the first time, that UCB is toxic to microglial cells and point to microglia as an important target of UCB in the central nervous system. Moreover, they suggest that UCB-induced cytokine production, by mediating cell injury, can further contribute to exacerbate neurototoxicity. Interestingly, microglia cells are much more responsive to UCB than astrocytes. Collectively, these data indicate that microglia may play an important role in the pathogenesis of encephalopathy during severe hyperbilirubinemia. � 2006 Wiley-Liss, Inc.","URL":"http://dx.doi.org/10.1002/jnr.20857","DOI":"10.1002/jnr.20857","call-number":"0010","author":[{"family":"Gordo","given":"Ana C."},{"family":"Falc�o","given":"Ana S."},{"family":"Fernandes","given":"Adelaide"},{"family":"Brito","given":"Maria A."},{"family":"Silva","given":"Rui F.M."},{"family":"Brites","given":"Dora"}],"issued":{"date-parts":[["2006"]]},"accessed":{"date-parts":[["2009",6,10]]}}},{"key":"http://zotero.org/users/39885/items/WZAKEVGB","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WZAKEVGB","type":"article-journal","title":"Probability of second law violations in nonequilibrium steady states","container-title":"[[Physical Review Letters]]","page":"2401&ndash;2404","volume":"71","call-number":"0000","author":[{"family":"Denis J. Evans","given":"E. G.D. Cohen & G.P. Morriss"}],"issued":{"date-parts":[["1993"]]}}},{"key":"http://zotero.org/users/39885/items/WZBBXSXQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WZBBXSXQ","type":"article-journal","title":"Leibniz and Ecology","container-title":"History of Philosophy Quarterly","page":"239-258","volume":"18","issue":"3","source":"JSTOR","URL":"http://www.jstor.org/stable/27744888","ISSN":"0740-0675","journalAbbreviation":"History of Philosophy Quarterly","author":[{"family":"Phemister","given":"Pauline"}],"issued":{"date-parts":[["2001"]]},"accessed":{"date-parts":[["2016",1,31]]}}},{"key":"http://zotero.org/users/39885/items/WZNX7FG3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/WZNX7FG3","type":"chapter","title":"Emergy policies for a new world order","container-title":"Energy and Environment; A question of Survival","publisher":"Verlag Stiftsdruckerei","publisher-place":"Switzerland","event-place":"Switzerland","call-number":"0000","author":[{"family":"Odum","given":"Howard T"}],"issued":{"date-parts":[["1995"]]}}},{"key":"http://zotero.org/users/39885/items/X2DAVTRK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/X2DAVTRK","type":"article-journal","title":"View Consistency in Architectures for Cyber-Physical Systems","container-title":"Proc. of SecondInternational Conference on Cyber-Physical Systems","author":[{"family":"Bhave","given":"A"},{"family":"Krogh","given":"B"},{"family":"Garlan","given":"D"},{"family":"Schmerl","given":"B"}],"issued":{"date-parts":[["2011"]]}}},{"key":"http://zotero.org/users/39885/items/X4AHT8N2","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/X4AHT8N2","type":"article-journal","title":"The Sensor Web: systems of sensor systems","container-title":"International Journal of Digital Earth","page":"16-30","volume":"2","source":"CrossRef","URL":"http://www.tandfonline.com/doi/abs/10.1080/17538940802439549","DOI":"10.1080/17538940802439549","ISSN":"1753-8947, 1753-8955","shortTitle":"The Sensor Web","author":[{"family":"Zyl","given":"T. L.","dropping-particle":"van"},{"family":"Simonis","given":"I."},{"family":"McFerren","given":"G."}],"issued":{"date-parts":[["2009",3]]},"accessed":{"date-parts":[["2011",9,11]]}}},{"key":"http://zotero.org/users/39885/items/X4SRW4US","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/X4SRW4US","type":"article-journal","title":"Proposal for Including What Is Valuable to Ecosystems in Environmental Assessments","container-title":"Environmental Science & Technology","page":"2867-2873","volume":"35","issue":"14","source":"ACS Publications","abstract":"Assessment scientists and managers depend on social values to identify the goals that will be used to guide environmental assessments. These goals are commonly identified by examining the vested interests of the various social groups that are stakeholders in a region. However, knowledge about what people value represents only part of the information needed to identify comprehensive assessment goals for environmental systems that include both economic and ecological components and processes. All parties also need to understand what is valuable to ecosystems because that determines the ecological patterns and processes that prevail in the long run. The competition among alternate system designs for available energy determines the viability of the choices that people make for their environment. Ecosystems that prevail in competition use the process of self-organization to create system designs that maximize the use of ever-changing sources of available energy. The efficacy of ecosystem designs can be evaluated using the maximum empower principle, which states that ecosystems evolve toward designs that maximize empower (emergy use per unit time). Emergy is an accounting quantity that normalizes the different kinds of energy developed in a system so that they may be compared. The counter-intuitive and sometimes controversial results that come from emergy analyses are illustrated by examining three environmental problems on the interface between ecology and economics. A process for identifying and using social and ecosystem values to guide environmental assessments is proposed using a conceptual energy systems model that shows how these processes might interact within a region. The probability of realizing a given change in system empower production is suggested as a decision criterion that can be used by managers to evaluate the efficacy of alternatives.","URL":"http://dx.doi.org/10.1021/es001818n","DOI":"10.1021/es001818n","ISSN":"0013-936X","journalAbbreviation":"Environ. Sci. Technol.","author":[{"family":"Campbell","given":"Daniel E."}],"issued":{"date-parts":[["2001",7,1]]},"accessed":{"date-parts":[["2015",12,9]]}}},{"key":"http://zotero.org/users/39885/items/X5CIVV77","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/X5CIVV77","type":"article-journal","title":"The early history of modern ecological economics","container-title":"Ecological Economics","page":"293-314","volume":"50","issue":"3–4","source":"ScienceDirect","abstract":"This paper provides a historical perspective for the discussion on ecological economics as a special field of research. By studying the historical background of ecological economics, the present discussions and tensions inside the field might become easier to understand and to relate to. The study is inspired by other studies of the emergence of new research areas done by sociologists and historians of science, and includes both cognitive and social aspects, macro trends and the role of individuals. The basis for the paper is a combination of literature studies and interviews with key researchers from the field. The story opens with the emergence of the new environmental agenda in the 1960s, which was influenced by the scientific development in biology and ecology. Then it is outlined how the environmental challenge was met by economics in the 1960s. Around 1970, the basic ideas of ecological economics were given modern formulations, but it took a long gestation period from the beginning of the 1970s to the end of the 1980s, before ecological economics took shape. During this gestation period, the personal relationships between the actors were formed, and the meetings that were decisive for the formal establishment of ecological economics took place.","URL":"http://www.sciencedirect.com/science/article/pii/S0921800904002058","DOI":"10.1016/j.ecolecon.2004.02.012","ISSN":"0921-8009","journalAbbreviation":"Ecological Economics","author":[{"family":"Røpke","given":"Inge"}],"issued":{"date-parts":[["2004",10,1]]},"accessed":{"date-parts":[["2015",2,8]]}}},{"key":"http://zotero.org/users/39885/items/X6E48WVQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/X6E48WVQ","type":"article","title":"Coal Seam Gas Regulatory Review - Fact Sheet","publisher":"Queensland Competition Authority","URL":"http://www.qca.org.au/getattachment/44349536-31a6-4502-ace6-1967bf53a326/Fact-Sheet.aspx","author":[{"family":"QCA","given":""}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",9,12]]}}},{"key":"http://zotero.org/users/39885/items/X7Z3E6CT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/X7Z3E6CT","type":"book","title":"Invisible cities","publisher":"Vintage","publisher-place":"London","event-place":"London","ISBN":"978-0-7493-9764-7","call-number":"0497","author":[{"family":"Calvino","given":"Italo"}],"issued":{"date-parts":[["1997"]]}}},{"key":"http://zotero.org/users/39885/items/X86VKMQD","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/X86VKMQD","type":"article-journal","title":"Using Dynamic Modeling to Scope Environmental Problems and Build Consensus","container-title":"Environmental Management","page":"183-195","volume":"22","issue":"2","source":"link.springer.com.ezproxy.library.uq.edu.au","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/article/10.1007/s002679900095","DOI":"10.1007/s002679900095","ISSN":"0364-152X, 1432-1009","journalAbbreviation":"Environmental Management","language":"en","author":[{"family":"Costanza","given":"Robert"},{"family":"Ruth","given":"Matthias"}],"issued":{"date-parts":[["1998",3]]},"accessed":{"date-parts":[["2015",10,25]]}}},{"key":"http://zotero.org/users/39885/items/X9467KZI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/X9467KZI","type":"book","title":"The evolution of physics : from early concepts to relativity and quanta","publisher":"Simon and Schuster","publisher-place":"New York","event-place":"New York","ISBN":"978-0-671-20156-2","call-number":"0147","author":[{"family":"Einstein","given":"Albert"}],"issued":{"date-parts":[["1966"]]}}},{"key":"http://zotero.org/users/39885/items/X9SWKG4Q","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/X9SWKG4Q","type":"article-journal","title":"Energy Analysis for Environmental Impact Assessment","container-title":"Journal of the Water Resources Planning and Management Division","page":"451–466","volume":"106","issue":"2","source":"Google Scholar","author":[{"family":"Wang","given":"F.C."},{"family":"Kangas","given":"P.C."},{"family":"Odum","given":"H.T."}],"issued":{"date-parts":[["1980"]]}}},{"key":"http://zotero.org/users/39885/items/XADZW2JE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XADZW2JE","type":"article-journal","title":"Systems Chemistry: Kinetic and Computational Analysis of a Nearly Exponential Organic Replicator13","container-title":"Angewandte Chemie","page":"6908-6913","volume":"117","issue":"41","abstract":"No Abstract","URL":"http://dx.doi.org/10.1002/ange.200501527","DOI":"10.1002/ange.200501527","call-number":"0000","shortTitle":"Systems Chemistry","author":[{"family":"Kindermann","given":"Maik"},{"family":"Stahl","given":"Insa"},{"family":"Reimold","given":"Malte"},{"family":"Pankau","given":"Wolf Matthias"},{"family":"Kiedrowski","given":"G�nter","dropping-particle":"von"}],"issued":{"date-parts":[["2005"]]},"accessed":{"date-parts":[["2008",8,20]]}}},{"key":"http://zotero.org/users/39885/items/XBQCW9TA","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XBQCW9TA","type":"article-journal","title":"The Analog Computer as an Aid to Stream Self-Purification Computations","container-title":"Journal (Water Pollution Control Federation)","page":"951–962","volume":"35","issue":"8","source":"Google Scholar","author":[{"family":"Cohen","given":"J. B."},{"family":"O'Connell","given":"R. L."}],"issued":{"date-parts":[["1963"]]}}},{"key":"http://zotero.org/users/39885/items/XCEUPTXV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XCEUPTXV","type":"book","title":"Man-Made Closed Ecological Systems","publisher":"CRC Press","publisher-place":"London ; New York","number-of-pages":"416","source":"Amazon.com","event-place":"London ; New York","abstract":"Man-Made Closed Ecological Systems explores the interactions between humans, microorganisms, and plants in a closed habitat, and the life support systems necessary to maintain habitability over long periods of time. Problems and approaches involved in creating closed man-made ecological systems (CMESs) from a theoretical and experimental viewpoint are given. Topics include the cultivation of bacteria, microalgae and higher plants; the use of biotechnology to support life outside the Earth's biosphere; methods for recycling air, water and food for human consumption; interactions between humans and other organisms in CMESs; and methods for intensifying the level of photosynthesis. In addition to space the authors investigate problems associated with living conditions in dangerous or difficult environmental areas on Earth such as the Arctic and Antarctica, deserts and mountains.","ISBN":"978-0-415-29998-5","language":"English","author":[{"family":"Gitelson","given":"J. I."},{"family":"Lisovsky","given":"G. M."}],"issued":{"date-parts":[["2002",12,26]]}}},{"key":"http://zotero.org/users/39885/items/XCFF3TRX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XCFF3TRX","type":"book","title":"A History of the Ecosystem Concept in Ecology: More than the Sum of the Parts","publisher":"Yale University Press","ISBN":"0-300-05546-3","call-number":"0408","shortTitle":"A History of the Ecosystem Concept in Ecology","author":[{"family":"Golley","given":"Frank B."}],"issued":{"date-parts":[["1993",12,29]]}}},{"key":"http://zotero.org/users/39885/items/XDGURC5A","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XDGURC5A","type":"article","title":"The Reactive Manifesto","URL":"http://www.reactivemanifesto.org/","author":[{"family":"Reactive","given":""}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",3,16]]}}},{"key":"http://zotero.org/users/39885/items/XF2K2S4X","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XF2K2S4X","type":"article-journal","title":"Onsager's principle: A unifying bio-theme","container-title":"Journal of Theoretical Biology","page":"171-175","volume":"136","issue":"2","abstract":"A hitherto obscure thermodynamic principle proposed by Lars Onsager in 1931 (Phys. Rev. 37, 405) serves as a parsimonious explanation for consistencies in the rates at which biochemical events occur, consistencies not explained by existing thermodynamic laws. It also provides an underlying rationale for the observation that thermodynamic systems, including living systems, are relentlessly opportunistic with respect to increasing entropy. These consistencies and this opportunism form a broadly unifying theme for biological phenomena from molecular to organismic and evolutionary levels.","URL":"http://www.sciencedirect.com/science/article/B6WMD-4KDGTGF-4/1/ffbb2e1ead065814783ec6028cb17356","DOI":"10.1016/S0022-5193(89)80223-1","call-number":"0002","shortTitle":"Onsager's principle","author":[{"family":"Morel","given":"Richard E."},{"family":"Fleck","given":"George"}],"issued":{"date-parts":[["1989",1,23]]},"accessed":{"date-parts":[["2008",7,5]]}}},{"key":"http://zotero.org/users/39885/items/XG9Z2KZK","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XG9Z2KZK","type":"article-journal","title":"The present state of the transistor and its associated circuit art","container-title":"Nuclear Instruments","page":"182-192","volume":"2","issue":"2","source":"ScienceDirect","URL":"http://www.sciencedirect.com/science/article/pii/0369643X58900744","DOI":"10.1016/0369-643X(58)90074-4","ISSN":"0369-643X","journalAbbreviation":"Nuclear Instruments","author":[{"family":"Moody","given":"N. F."}],"issued":{"date-parts":[["1958",2]]},"accessed":{"date-parts":[["2016",3,12]]}}},{"key":"http://zotero.org/users/39885/items/XGC7TWKF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XGC7TWKF","type":"article-journal","title":"Trend-preserving blending of passive and active microwave soil moisture retrievals","container-title":"Remote Sensing of Environment","page":"280-297","volume":"123","source":"CrossRef","URL":"http://web.maths.unsw.edu.au/~jasone/abstracts/evans28.html","DOI":"10.1016/j.rse.2012.03.014","ISSN":"00344257","language":"en","author":[{"family":"Liu","given":"Y.Y."},{"family":"Dorigo","given":"W.A."},{"family":"Parinussa","given":"R.M."},{"family":"Jeu","given":"R.A.M.","non-dropping-particle":"de"},{"family":"Wagner","given":"W."},{"family":"McCabe","given":"M.F."},{"family":"Evans","given":"J.P."},{"family":"Dijk","given":"A.I.J.M.","non-dropping-particle":"van"}],"issued":{"date-parts":[["2012",8]]},"accessed":{"date-parts":[["2014",4,2]]}}},{"key":"http://zotero.org/users/39885/items/XGQBIEXE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XGQBIEXE","type":"book","title":"Systems Engineering Integrated Telemetry Network Operations Manual","publisher":"Melbourne Metropolitan Board of Works","publisher-place":"Melbourne, Australia","event-place":"Melbourne, Australia","call-number":"0000","author":[{"family":"MMBW","given":""}],"issued":{"date-parts":[["1987"]]}}},{"key":"http://zotero.org/users/39885/items/XGX4THWQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XGX4THWQ","type":"article-journal","title":"Ecological Risk-O-Meter: a risk assessor and manager software tool for better decision making in ecosystems","container-title":"Environmetrics","page":"729-737","volume":"23","issue":"8","source":"Wiley Online Library","abstract":"Increased awareness of environmental issues and their effects on ecological systems and human health drive an interest in developing computational methods to reduce detrimental consequences. For example, there are concerns regarding chlorofluorocarbons and their impact on stratospheric ozone, radon and its effect on human health, coal mining and effects on habitat loss, as well as numerous other issues. However, these issues do not exist in a vacuum nor occur just one at a time. There is a need to assess social and ecological risks comprehensively and account for numerous, inter-related potential risks. Given limited funds available for addressing these issues, how can spending for purposes of environmental and ecological mitigation be optimized? What is the magnitude of overall ecological risk for a given region? Novel software, the “Ecological Risk-o-Meter”, addresses these questions and concerns. The software tool not only assesses the current environmental and ecological risks, but also takes into account potential solutions and provides guidance as to how spending can be optimized to reducing overall environmental risk. We demonstrate this new tool and show how to optimize the costs of risk reduction in recursive cycles based on feedbacks. Copyright © 2012 John Wiley & Sons, Ltd.","URL":"http://onlinelibrary.wiley.com/doi/10.1002/env.2186/abstract","DOI":"10.1002/env.2186","ISSN":"1099-095X","shortTitle":"Ecological Risk-O-Meter","journalAbbreviation":"Environmetrics","language":"en","author":[{"family":"Sahinoglu","given":"Mehmet"},{"family":"Simmons","given":"Susan J."},{"family":"Cahoon","given":"Lawrence B."},{"family":"Morton","given":"Scott"}],"issued":{"date-parts":[["2012",12,1]]},"accessed":{"date-parts":[["2015",3,13]]}}},{"key":"http://zotero.org/users/39885/items/XIQKUQVN","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XIQKUQVN","type":"article-journal","title":"The emergence of brain and mind amid chaos through maximum‐power evolution","container-title":"World Futures","page":"253-273","volume":"33","issue":"4","source":"Taylor and Francis+NEJM","abstract":"A new brain algorithm based Neurological Positivism (NP) is described that is reconcilable with emergent evolution. The maximum‐power evolution of brain and mind amid chaos is described. It is proposed that with the maximum‐power evolution of mind (a) a chaotic/fractal dynamical algorithmic isomorphy among world, brain, and mind is erected, and (b) we witness the origin of the mechanism of evolutionary epistemology—the origin of knowing energy. The maximum‐power evolution of symbols is described as resulting from features of chaos and fractal geometry. Finally, a neurological positivistic explanation of the workability of mathematics in the real world is proposed.","URL":"http://dx.doi.org/10.1080/02604027.1992.9972286","DOI":"10.1080/02604027.1992.9972286","ISSN":"0260-4027","author":[{"family":"Vandervert","given":"Larry R."}],"issued":{"date-parts":[["1992",5,1]]},"accessed":{"date-parts":[["2016",2,21]]}}},{"key":"http://zotero.org/users/39885/items/XJK8DG2M","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XJK8DG2M","type":"book","title":"The Philosophy of the enlightenment","publisher":"Princeton University Press","publisher-place":"Princeton (N.J.)","event-place":"Princeton (N.J.)","ISBN":"978-0-691-01963-5","call-number":"0687","author":[{"family":"Cassirer","given":"Ernst"}],"issued":{"date-parts":[["1979"]]}}},{"key":"http://zotero.org/users/39885/items/XK2X5R3P","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XK2X5R3P","type":"webpage","title":"Do viruses make us smarter?","URL":"http://www.lunduniversity.lu.se/article/do-viruses-make-us-smarter","author":[{"literal":"Lund University"}],"issued":{"date-parts":[["2015",12,1]]},"accessed":{"date-parts":[["2016",2,23]]}}},{"key":"http://zotero.org/users/39885/items/XMSP8EPX","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XMSP8EPX","type":"article-journal","title":"The System of Emergy Units","container-title":"International Society for the Systems Sciences","collection-title":". Ethical management of science as a system","page":"214-223","volume":"proceedings of the thirty-seventh annual meeting","abstract":", , , Hawkwsbury, July 5-9, pp","call-number":"0002","author":[{"family":"El-Youssef","given":"B.M."},{"family":"Scienceman","given":"David","suffix":"M"}],"editor":[{"family":"Packham","given":"R."}],"issued":{"date-parts":[["1993"]]}}},{"key":"http://zotero.org/users/39885/items/XMWI2I7B","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XMWI2I7B","type":"paper-conference","title":"Deconstructing and Restyling D3 Visualizations","container-title":"Proceedings of the 27th Annual ACM Symposium on User Interface Software and Technology","collection-title":"UIST '14","publisher":"ACM","publisher-place":"New York, NY, USA","page":"253–262","source":"ACM Digital Library","event-place":"New York, NY, USA","abstract":"The D3 JavaScript library has become a ubiquitous tool for developing visualizations on the Web. Yet, once a D3 visualization is published online its visual style is difficult to change. We present a pair of tools for deconstructing and restyling existing D3 visualizations. Our deconstruction tool analyzes a D3 visualization to extract the data, the marks and the mappings between them. Our restyling tool lets users modify the visual attributes of the marks as well as the mappings from the data to these attributes. Together our tools allow users to easily modify D3 visualizations without examining the underlying code and we show how they can be used to deconstruct and restyle a variety of D3 visualizations.","URL":"http://doi.acm.org/10.1145/2642918.2647411","DOI":"10.1145/2642918.2647411","ISBN":"978-1-4503-3069-5","author":[{"family":"Harper","given":"Jonathan"},{"family":"Agrawala","given":"Maneesh"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",10,8]]}}},{"key":"http://zotero.org/users/39885/items/XPAVQWD3","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XPAVQWD3","type":"article-journal","title":"The paths to social licence to operate: An integrative model explaining community acceptance of mining","container-title":"Resources Policy","page":"61-70","volume":"39","source":"ScienceDirect","abstract":"We propose that to understand how a social licence to operate in mining is granted and maintained, we need to take account of the processes mining companies use to engage with local communities. The present research measured and modelled the critical elements of social licence by conducting a longitudinal study in an Australian mining region. The results of path analyses showed that building trust with local communities was crucial for mining companies to obtain and maintain a social licence to operate. The mining operation's negative impacts on social infrastructure, community members' perceived contact quality and procedural fairness in dealing with company personnel significantly affected the community's acceptance of the mining operation through inferred trustworthiness of the company. Our results highlight the importance of fair treatment and high-quality engagement of mining companies with communities, alongside mitigation of operational impacts, in securing and holding a social licence to operate.","URL":"http://www.sciencedirect.com/science/article/pii/S0301420713001141","DOI":"10.1016/j.resourpol.2013.11.003","ISSN":"0301-4207","shortTitle":"The paths to social licence to operate","journalAbbreviation":"Resources Policy","author":[{"family":"Moffat","given":"Kieren"},{"family":"Zhang","given":"Airong"}],"issued":{"date-parts":[["2014",3]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/XQ275MUU","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XQ275MUU","type":"article-journal","title":"Regulations of Hydraulic Fracturing under the Safe Drinking Water Act","container-title":"Buff. Envtl. LJ","page":"1","volume":"19","source":"Google Scholar","URL":"http://heinonlinebackup.com/hol-cgi-bin/get_pdf.cgi?handle=hein.journals/bufev19&section=5","author":[{"family":"Hall","given":"Keith B."}],"issued":{"date-parts":[["2011"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/XQCCUFUT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XQCCUFUT","type":"article-journal","title":"Entropy production and the Second Law in photosynthesis","container-title":"Biochimica et Biophysica Acta (BBA) - Bioenergetics","page":"1189-1193","volume":"1767","issue":"10","abstract":"An assertion that the primary photochemistry of photosynthesis can violate the Second Law of thermodynamics in certain efficient systems has been put forward by Jennings et al., who maintain their position strongly despite an argument to the contrary by Lavergne. We identify a specific omission in the calculation of Jennings et al. and show that no violation of the Second Law occurs, regardless of the photosynthetic efficiency.","URL":"http://www.sciencedirect.com/science/article/B6T1S-4P8B0WP-3/2/6bde8f3df5a2ec52b4e2a92caa8464ba","DOI":"10.1016/j.bbabio.2007.07.004","call-number":"0003","author":[{"family":"Knox","given":"Robert S."},{"family":"Parson","given":"William W."}],"issued":{"date-parts":[["2007",10]]},"accessed":{"date-parts":[["2008",3,28]]}}},{"key":"http://zotero.org/users/39885/items/XQEMMD67","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XQEMMD67","type":"book","title":"DSDM: Business Focused Development, Second Edition","publisher":"Pearson Education","edition":"2","source":"Amazon.com","ISBN":"0-321-11224-5","shortTitle":"DSDM","author":[{"family":"Consortium","given":"DSDM"},{"family":"Stapleton","given":"Jennifer"},{"family":"Consortium","given":"DSDM"}],"issued":{"date-parts":[["2003",1,13]]}}},{"key":"http://zotero.org/users/39885/items/XSRT5EMT","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XSRT5EMT","type":"book","title":"Ecological Economics: The Science and Management of Sustainability","publisher":"Columbia University Press","ISBN":"0-231-07563-4","call-number":"0742","shortTitle":"Ecological Economics","author":[{"family":"Costanza","given":"Robert"}],"issued":{"date-parts":[["1991",5,15]]}}},{"key":"http://zotero.org/users/39885/items/XSUCIQSQ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XSUCIQSQ","type":"article-journal","title":"Practical aspects of the calibration and use of the Aminco-Bowman spectrophotofluorometer","container-title":"Analytical Biochemistry","page":"339-357","volume":"20","issue":"2","abstract":"Although the Aminco-Bowman spectrophotofluorometer is widely employed as an analytical tool, relatively few users of the instrument seem to be familiar with its basic optical features. As a result, optimal performance of the apparatus is frequently not obtained, although it can be adapted to a wide range of fluorescence measurements including corrected excitation and emission spectra, quantum yields, polarization of fluorescence, as well as simple measurements of fluorescence intensity. Increasing interest in emission spectroscopy in recent years has generated a demand for more sophistication in the use of instruments for measuring fluorescence. Fortunately, coincident with these requirements, there have been marked improvements in the stability of lamp sources and in the quality of optical components. It does not seem unreasonable, therefore, that commercially available fluorescence spectrometers may be used for purposes other than the simple measurements for which they were originally intended. The present paper discusses some practical aspects of the use of the Aminco-Bowman spectrophotofluorometer for accurate measurement of spectra in the hope that such a communication will be helpful to those who wish to extend the usefulness of the instrument.","URL":"http://www.sciencedirect.com/science/article/B6W9V-4DYN465-9K/2/9c7928770406b999aa5efebd09b58824","DOI":"10.1016/0003-2697(67)90040-1","call-number":"0074","author":[{"family":"Chen","given":"Raymond F."}],"issued":{"date-parts":[["1967",8]]},"accessed":{"date-parts":[["2008",8,17]]}}},{"key":"http://zotero.org/users/39885/items/XTHMVGRS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XTHMVGRS","type":"book","title":"Ecological Microcosms","publisher":"Springer","ISBN":"0-387-97980-8","call-number":"0123","author":[{"family":"Beyers","given":"Robert J."},{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1993",8]]}}},{"key":"http://zotero.org/users/39885/items/XTNTPE52","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XTNTPE52","type":"article-journal","title":"Mathematics for generative processes: Living and non-living systems","container-title":"Journal of Computational and Applied Mathematics","page":"324-340","volume":"189","issue":"1-2","abstract":"The traditional Differential Calculus often shows its limits when describing living systems. These in fact present such a richness of characteristics that are, in the majority of cases, much wider than the description capabilities of the usual differential equations. Such an aspect became particularly evident during the research (completed in 2001) for an appropriate formulation of Odum's Maximum Em-Power Principle (proposed by the Author as a possible Fourth Thermodynamic Principle). In fact, in such a context, the particular non-conservative Algebra, adopted to account for both Quality and quantity of generative processes, suggested we introduce a faithfully corresponding concept of “derivative” (of both integer and fractional order) to describe dynamic conditions however variable. The new concept not only succeeded in pointing out the corresponding differential bases of all the rules of Emergy Algebra, but also represented the preferential guide in order to recognize the most profound physical nature of the basic processes which mostly characterize self-organizing Systems (co-production, co-injection, inter-action, feed-back, splits, etc.). From a mathematical point of view, the most important novelties introduced by such a new approach are: (i) the derivative of any integer or fractional order can be obtained independently from the evaluation of its lower order derivatives; (ii) the exponential function plays an extremely hinge role, much more marked than in the case of traditional differential equations; (iii) wide classes of differential equations, traditionally considered as being non-linear, become “intrinsically” linear when reconsidered in terms of “incipient” derivatives; (iv) their corresponding explicit solutions can be given in terms of new classes of functions (such as “binary” and “duet” functions); (v) every solution shows a sort of “persistence of form” when representing the product generated with respect to the agents of the generating process; (iv) and, at the same time, an intrinsic “genetic” ordinality which reflects the fact that any product “generated” is something more than the sum of the generating elements. Consequently all these properties enable us to follow the evolution of the “product” of any generative process from the very beginning, in its “rising”, in its “incipient” act of being born. This is why the new “operator” introduced, specifically apt when describing the above-mentioned aspects, was termed as “incipient” (or “spring”) derivative. In addition, even if the considered approach was suggested by the analysis of self-organizing living Systems, some specific examples of non-living Systems will also be mentioned. In fact, what is much more surprising is that such an approach is even more valid (than the traditional one) to describe non-living Systems too. In fact the resulting “drift” between traditional solutions and “incipient” solutions led us to reconsider the phenomenon of Mercury's precessions. The satisfactory agreement with the astronomical data suggested, as a consequential hypothesis, a different interpretation of its physical origin, substantially based on the Maximum Em-Power Principle.","URL":"http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6TYH-4G2BG86-3&_user=10&_rdoc=1&_fmt=&_orig=search&_sort=d&view=c&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=29d9619caf8de13561610d2f86d7eeb0","DOI":"10.1016/j.cam.2005.03.032","call-number":"0003","shortTitle":"Mathematics for generative processes","author":[{"family":"Giannantoni","given":"Corrado"}],"issued":{"date-parts":[["2006",5,1]]},"accessed":{"date-parts":[["2008",3,20]]}}},{"key":"http://zotero.org/users/39885/items/XUIWZBTW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XUIWZBTW","type":"book","title":"Ecological and General Systems: An Introduction to Systems Ecology","publisher":"University Press of Colorado","edition":"Rev Sub","ISBN":"0-87081-320-X","call-number":"0115","shortTitle":"Ecological and General Systems","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1994",4]]}}},{"key":"http://zotero.org/users/39885/items/XUN554GE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XUN554GE","type":"article-journal","title":"Self-Reporting and Self-Monitoring Requirements under Environmental Law","container-title":"Envtl. Law.","page":"681","volume":"1","source":"Google Scholar","URL":"http://heinonlinebackup.com/hol-cgi-bin/get_pdf.cgi?handle=hein.journals/environ1&section=38","author":[{"family":"Reitze Jr","given":"Arnold W."},{"family":"Hoffman","given":"Lee D."}],"issued":{"date-parts":[["1994"]]},"accessed":{"date-parts":[["2015",3,11]]}}},{"key":"http://zotero.org/users/39885/items/XV6A7N5N","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XV6A7N5N","type":"book","title":"Systems Engineering with SysML/UML: Modeling, Analysis, Design","publisher":"Morgan Kaufmann","source":"Amazon.com","URL":"http://books.google.com.au/books?id=LKC9F5gQt3AC&lpg=PA22&ots=gcgCa9fFV0&dq=V-Model%20%2B%20SysML&pg=PA22#v=onepage&q=sysmod&f=false","ISBN":"0-12-374274-9","shortTitle":"Systems Engineering with SysML/UML","author":[{"family":"Weilkiens","given":"Tim"}],"issued":{"date-parts":[["2008",2,26]]}}},{"key":"http://zotero.org/users/39885/items/XVPT732A","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XVPT732A","type":"article-journal","title":"Genetic background of extreme violent behavior","container-title":"Molecular Psychiatry","page":"786-792","volume":"20","issue":"6","source":"www.nature.com","abstract":"In developed countries, the majority of all violent crime is committed by a small group of antisocial recidivistic offenders, but no genes have been shown to contribute to recidivistic violent offending or severe violent behavior, such as homicide. Our results, from two independent cohorts of Finnish prisoners, revealed that a monoamine oxidase A (MAOA) low-activity genotype (contributing to low dopamine turnover rate) as well as the CDH13 gene (coding for neuronal membrane adhesion protein) are associated with extremely violent behavior (at least 10 committed homicides, attempted homicides or batteries). No substantial signal was observed for either MAOA or CDH13 among non-violent offenders, indicating that findings were specific for violent offending, and not largely attributable to substance abuse or antisocial personality disorder. These results indicate both low monoamine metabolism and neuronal membrane dysfunction as plausible factors in the etiology of extreme criminal violent behavior, and imply that at least about 5–10% of all severe violent crime in Finland is attributable to the aforementioned MAOA and CDH13 genotypes.","URL":"http://www.nature.com/mp/journal/v20/n6/full/mp2014130a.html","DOI":"10.1038/mp.2014.130","ISSN":"1359-4184","journalAbbreviation":"Mol Psychiatry","language":"en","author":[{"family":"Tiihonen","given":"J."},{"family":"Rautiainen","given":"M.-R."},{"family":"Ollila","given":"H. M."},{"family":"Repo-Tiihonen","given":"E."},{"family":"Virkkunen","given":"M."},{"family":"Palotie","given":"A."},{"family":"Pietiläinen","given":"O."},{"family":"Kristiansson","given":"K."},{"family":"Joukamaa","given":"M."},{"family":"Lauerma","given":"H."},{"family":"Saarela","given":"J."},{"family":"Tyni","given":"S."},{"family":"Vartiainen","given":"H."},{"family":"Paananen","given":"J."},{"family":"Goldman","given":"D."},{"family":"Paunio","given":"T."}],"issued":{"date-parts":[["2015",6]]},"accessed":{"date-parts":[["2016",2,20]]}}},{"key":"http://zotero.org/users/39885/items/XWFR4NEM","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XWFR4NEM","type":"article-journal","title":"Integrated water quality, emergy and economic evaluation of three bioremediation treatment systems for eutrophic water","container-title":"Ecological Engineering","page":"244-254","volume":"69","source":"ScienceDirect","abstract":"This study was targeted at finding one or more environmentally efficient, economically feasible and ecologically sustainable bioremediation treatment modes for eutrophic water. Three biological species, i.e. water spinach (Ipomoea aquatica), loach (Misgurus anguillicaudatus) and a pseudomonad (Rhodopseudomonas palustris), were combined in different ways: (A) water spinach–loach–pseudomonad; (B) water spinach–loach; (C) water spinach–pseudomonad, to construct three ecological engineering systems targeted at removing nutrients from the eutrophic water of Taihu Lake, PR China. An integrated water quality, emergy and economic evaluation of the three treatment systems was performed based on the observed changes in biomass, water quality, and other natural and economic inputs and outputs. The three ecological engineering treatment systems showed a different order of efficiency in removing nutrients (treatment A &gt; B &gt; C), produced different environmental loadings at the foreground (treatment B &gt; C &gt; A), background (treatment C = A &gt; B) and whole system scales (treatment C &gt; A &gt; B), and had different economic feasibility (treatment B &gt; A &gt; C). Finally, after taking all direct and indirect environmental and economic impacts into account, treatment A was found to be the best choice at the foreground scale, followed by treatment C and then B, while at the background and whole system scales, treatment B was the best option followed by A and C. In this analysis, emergy evaluation was found to be an ideal ecological integration tool for quantifying both the environmental and economic characteristics of ecological engineering systems and processes at multiple scales, including pollution treatment systems. The complex results of this study obtained by considering water treatment efficiency, emergy indices of sustainability and loading on multiple scales besides economic output/input analysis can inform decision-makers about trade-offs that confront them in the management of eutrophic waters.","URL":"http://www.sciencedirect.com/science/article/pii/S0925857414001906","DOI":"10.1016/j.ecoleng.2014.04.024","ISSN":"0925-8574","journalAbbreviation":"Ecological Engineering","author":[{"family":"Lu","given":"Hongfang"},{"family":"Yuan","given":"Yaguang"},{"family":"Campbell","given":"Daniel E."},{"family":"Qin","given":"Pei"},{"family":"Cui","given":"Lijuan"}],"issued":{"date-parts":[["2014",8]]},"accessed":{"date-parts":[["2015",1,23]]}}},{"key":"http://zotero.org/users/39885/items/XWTKEEXS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XWTKEEXS","type":"article-journal","title":"Integrating impact and relational dimensions of social licence and social impact assessment","container-title":"Impact Assessment and Project Appraisal","page":"273–282","volume":"32","issue":"4","source":"Google Scholar","URL":"http://www.tandfonline.com/doi/abs/10.1080/14615517.2014.936107","author":[{"family":"Parsons","given":"Richard"},{"family":"Moffat","given":"Kieren"}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",8,10]]}}},{"key":"http://zotero.org/users/39885/items/XX6RIPKG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XX6RIPKG","type":"article-journal","title":"Existential Terror","container-title":"The Journal of Ethics","page":"409-418","volume":"19","issue":"3-4","source":"link.springer.com","abstract":"Many of us feel existential terror when contemplating our future nonexistence. I examine several attempts to rationally justify existential terror. The most promising of these appeals to the effects of future nonexistence on the meaningfulness of our lives. I argue that even this justification fails, and therefore existential terror is irrational.","URL":"http://link.springer.com/article/10.1007/s10892-015-9204-7","DOI":"10.1007/s10892-015-9204-7","ISSN":"1382-4554, 1572-8609","journalAbbreviation":"J Ethics","language":"en","author":[{"family":"Bradley","given":"Ben"}],"issued":{"date-parts":[["2015",11,23]]},"accessed":{"date-parts":[["2015",12,10]]}}},{"key":"http://zotero.org/users/39885/items/XXDK9FUI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/XXDK9FUI","type":"article","title":"Bore Assessments and Make Good Agreements","publisher":"Queensland Government","URL":"https://www.ehp.qld.gov.au/management/non-mining/documents/bore-assessments-make-good.pdf","author":[{"family":"EHP","given":"Department of Environment Heritate and Planning"}],"issued":{"date-parts":[["2013"]]},"accessed":{"date-parts":[["2015",3,12]]}}},{"key":"http://zotero.org/users/39885/items/Z2EZZTBI","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Z2EZZTBI","type":"book","title":"TAFE accounting basic reports","publisher":"Thomson Learning","publisher-place":"Southbank  Vic.","edition":"7th ed.","event-place":"Southbank  Vic.","ISBN":"978-0-17-012011-1","author":[{"family":"Yates","given":"Lindsay"}],"issued":{"date-parts":[["2004"]]}}},{"key":"http://zotero.org/users/39885/items/Z2XV5MR5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Z2XV5MR5","type":"book","title":"Thermostatics and Thermodynamics","publisher":"D. Van Nostrand Company","number-of-pages":"649","edition":"1st edition","source":"Amazon","abstract":"Information theory described in Part 1 provides a meaning for the concept of entropy independent of the field of thermodynamics. Using this meaning (uncertainty) it is possible to derive all of statistical and classical thermodynamics in a direct and simple way. Many of the concepts and definitions of classical thermodynamics are given a new interpretation. Using information theory as a basis for a statistical description of an open system, in Part 2, the laws and theorems of thermodynamics are seen to follow in a simple way. The coupling of irreversible flows (Onsager's relation) is seen as a natural connection between thermostatics and thermodynamics if the functions introduced by Massieu are used instead of those introduced by Gibbs.","language":"English","author":[{"family":"Tribus","given":"Myron"}],"issued":{"date-parts":[["1961"]]}}},{"key":"http://zotero.org/users/39885/items/Z3BG37QE","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Z3BG37QE","type":"post-weblog","title":"AboutHydrology: R resources for Hydrologists","container-title":"AboutHydrology","URL":"http://abouthydrology.blogspot.com.au/2012/08/r-resources-for-hydrologists.html","shortTitle":"AboutHydrology","author":[{"family":"Hydrology","given":"About"}],"issued":{"date-parts":[["2012",8,22]]},"accessed":{"date-parts":[["2015",9,24]]}}},{"key":"http://zotero.org/users/39885/items/Z4X2KM86","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Z4X2KM86","type":"book","title":"Ecological Engineering: Principles and Practice","publisher":"CRC","edition":"1","ISBN":"1-56670-599-1","call-number":"0199","shortTitle":"Ecological Engineering","author":[{"family":"Kangas","given":"Patrick"}],"issued":{"date-parts":[["2003",9,25]]}}},{"key":"http://zotero.org/users/39885/items/Z699HPXF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Z699HPXF","type":"report","title":"National Industry Guideline for water quality metadata","collection-title":"WATER INFORMATION STANDARDS BUSINESS FORUM","publisher":"Australian Bureau of Meterology","genre":"Context Document","URL":"http://www.bom.gov.au/water/standards/projects/documents/Context-Document-for-Initial-Draft-National-Industry-Guideline-for-WQ-Metadata.pdf","author":[{"family":"BoM","given":""}],"issued":{"date-parts":[["2014"]]},"accessed":{"date-parts":[["2015",9,22]]}}},{"key":"http://zotero.org/users/39885/items/Z6K97UCF","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Z6K97UCF","type":"webpage","title":"The Logic of Oblivion: Leibniz and Hartsinck in the Harz","abstract":"Leibniz worked incessantly between 1679 and 1686 to establish his wind machines in the mines of the Harz Mountains. This was the experience that informed his Protogaea (1691), or history of the earth. (The first English translation of the work, which I did together with Claudine Cohen, appeared in 2008.) Drawing on archival documents from Clausthal and Hannover my book tells the story of Leibniz's invention, his struggles to establish it, and the ultimate failure of the venture.\n\nDuring the research phase of the project (while I was based at the MPIWG in Berlin, 2012-13), I reconstructed a detailed narrative of Leibniz’s efforts during the years 1679-1682. It was during this period that he (1) assumed control over the wind machine that he claimed to have invented, and (2) attempted to seize rights, patents and future earnings from that invention. He had a rival at that time, the Dutch-Japanese inventor Pieter Hartsinck. Until now, nobody has appreciated the role that Hartsinck’s original invention played in the story about Leibniz’s venture. The final version of my manuscript details the history of the years 1679-1686, when Leibniz became most involved in developing his machine. More than that, it also explores the subsequent history during which editors of the Leibniz Edition shaped the narrative, and largely erased Hartsinck from the picture. My book connects Leibniz’s failed entrepreneurship to larger questions about history, enlightenment and industrialization. I explore the notion of narrative repetition. Why do we keep repeating the same stories about the same figures, even when there is evidence that suggests we are wrong to do so?","URL":"https://www.mpiwg-berlin.mpg.de/en/research/projects/deptii_wakefield_leibniz","author":[{"family":"Wakefield","given":"Andre"}],"issued":{"date-parts":[["2016",1,14]]},"accessed":{"date-parts":[["2016",1,14]]}}},{"key":"http://zotero.org/users/39885/items/Z8IKHJ7D","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/Z8IKHJ7D","type":"article-journal","title":"Dynamic emergy accounting for assessing the environmental benefits of subtropical wetland stormwater management systems","container-title":"Ecological Modelling","page":"327–361","volume":"192","issue":"3","source":"Google Scholar","URL":"http://www.sciencedirect.com/science/article/pii/S0304380005003728","author":[{"family":"Tilley","given":"David Rogers"},{"family":"Brown","given":"Mark T."}],"issued":{"date-parts":[["2006"]]},"accessed":{"date-parts":[["2015",9,24]]}}},{"key":"http://zotero.org/users/39885/items/ZAI9SM82","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZAI9SM82","type":"book","title":"Energy system of New Zealand and the use of embodied energy for evaluating benefits of international trade","publisher":"Joint Centre for Environmental Sciences, University of Canterbury","call-number":"0007","author":[{"family":"Odum","given":"Howard T"}],"issued":{"date-parts":[["1980"]]}}},{"key":"http://zotero.org/users/39885/items/ZDT534GV","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZDT534GV","type":"paper-conference","title":"Emergy simulator, an open source simulation platform dedicated to systems ecology and emergy studies","container-title":"Proceedings of the IV International Biennial Workshop Advances in Energy Studies. Brazil","page":"349–360","source":"Google Scholar","URL":"http://www.unicamp.br/fea/ortega/energy/Raphael.pdf","author":[{"family":"Valyi","given":"Raphaël"},{"family":"Ortega","given":"Enrique"}],"issued":{"date-parts":[["2004"]]},"accessed":{"date-parts":[["2013",2,24]]}}},{"key":"http://zotero.org/users/39885/items/ZFW4DVUJ","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZFW4DVUJ","type":"book","title":"The Dancing Wu Li Masters: Overview of the New Physics","publisher":"Rider & Co","source":"Amazon.com","ISBN":"0-7126-4872-0","call-number":"0000","shortTitle":"The Dancing Wu Li Masters","author":[{"family":"Zukav","given":"Gary"}],"issued":{"date-parts":[["1991",3,14]]}}},{"key":"http://zotero.org/users/39885/items/ZGH7HR4T","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZGH7HR4T","type":"book","title":"Software Blueprints: Lightweight Uses of Logic in Conceptual Modelling","publisher":"Addison-Wesley Professional","ISBN":"0-201-39819-2","call-number":"0023","shortTitle":"Software Blueprints","author":[{"family":"Robertson","given":"David"},{"family":"Agusti","given":"Jaume"}],"issued":{"date-parts":[["1999",8,25]]}}},{"key":"http://zotero.org/users/39885/items/ZGVGMF98","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZGVGMF98","type":"book","title":"Energy criteria for water use","source":"OSTI Energy Citations","abstract":"The theory that water resources can be evaluated by their embodied energy is applied to examples. The energy effect of water is calculated as the energy flow of one type it produces in a specific use. Energy analysis is applied as an inclusive overview method for managing land and water resources. The analysis employs the conceptual tools of energy quality, embodied energy, and energy amplifer effect. A simple land-use model representative of the major land-use systems is formulated. The theory of selection for maximum power is applied and coupled with linear programming techniques to suggest an optimal method determining best use of water for combined economics of humanity and nature. The objective function is structured in terms of the total energy productivity of all the subsystems. The maximum power principle is employed as a more inclusive criterion than the usual profit or utility maximization. In the example applied to Lee County, Florida, the results are within the range of its current land distribution. 24 references, 10 figures.","author":[{"family":"Wang","given":"F. C"},{"family":"Odum","given":"H. T"},{"family":"Costanza","given":"R."}],"issued":{"date-parts":[["1980"]],"season":"K   ENERGY PLANNING, POLICY AND ECONOMY; ENERGY ANALYSIS; WATER RESOURCES; BIOSPHERE; COMPUTERIZED SIMULATION; INPUT-OUTPUT ANALYSIS; LAND USE; LINEAR PROGRAMMING; MATHEMATICAL MODELS; PLANNING; QUALITY OF LIFE; ECONOMETRICS; ECONOMIC ANALYSIS; ECONOMICS; ENVIRONMENT; PROGRAMMING; RESOURCES; SIMULATION"}}},{"key":"http://zotero.org/users/39885/items/ZHGI6GM8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZHGI6GM8","type":"article-journal","title":"The Leibnizian-Newtonian Debates: Natural Philosophy and Social Psychology","container-title":"The British Journal for the History of Science","page":"343–377","volume":"6","issue":"04","source":"Cambridge Journals Online","abstract":"By the time of the Leibniz-Clarke correspondence of 1716 the Newtonian and Leibnizian systems of natural philosophy had reached maturity. Each system consisted of different physical as well as metaphysical principles which, taken together, formed a world view. At the time of their famous debates, Leibniz at 70 and Newton at 74, the founders of two highly developed scientific philosophies, were struggling to establish and defend the ontological and mechanical bases of differing bodies of organized knowledge.","URL":"http://journals.cambridge.org/article_S000708740001253X","DOI":"10.1017/S000708740001253X","ISSN":"1474-001X","shortTitle":"The Leibnizian-Newtonian Debates","author":[{"family":"Iltis","given":"Carolyn"}],"issued":{"date-parts":[["1973",12]]},"accessed":{"date-parts":[["2015",12,31]]}}},{"key":"http://zotero.org/users/39885/items/ZHJDPQX8","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZHJDPQX8","type":"book","title":"Handbook of dynamic system modeling","publisher":"CRC Press","number-of-pages":"756","source":"Google Books","ISBN":"978-1-58488-565-8","call-number":"0006","author":[{"family":"Fishwick","given":"Paul A."}],"issued":{"date-parts":[["2007",6,1]]}}},{"key":"http://zotero.org/users/39885/items/ZIGMI2TP","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZIGMI2TP","type":"article-journal","title":"Maximum entropy production principle in physics, chemistry and biology","container-title":"Physics Reports","page":"1-45","volume":"426","issue":"1","source":"ScienceDirect","abstract":"The tendency of the entropy to a maximum as an isolated system is relaxed to the equilibrium (the second law of thermodynamics) has been known since the mid-19th century. However, independent theoretical and applied studies, which suggested the maximization of the entropy production during nonequilibrium processes (the so-called maximum entropy production principle, MEPP), appeared in the 20th century. Publications on this topic were fragmented and different research teams, which were concerned with this principle, were unaware of studies performed by other scientists. As a result, the recognition and the use of MEPP by a wider circle of researchers were considerably delayed. The objectives of the present review consist in summation and analysis of studies dealing with MEPP. The first part of the review is concerned with the thermodynamic and statistical basis of the principle (including the relationship of MEPP with the second law of thermodynamics and Prigogine's principle). Various existing applications of the principle to analysis of nonequilibrium systems will be discussed in the second part.","URL":"http://www.sciencedirect.com/science/article/pii/S0370157305004813","DOI":"10.1016/j.physrep.2005.12.001","ISSN":"0370-1573","journalAbbreviation":"Physics Reports","author":[{"family":"Martyushev","given":"L. M."},{"family":"Seleznev","given":"V. D."}],"issued":{"date-parts":[["2006",4]]},"accessed":{"date-parts":[["2016",3,11]]}}},{"key":"http://zotero.org/users/39885/items/ZKT92U85","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZKT92U85","type":"article-journal","title":"Interactive Simulation of SysML Models using Modelica","source":"Google Scholar","author":[{"family":"Vasaiely","given":"P."}]}},{"key":"http://zotero.org/users/39885/items/ZKTERR9N","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZKTERR9N","type":"article-journal","title":"An open-source software package for multivariate modeling and clustering: applications to air quality management","container-title":"Environmental Science and Pollution Research","page":"14220-14233","volume":"22","issue":"18","source":"link.springer.com.ezproxy.library.uq.edu.au","URL":"http://link.springer.com.ezproxy.library.uq.edu.au/article/10.1007/s11356-015-4664-7","DOI":"10.1007/s11356-015-4664-7","ISSN":"0944-1344, 1614-7499","shortTitle":"An open-source software package for multivariate modeling and clustering","journalAbbreviation":"Environ Sci Pollut Res","language":"en","author":[{"family":"Wang","given":"Xiuquan"},{"family":"Huang","given":"Guohe"},{"family":"Zhao","given":"Shan"},{"family":"Guo","given":"Junhong"}],"issued":{"date-parts":[["2015",5,14]]},"accessed":{"date-parts":[["2015",9,20]]}}},{"key":"http://zotero.org/users/39885/items/ZN77PHQ5","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZN77PHQ5","type":"book","title":"Steady-State Economics: Second Edition With New Essays","publisher":"Island Press","number-of-pages":"321","source":"Google Books","abstract":"First published in 1977, this volume caused a sensation because of Daly's radical view that \"enough is best.\" Today, his ideas are recognized as the key to sustainable development, and Steady-State Economics is universally acknowledged as the leading book on the economics of sustainability.","ISBN":"978-1-59726-872-1","shortTitle":"Steady-State Economics","language":"en","author":[{"family":"Daly","given":"Herman E."}],"issued":{"date-parts":[["1991",4,1]]}}},{"key":"http://zotero.org/users/39885/items/ZSHUF7TW","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZSHUF7TW","type":"book","title":"Getting Down to Earth: Practical Applications Of Ecological Economics","publisher":"Island Press","edition":"1","ISBN":"1-55963-503-7","call-number":"0031","shortTitle":"Getting Down to Earth","author":[{"family":"Alier","given":"Juan Martinez"}],"issued":{"date-parts":[["1996",8,1]]}}},{"key":"http://zotero.org/users/39885/items/ZU3N2J2V","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZU3N2J2V","type":"paper-conference","title":"Mathematics For Quality. Living and Non-Living Systems","publisher":"The Center for Environmental Policy, Department of Environmental Engineering Sciences, University of Florida","publisher-place":"University of Florida","page":"185-202","volume":"2","event":"Proceedings of the Second Biennial Emergy Conference","event-place":"University of Florida","ISBN":"09970732511","call-number":"0013","author":[{"family":"Giannantoni","given":"Corrado"}],"issued":{"date-parts":[["2003"]]}}},{"key":"http://zotero.org/users/39885/items/ZUVW8WPS","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZUVW8WPS","type":"article-journal","title":"A Review of the Physical and Chemical Properties of Human Semen and the Formulation of a Semen Simulant","container-title":"J Androl","page":"459-469","volume":"26","issue":"4","abstract":"A fluid medium was developed to simulate the salient physical and chemical properties of human semen. The composition of the medium was based upon an extensive review of the literature on constituents of human semen. In choosing the ingredients for this medium, the goal was to emphasize properties that influence interactions of human semen with topical contraceptive, prophylactic, or therapeutic products. Among these properties, pH and buffering capacity, osmolarity, ionic strength, and rheological properties play dominant roles in the physico-chemical processes that govern drug release kinetics and delivery vehicle distribution.","URL":"http://www.andrologyjournal.org/cgi/content/abstract/26/4/459","DOI":"10.2164/jandrol.04104","call-number":"0037","author":[{"family":"Owen","given":"Derek H."},{"family":"Katz","given":"David F."}],"issued":{"date-parts":[["2005",7,1]]},"accessed":{"date-parts":[["2008",5,17]]}}},{"key":"http://zotero.org/users/39885/items/ZVF7D73A","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZVF7D73A","type":"chapter","title":"The Varied Content of the Systems Society Annual Proceedings","container-title":"General Systems - Yearbook of the International Society for the Systems Sciences","publisher":"International Society for the Systems Sciences","publisher-place":"Louisville, Kentucky","page":"1-3","volume":"XXXII","event-place":"Louisville, Kentucky","author":[{"family":"Odum","given":"Howard T."}],"issued":{"date-parts":[["1989"]]}}},{"key":"http://zotero.org/users/39885/items/ZWJFDSSR","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZWJFDSSR","type":"article-journal","title":"Exergy based methods for economic and risk design optimization of energy systems: Application to a gas turbine","container-title":"Energy","page":"269-279","volume":"74","source":"ScienceDirect","abstract":"Exergy based analyses are considered by the scientific community appropriate tools for the design and the performance evaluation and improvements of energy systems. Moreover, they are today recognized as proper instruments to assess economic, environmental and social externalities of energy systems. This paper presents the results of a study in which different exergy analysis methods are adopted to determine the optimal design configuration of a gas turbine operating in simple Joule Brayton cycle.\n\nStandard exergy and Thermoeconomic analyses are performed to identify the highest thermodynamic efficiency and minimum economic cost configurations of the system, while for the environmental analysis Authors propose an innovative method in which the exergy analysis is combined with a Risk Analysis. With this method the total risk associated to the system is used as objective function in the same way as monetary cost is for standard Thermoeconomic analysis. These three methods aims therefore to determine the optimal design configurations of the system with respect to their specific objective functions, respectively: exergy cost (J/J), monetary (exergoeconomic) cost (€/J) and risk (injured/J) of the product.\n\nResults lead to three different optimal design parameters for the system, according to the objective of each analysis procedure.","URL":"http://www.sciencedirect.com/science/article/pii/S0360544214008652","DOI":"10.1016/j.energy.2014.07.043","ISSN":"0360-5442","shortTitle":"Exergy based methods for economic and risk design optimization of energy systems","journalAbbreviation":"Energy","author":[{"family":"Cassetti","given":"G."},{"family":"Rocco","given":"M. V."},{"family":"Colombo","given":"E."}],"issued":{"date-parts":[["2014",9,1]]},"accessed":{"date-parts":[["2015",2,4]]}}},{"key":"http://zotero.org/users/39885/items/ZX3XXJUG","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZX3XXJUG","type":"book","title":"Fundamentals of Ecology. In Collaboration with Howard T. Odum.","publisher":"W. B. Saunders","call-number":"0000","author":[{"family":"Odum","given":"Eugene P."}],"issued":{"date-parts":[["1971"]]}}},{"key":"http://zotero.org/users/39885/items/ZXSQ3DQ7","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZXSQ3DQ7","type":"book","title":"E=mc2 : a biography of the world's most famous equation","publisher":"Pan","publisher-place":"London","event-place":"London","ISBN":"978-0-330-39165-8","call-number":"0060","author":[{"family":"Bodanis","given":"David"}],"issued":{"date-parts":[["2001"]]}}},{"key":"http://zotero.org/users/39885/items/ZXTWVA9J","type":"put","valueEncoding":"json","value":{"id":"http://zotero.org/users/39885/items/ZXTWVA9J","type":"article","title":"Southampton FC: A SAM strategy Microsoft Case Study","publisher":"Microsoft","URL":"http://download.microsoft.com/download/7/F/1/7F18B556-BC4D-4B5C-BAB8-9386515BF1EB/UK-Southampton_FC_Saints.pdf","call-number":"0000","author":[{"family":"Microsoft","given":""}],"issued":{"date-parts":[["2005"]]},"accessed":{"date-parts":[["2010",5,31]]}}}]
},{}],138:[function(require,module,exports){
var data = [{
            type: "put",
            key: "somedocument",
            valueEncoding : 'json',
            value: {
                id: "somedocument",
                author: 'Sholto Maud',
                email: 'sholto.maud@gmail.com',
                edits : [ {
                  startDate: new Date("2016-03-01T11:00:00"),
                  endTime: ''}],
                lastEdit: new Date("2016-03-01T11:00:00"),
                ast : [ { type: 'heading',
                          text: [ 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' ],
                          level: 1,
                          raw: 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' },
                        { type: 'paragraph',
                          text: [ 'Candidature Doctoral thesis by Mr Sholto Maud' ] },
                        { type: 'heading', text: [ 'Usage' ], level: 2, raw: 'Usage' },
                        { type: 'paragraph', text: [ 'Download with git, or npm' ] } 
                  ],
                title: 'First test'
              }
        },{
            type: "put",
            key: "somedocument3",
            valueEncoding : 'json',
            value: {
                id: "somedocument2",
                author: 'Sholto Maud',
                email: 'sholto.maud@gmail.com',
                edits : [ {
                  startDate: new Date("2016-03-01T11:00:00"),
                  endTime: ''}],
                lastEdit: new Date("2016-03-01T11:00:00"),
                ast : [ { type: 'heading',
                          text: [ 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' ],
                          level: 1,
                          raw: 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' },
                        { type: 'paragraph',
                          text: [ 'Candidature Doctoral thesis by Mr Sholto Maud' ] },
                        { type: 'heading', text: [ 'Usage' ], level: 2, raw: 'Usage' },
                        { type: 'paragraph', text: [ 'Download with git, or npm' ] } 
                  ],
                title: 'Second test'
              }
        },{
            type: "put",
            key: "somedocument4",
            valueEncoding : 'json',
            value: {
                id: "somedocument4",
                author: 'Sholto Maud',
                email: 'sholto.maud@gmail.com',
                edits : [ {
                  startDate: new Date("2016-03-01T11:00:00"),
                  endTime: ''}],
                lastEdit: new Date("2016-03-01T11:00:00"),
                ast : [ { type: 'heading',
                          text: [ 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' ],
                          level: 1,
                          raw: 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' },
                        { type: 'paragraph',
                          text: [ 'Candidature Doctoral thesis by Mr Sholto Maud' ] },
                        { type: 'heading', text: [ 'Usage' ], level: 2, raw: 'Usage' },
                        { type: 'paragraph', text: [ 'Download with git, or npm' ] } 
                  ],
                title: 'Second test'
              }
        },{
            type: "put",
            key: "somedocument5",
            valueEncoding : 'json',
            value: {
                id: "somedocument5",
                author: 'Sholto Maud',
                email: 'sholto.maud@gmail.com',
                edits : [ {
                  startDate: new Date("2016-03-01T11:00:00"),
                  endTime: ''}],
                lastEdit: new Date("2016-03-01T11:00:00"),
                ast : [ { type: 'heading',
                          text: [ 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' ],
                          level: 1,
                          raw: 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' },
                        { type: 'paragraph',
                          text: [ 'Candidature Doctoral thesis by Mr Sholto Maud' ] },
                        { type: 'heading', text: [ 'Usage' ], level: 2, raw: 'Usage' },
                        { type: 'paragraph', text: [ 'Download with git, or npm' ] } 
                  ],
                title: 'Second test'
              }
        },{
            type: "put",
            key: "somedocument6",
            valueEncoding : 'json',
            value: {
                id: "somedocument6",
                author: 'Sholto Maud',
                email: 'sholto.maud@gmail.com',
                edits : [ {
                  startDate: new Date("2016-03-01T11:00:00"),
                  endTime: ''}],
                lastEdit: new Date("2016-03-01T11:00:00"),
                ast : [ { type: 'heading',
                          text: [ 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' ],
                          level: 1,
                          raw: 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' },
                        { type: 'paragraph',
                          text: [ 'Candidature Doctoral thesis by Mr Sholto Maud' ] },
                        { 
                          type: 'heading', 
                          text: [ 'Usage' ], 
                          level: 2, 
                          raw: 'Usage' 
                        },
                        { 
                          type: 'heading', 
                          text: [ 'Some thing nice' ], 
                          level: 1, 
                          raw: 'Usage' 
                        },
                        { type: 'paragraph', text: [ 'Download with git, or npm' ] } 
                  ],
                title: 'Second test'
              }
        },
        {
            type: "put",
            key: "somedocument7",
            valueEncoding : 'json',
            value: {
                id: "somedocument7",
                author: 'Sholto Maud',
                email: 'sholto.maud@gmail.com',
                edits : [ {
                  startDate: new Date("2016-03-01T11:00:00"),
                  endTime: ''}],
                lastEdit: new Date("2016-03-01T11:00:00"),
                ast : [ { type: 'heading',
                          text: [ 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' ],
                          level: 1,
                          raw: 'The Principle of Least Action and the Philosophy of Engineering: Philosophy of Mind' },
                        { type: 'paragraph',
                          text: [ 'Candidature Doctoral thesis by Mr Sholto Maud' ] },
                        { type: 'heading', text: [ 'Usage' ], level: 2, raw: 'Usage' },
                        { type: 'paragraph', text: [ 'Download with git, or npm' ] } 
                        ,{
                          type: "cite",
                          text: [
                            [
                              {
                                "citationSuffix": [],
                                "citationNoteNum": 0,
                                "citationMode": {
                                  "type": "NormalCitation",
                                  "text": []
                                },
                                "citationPrefix": [],
                                "citationId": "odum_times_1954",
                                "citationHash": 0
                              }
                            ],
                            [
                              {
                                "type": "Str",
                                "text": "[@odum_times_1954]"
                              }
                            ]
                          ]
                        }         
                  ],
                title: 'Second test'
              }
        }
        ];

        


module.exports = data;
},{}],139:[function(require,module,exports){
var fastn = require("../fastn");

var sessionModel = new fastn.Model({
  loginID: '',
  gfcToken: '709eea4591e6cac410babb5eba9a283f',
  firstName: 'Sholto',
  surname: 'Maud'
});

// debugging
sessionModel.on('.|**', function(sessionData){
  console.log(sessionData);
});


module.exports = {
  model: sessionModel,
  setSession: function(sessionData){
    sessionModel.update(sessionData);
  },
  getToken: fastn.binding('gfcToken').attach(sessionModel),
  getFirstname: fastn.binding('firstName').attach(sessionModel),
  getSurname: fastn.binding('surname').attach(sessionModel)
};
},{"../fastn":141}],140:[function(require,module,exports){
var fastn = require("../fastn"),
    debug = require("debug")('tutorme:app.time'),
    start = new Date(),
    startMil = start.getTime(),
    h = start.getHours(), 
    m = ( '00' + + Math.floor( start.getMinutes() )).slice(-2) ,
    _time = (h > 12) ? (h-12 + ':' + m +' PM') : (h + ':' + m +' AM'),
    now = 0,
    fiveMin = 1000 * 60 * 5,
    thirtySec = 1000 * 30;

var timeModel = new fastn.Model({
    hours: '00',
    minutes: '00',
    startTime: _time,
    currentTime: startMil,
    elapsedTime: 0,
    fiveMinCounter: fiveMin,
    thirtySecCounter: thirtySec,
    timeIncrement: 1
});


var timeData = timeModel.get('.'),
        nextTime = timeData.currentTime + ( timeData.timeIncrement * 60000 ),
        timeUpdate = new Date(nextTime);

        timeModel.update({
            fiveMinCounter : timeData.fiveMinCounter - 10000, 
            currentTime: nextTime
        })

module.exports = {
    timeModel : timeModel
}
},{"../fastn":141,"debug":17}],141:[function(require,module,exports){
module.exports = require("fastn")({
    _generic: require("fastn/genericComponent"),
    templater: require("fastn/templaterComponent"),
    list: require("fastn/listComponent"),
    text: require("fastn/textComponent"),
    modal: require("modal-component/modalComponent"),
    icon: require("svg-icon-component/iconComponent")({
        resolvePath: function(iconName){
            return 'styles/icons/' + iconName + '.svg';
        }
    })
}, true);
},{"fastn":52,"fastn/genericComponent":51,"fastn/listComponent":54,"fastn/templaterComponent":57,"fastn/textComponent":58,"modal-component/modalComponent":86,"svg-icon-component/iconComponent":120}],142:[function(require,module,exports){
var fastn = require("./fastn");

window.addEventListener('load', function(){
    var ui = require("./ui");

    ui.attach().render();

    document.body.appendChild(ui.element);
});

},{"./fastn":141,"./ui":145}],143:[function(require,module,exports){
var app = require("../app"),
    fastn = require("../fastn"),
    pages = require("./pages");

module.exports = fastn('list', {
    class: 'activities',
    items: app.activityRouter.binding,
    template: function(){
        return fastn('templater', {
            data: fastn.binding('item|*'),
            attachTemplates: false,
            template: function(model, scope, lastComponent){
                var name = model.get('item.name'),
                    route = app.activityRouter.router.get(name, model.get('item.values'));

                if(lastComponent && lastComponent.route === route){
                    return lastComponent;
                }

                var activity = fastn('div', {
                        'class': fastn.binding('item.name', function(name){
                            return ['activity', name];
                        })
                    },
                    pages[name] && pages[name]( model)
                );
                
                activity.route = route;

                return activity;
            }
        });
    }
});
},{"../app":135,"../fastn":141,"./pages":149}],144:[function(require,module,exports){
var fastn = require("../fastn"),
    app = require("../app");

module.exports = function(){
    return fastn('div', {class: 'appBar'},
        fastn('div',{class:'menu'},
            fastn('icon', {'name': 'menu'}) )
            .on('click', function(event, scope) {
                event.preventDefault();
                event.stopImmediatePropagation();
                // require('../modals').menu.show(true);

              //   <button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon" id="btn1" data-upgraded=",MaterialButton,MaterialRipple">
              // <i class="material-icons">more_vert</i>
            // <span class="mdl-button__ripple-container"><span class="mdl-ripple is-animating" style="width: 92.5097px; height: 92.5097px; transform: translate(-50%, -50%) translate(19px, 20px);"></span></span></button>
            }
        ),
        fastn('div',{class:'app-title'}, 'Simple Thesis' )
        .on('click',function(event, scope) {
            event.preventDefault();
            app.activityRouter.reset('home');
            app.doc.clearCurrentDoc();
        }),
        fastn('div',{class:'menu'},
            fastn('icon', {'name': 'login'}) )
                .on('click', function(event, scope) {
                event.preventDefault();
                event.stopImmediatePropagation();
                // require('../modals').menu.show(true);
            })
        )
};

//This would be for the modal

 // <ul class="mdl-menu mdl-js-menu mdl-menu--bottom-right" for="btn1">
 //              <li class="mdl-menu__item">Lorem</li>
 //              <li class="mdl-menu__item" disabled>Ipsum</li>
 //              <li class="mdl-menu__item">Dolor</li>
 //            </ul>
},{"../app":135,"../fastn":141}],145:[function(require,module,exports){
var fastn = require("../fastn");

module.exports = fastn('div', {class:'demo-layout-transparent mdl-layout mdl-js-layout'},
    require("./appBar")(),
    require("./activities")
);


},{"../fastn":141,"./activities":143,"./appBar":144}],146:[function(require,module,exports){
var fastn = require("../../../fastn"),
    app = require("../../../app"),
    marked = require("marked-ast"),
    toMarkdown = require("marked-ast-markdown"),
    docModel = app.doc.docModel;

var doc = function( activityModel ){ 
    fastn('div',
        {
            class: 'doc',
            contenteditable: true,
            spellcheck: true
        },
        fastn('list', {
            class: 'doc-items',
            items: fastn.binding('currentDoc.ast|*'),
            template: function( model ){
                return fastn('div', 
                    { 
                        class: fastn.binding('item.type', function(value){
                            return 'doc-section-' + value;
                        }),
                        innerHTML: fastn.binding('item.text|0'),
                        tabindex:1
                        // ,
                        // onkeyup: 'innerHTML:innerHTML'
                    }
                    // , 
                    // fastn.binding('item.text|0')
                )
                // .on('click',function(model, scope){
                //     // console.log('hello',model,scope.get('.'));
                    
                // })
                .on('keyup',function(event, scope){
                    console.log(event, scope)                        
                    
                
                    //Actually here is the logic ...
                    /// If the values of the textarea starts with '#' then change the style and set the section title in model
                    // It is the containing div? 
                    // So I can drag and drop to other divs?
                    // Create a new text area. 
                    // 
                    
                    var keycode =  event.keyCode;
                    switch ( keycode ){
                        case 13:
                            console.log('hooray')
                            break;
                        case 35:
                            titleTrigger = 1;
                            console.log('trigger val', titleTrigger)
                            break;
                        case 32:
                            titleTrigger = 0;
                            console.log('trigger val', titleTrigger)
                            
                            break;
                        default:
                            ( titleTrigger ) ? console.log('Need to assign class & format') : '';
                            console.log('key', keycode)
                    }
                });
            }
        }).attach(docModel)
    );
}

module.exports = doc;

// function resize () {
//     text.style.height = 'auto';
//     text.style.height = text.scrollHeight+'px';
// }

// /* 0-timeout to get the already changed text */
// function delayedResize () {
//     window.setTimeout(resize, 0);
// }

// // var text = document.getElementById('text');
                        
//                         // observe(text, 'change',  resize);
//                         // observe(text, 'cut',     delayedResize);
//                         // observe(text, 'paste',   delayedResize);
//                         // observe(text, 'drop',    delayedResize);
//                         // observe(text, 'keydown', delayedResize);

//                         // text.focus();
//                         // text.select();
//                         // resize();
// // fastn.Model()

// module.exports = function( activityModel ){
//     return  fastn('div', {class: 'page'},
//             fastn('list', {
//                 class: 'doc-items',
//                 items: fastn.binding('currentHeadings|*'),
//                 template: function( model ){
//                     // <input type="button" onClick="document.getElementById('middle').scrollIntoView();" />
//                     return fastn('button', fastn.binding('item')
//                     )
//                 }
//             }),
//             fastn('div',
//                 {
//                     contenteditable:true,
//                     spellcheck: true
//                 },
//                 fastn('list', {
//                     class: 'doc-items',
//                     items: fastn.binding('currentDoc.ast|*'),
//                     template: function( model ){
//                         return fastn('div', 
//                             { 

//                                 class: fastn.binding('item.type', function(value){
//                                     return 'doc-section-' + value;
//                                 })
//                             }, 
//                             fastn.binding('item.text|0')
//                         ).on('change', function(model, scope){
//                             // console.log('scope', scope.get('.'));
//                             // console.log('model', model.target.clientWidth);    
//                         })
//                         .on('keydown', function(model, scope){
//                             // console.log('scope', scope.get('.'));
//                             console.log('model', model.target.clientHeight);    
//                         })
//                     }
//                 })
//             ),
//             fastn('list', {
//                 class: 'doc-items',
//                 items: fastn.binding('currentCitations|*'),
//                 template: function( model ){
//                     return fastn('label', fastn.binding('item')
//                     )
//                 }
//             })
//         ).attach(docModel);
//     }        
//                     //     fastn('label', {class: 'doc-startDate'}, 
//                     //         fastn.binding('item.lastEdit', function(value){
//                     //             var d = new Date(value);
//                     //             return d.getMonth()+1 + '/' + d.getDate() + '/' + d.getFullYear();
//                     //         })),
//                     //     fastn('label', {class: 'doc-tutor'},fastn.binding('item.author') )
                        
//                     // ).on('click',function(event,scope){
//                     //     // console.log('helol',scope.get('item.id') );
//                     //     app.activityRouter.add('doc',{_id:scope.get('item.id')});
//                     //     app.doc.setCurrentDoc( scope.get('item.id') );
//                     // });
//             // }
        
// // ,


// //         fastn('div',  {class: 'docs'}, 
// //             fastn('textarea', 
// //                 {
// //                     class:'predicateTitle',
// //                     // disabled: fastn.binding('disabled').attach(app.disable.model),
// //                     // value: fastn.binding('currentDoc.author').attach(app.documents.documentModel),
// //                     value: fastn.binding('currentDoc.title'),
// //                     // value: app.documents.title,
// //                     placeholder: 'Predicate title',
// //                     onkeyup: 'value:value'
// //                 }
// //             ),
// //             fastn('textarea', 
// //                 {
// //                     class:'predicateTitle',
// //                     // disabled: fastn.binding('disabled').attach(app.disable.model),
// //                     // value: fastn.binding('currentDoc.author').attach(app.documents.documentModel),
// //                     value: fastn.binding('currentDoc.ast', function(value){
// //                         // var md = toMarkdown(JSON.stringify(JSON.parse(value)));
// //                         // ast.map(writeNode).join('');
// //                         if ( value ){
// //                             return toMarkdown(value);
// //                         }
// //                         // var x =  new Array (value);
// //                         // // var x = JSON.parse(value);
// //                         // console.log('x',x)
// //                         // for(i in x){
// //                         //     console.log('i',i)
// //                         // }
// //                         // // var md = toMarkdown();
// //                         // // console.log(md);
// //                         // return JSON.stringify(value);
// //                     }),
// //                     // value: app.documents.title,
// //                     placeholder: 'Predicate title',
// //                     onkeyup: 'value:value'
// //                 }
// //             )
// //         ).attach(docModel)
// //     );
// // }




},{"../../../app":135,"../../../fastn":141,"marked-ast":85,"marked-ast-markdown":83}],147:[function(require,module,exports){
var fastn = require("../../fastn"),
    app = require("../../app"),
    docModel = app.doc.docModel;

module.exports = function( activityModel ){ 
    return fastn('div', { class: 'editor' },
        fastn('div',{ class: 'doc-left-panel' },
            fastn('list', {
                class: 'contents',
                items: fastn.binding('currentHeadings|*'),
                template: function( model ){
                    // <input type="button" onClick="document.getElementById('middle').scrollIntoView();" />
                    return fastn('button', { class: 'contents-button' }, fastn.binding('item', function(value){
                            return ( value.length > 26 )? value.substring(0,20) + ' ... ': value;
                        }) 
                    ).on('click',function(model, scope){
                        console.log('hello',model,scope.get('.'));
                    });
                }
            }).attach(docModel)
        ),
        fastn('div',{ class: 'doc-centre-panel' },
            fastn('div',
                {
                    class: 'doc',
                    contenteditable: true,
                    spellcheck: true
                },
                fastn('list', {
                    class: 'doc-items',
                    items: fastn.binding('currentDoc.ast|*'),
                    template: function( model ){
                        return fastn('div', 
                            { 
                                class: fastn.binding('item.type', function(value){
                                    return 'doc-section-' + value;
                                }),
                                contenteditable:true,
                                textContent: fastn.binding('item.text|0'),
                                tabindex:'1',
                                draggable:true
                            }
                            // ,
                            // fastn.binding('item.text|0')
                        ).on('keyup',function(event, scope){
                            console.log('event, scope ',event, scope)                        
                            
                            //Actually here is the logic ...
                            /// If the values of the textarea starts with '#' then change the style and set the section title in model
                            // It is the containing div? 
                            // So I can drag and drop to other divs?
                            // Create a new text area. 
                            // 
                            
                            switch (  event.keyCode ){
                                case 13:
                                    console.log('hooray')
                                    break;
                                case 35:
                                    titleTrigger = 1;
                                    console.log('trigger val', titleTrigger)
                                    break;
                                case 32:
                                    titleTrigger = 0;
                                    console.log('trigger val', titleTrigger)
                                    
                                    break;
                                default:
                                    ( titleTrigger ) ? console.log('Need to assign class & format') : '';
                                    console.log('key', keycode)
                            }
                        });
                    }
                }).attach(docModel)
            )
        ),
        fastn('div', { class: 'doc-right-panel' },
            fastn('div', {class:'bibliography'},
                fastn('div',{class:'bib-title'}, 'Bibliography' )
                    .on('click',function(event, scope) {
                        event.preventDefault();
                        // app.activityRouter.reset('home');
                        // app.doc.clearCurrentDoc();
                    }),
                fastn('list', {
                    class: 'doc-contents',
                    items: fastn.binding('references|*'),
                    template: function( model ){
                        return fastn('button', { 
                            class: 'contents-button' 
                        }, 
                        fastn.binding('item', function(value){
                            return ( value.length > 26 )? 
                            value.substring(0,20) + ' ... ': value;
                        })
                        ); 
                    }
                })
                .attach(docModel)
            )
        )
    );
}
},{"../../app":135,"../../fastn":141}],148:[function(require,module,exports){
var fastn = require("../../fastn"),
    app = require("../../app"),
    docModel = app.doc.docModel;

var home = fastn('div', {class: 'page'},
        fastn('div',  {class: 'docs'},
            fastn('list', {
                items: fastn.binding('docs|*'),
                template: function( model ){
                return  fastn('div',  {class: 'doc-card'},
                        // {class: 'mdl-card mdl-cell mdl-cell--9-col-desktop mdl-cell--6-col-tablet mdl-cell--4-col-phone'},
                            fastn('label', {class: 'doc-title'}, fastn.binding('item.title') ),
                            fastn('label', {class: 'doc-startDate'}, 
                                fastn.binding('item.lastEdit', function(value){
                                    var d = new Date(value);
                                    return d.getMonth()+1 + '/' + d.getDate() + '/' + d.getFullYear();
                                })),
                            fastn('label', {class: 'doc-tutor'},fastn.binding('item.author') )
                            
                        ).on('click',function(event,scope){
                            console.log('helol', scope.get('.') );
                            app.activityRouter.add('editor',{_id:scope.get('item.id')});
                            app.doc.setCurrentDoc( scope.get('item.id') );
                        });
                }
            })
            .attach(docModel)
        )
        
    );

// <div class="mdl-card mdl-cell mdl-cell--9-col-desktop mdl-cell--6-col-tablet mdl-cell--4-col-phone">
//               <div class="mdl-card__supporting-text">
//                 <h4>Features</h4>
//                 Dolore ex deserunt aute fugiat aute nulla ea sunt aliqua nisi cupidatat eu. Nostrud in laboris labore nisi amet do dolor eu fugiat consectetur elit cillum esse.
//               </div>
//               <div class="mdl-card__actions">
//                 <a href="#" class="mdl-button">Read our features</a>
//               </div>
//             </div>

module.exports = function(){
    
    return home;
}
},{"../../app":135,"../../fastn":141}],149:[function(require,module,exports){
module.exports = {
    home : require("./home"),
    doc : require("./doc"),
    editor : require("./editor")
    // tute : require('./tute'),
    // topic : require('./topic')

}
},{"./doc":146,"./editor":147,"./home":148}]},{},[142])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
